{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/subscriptions/autoComplete.ts", "../src/pic18/instructions.ts", "../src/pic18/instruction_detail.ts", "../src/pic18/utils.ts", "../src/pic18/define.ts", "../src/pic18/define/difference.json", "../src/pic18/define/same.json", "../src/pic18/define/mpasm.json", "../src/pic18/define/xc8.json", "../src/resource/label/completion.ts", "../src/utils/getFileId.ts", "../src/resource/label/data.ts", "../src/resource/variable/completion.ts", "../src/resource/include/data.ts", "../src/resource/variable/data.ts", "../src/subscriptions/fileWatcher.ts", "../src/config.ts", "../src/utils/scheduleWork.ts", "../src/resource/label/analyze.ts", "../src/resource/types.ts", "../src/resource/label/diagnostic.ts", "../src/resource/label/types/base.ts", "../src/resource/label/types/label.ts", "../src/resource/label/types/branchLabel.ts", "../src/semantic/index.ts", "../src/semantic/module/label.ts", "../src/semantic/module/variable.ts", "../node_modules/lru-cache/src/index.ts", "../src/resource/include/analyze.ts", "../src/resource/include/types/include.ts", "../src/resource/variable/analyze.ts", "../src/resource/variable/diagnostic.ts", "../src/resource/variable/types/base.ts", "../src/resource/variable/types/variableDefine.ts", "../src/resource/variable/usageVariableRegex.ts", "../src/resource/variable/types/variable.ts", "../src/definition/index.ts", "../src/definition/label.ts", "../src/definition/variable.ts"],
  "sourcesContent": ["import { ExtensionContext } from \"vscode\";\r\n\r\nimport { initAutoCompletionProvider } from \"@/subscriptions/autoComplete\";\r\nimport { initFileSystemWatcher } from \"@/subscriptions/fileWatcher\";\r\nimport { initSemanticProvider } from \"./semantic/index\";\r\nimport { initDefinitionProvider } from \"./definition\";\r\n\r\nexport function activate(context: ExtensionContext) {\r\n    initAutoCompletionProvider(context);\r\n    initFileSystemWatcher(context);\r\n    initDefinitionProvider(context);\r\n    initSemanticProvider(context);\r\n}\r\n\r\nexport function deactivate() { }\r\n", "import {\r\n    CancellationToken,\r\n    CompletionContext,\r\n    CompletionItem,\r\n    ExtensionContext,\r\n    languages,\r\n    Position,\r\n    TextDocument,\r\n    workspace,\r\n} from \"vscode\";\r\n\r\nimport {\r\n    PIC_INSTRUCTIONS_COMPLETIONS\r\n} from \"@/pic18/instructions\";\r\nimport {\r\n    isBranchAutoComplete\r\n} from \"@/pic18/utils\";\r\n// import { variableCompletionData } from \"@/resource/variable\";\r\n\r\nimport { PIC_DEFINE_COMPLETIONS_WITH_SORT_TEXT } from \"@/pic18/define\";\r\n// import { includesData } from \"@/resource/includes\";\r\nimport { getLabelCompletions } from \"@/resource/label/completion\";\r\nimport { variableManager } from \"@/resource/variable/data\";\r\nimport { getFileId } from \"@/utils/getFileId\";\r\nimport { includeManager } from \"@/resource/include/data\";\r\nimport { getVariableCompletions } from \"@/resource/variable/completion\";\r\n\r\nasync function provideCompletionItems(\r\n    document: TextDocument,\r\n    position: Position,\r\n    token: CancellationToken,\r\n    context: CompletionContext\r\n): Promise<CompletionItem[] | undefined> {\r\n    const filePath = getFileId(document.uri);\r\n    const linePrefix = document.lineAt(position).text.slice(0, position.character);\r\n    if (/;/.test(linePrefix)) {\r\n        return undefined;\r\n    }\r\n\r\n    if (isBranchAutoComplete(linePrefix)) {\r\n        return getLabelCompletions(document);\r\n    }\r\n\r\n    if (/^(?:\\s)*([^\\s\\#]+)?$/.test(linePrefix)) {\r\n        return PIC_INSTRUCTIONS_COMPLETIONS;\r\n    }\r\n\r\n    // const docVariables = variableCompletionData.get(filePath) ?? [];\r\n    // const includeVariables = (includesData.get(filePath) ?? []).flatMap(uri => {\r\n    //     const includePath = workspace.asRelativePath(uri, false).toLowerCase();\r\n    //     return variableCompletionData.get(includePath) ?? [];\r\n    // });\r\n    // const docVariables = [...variableManager.fileMapData.get(filePath)?.keys() ?? []];\r\n    // const includeVariables = Array.from(includeManager.recursiveIncludeMapData.get(filePath) ?? []).map(uri => {\r\n    //     return [...variableManager.fileMapData.get(uri)?.keys() ?? []];\r\n    // }).flat();\r\n\r\n    // return [...docVariables, ...includeVariables, ...PIC_DEFINE_COMPLETIONS_WITH_SORT_TEXT];\r\n    return [\r\n        ...getVariableCompletions(document),\r\n        ...PIC_DEFINE_COMPLETIONS_WITH_SORT_TEXT\r\n    ];\r\n}\r\n\r\nexport function initAutoCompletionProvider(context: ExtensionContext) {\r\n    const {\r\n        subscriptions\r\n    } = context;\r\n\r\n    const provider = languages.registerCompletionItemProvider(\r\n        { language: \"asm\" },\r\n        { provideCompletionItems },\r\n        \" \", \",\"\r\n    );\r\n\r\n    subscriptions.push(provider);\r\n}\r\n", "import { CompletionItem, CompletionItemKind, MarkdownString } from \"vscode\";\r\nimport { INSTRUCTION_DETAILS_MAP } from \"./instruction_detail\";\r\nimport { InstructionKey } from \"./type\";\r\n\r\nexport type PicInstruction = {\r\n    label: string;\r\n    detail: string;\r\n};\r\n\r\nexport const PIC_INSTRUCTIONS: PicInstruction[] = [\r\n    { label: \"ADDWF\", detail: \"Add WREG and f\" },\r\n    { label: \"ADDWFC\", detail: \"Add WREG and Carry bit to f\" },\r\n    { label: \"ANDWF\", detail: \"AND WREG with f\" },\r\n    { label: \"CLRF\", detail: \"Clear f\" },\r\n    { label: \"COMF\", detail: \"Complement f\" },\r\n    { label: \"CPFSEQ\", detail: \"Compare f with WREG, Skip =\" },\r\n    { label: \"CPFSGT\", detail: \"Compare f with WREG, Skip >\" },\r\n    { label: \"CPFSLT\", detail: \"Compare f with WREG, Skip <\" },\r\n    { label: \"DECF\", detail: \"Decrement f\" },\r\n    { label: \"DECFSZ\", detail: \"Decrement f, Skip if 0\" },\r\n    { label: \"DCFSNZ\", detail: \"Decrement f, Skip if Not 0\" },\r\n    { label: \"INCF\", detail: \"Increment f\" },\r\n    { label: \"INCFSZ\", detail: \"Increment f, Skip if 0\" },\r\n    { label: \"INFSNZ\", detail: \"Increment f, Skip if Not 0\" },\r\n    { label: \"IORWF\", detail: \"Inclusive OR WREG with f\" },\r\n    { label: \"MOVF\", detail: \"Move f\" },\r\n    { label: \"MOVFF\", detail: \"Move fs (source) to 1st word fd (destination) 2nd word\" },\r\n    { label: \"MOVWF\", detail: \"Move WREG to f\" },\r\n    { label: \"MULWF\", detail: \"Multiply WREG with f\" },\r\n    { label: \"NEGF\", detail: \"Negate f\" },\r\n    { label: \"RLCF\", detail: \"Rotate Left f through Carry\" },\r\n    { label: \"RLNCF\", detail: \"Rotate Left f (No Carry)\" },\r\n    { label: \"RRCF\", detail: \"Rotate Right f through Carry\" },\r\n    { label: \"RRNCF\", detail: \"Rotate Right f (No Carry)\" },\r\n    { label: \"SETF\", detail: \"Set f\" },\r\n    { label: \"SUBFWB\", detail: \"Subtract f from WREG with Borrow\" },\r\n    { label: \"SUBWF\", detail: \"Subtract WREG from f\" },\r\n    { label: \"SUBWFB\", detail: \"Subtract WREG from f with Borrow\" },\r\n    { label: \"SWAPF\", detail: \"Swap Nibbles in f\" },\r\n    { label: \"TSTFSZ\", detail: \"Test f, Skip if 0\" },\r\n    { label: \"XORWF\", detail: \"Exclusive OR WREG with f\" },\r\n    { label: \"BCF\", detail: \"Bit Clear f\" },\r\n    { label: \"BSF\", detail: \"Bit Set f\" },\r\n    { label: \"BTFSC\", detail: \"Bit Test f, Skip if Clear\" },\r\n    { label: \"BTFSS\", detail: \"Bit Test f, Skip if Set\" },\r\n    { label: \"BTG\", detail: \"Bit Toggle f\" },\r\n    { label: \"BC\", detail: \"Branch if Carry\" },\r\n    { label: \"BN\", detail: \"Branch if Negative\" },\r\n    { label: \"BNC\", detail: \"Branch if Not Carry\" },\r\n    { label: \"BNN\", detail: \"Branch if Not Negative\" },\r\n    { label: \"BNOV\", detail: \"Branch if Not Overflow\" },\r\n    { label: \"BNZ\", detail: \"Branch if Not Zero\" },\r\n    { label: \"BOV\", detail: \"Branch if Overflow\" },\r\n    { label: \"BRA\", detail: \"Branch Unconditionally\" },\r\n    { label: \"BZ\", detail: \"Branch if Zero\" },\r\n    { label: \"CALL\", detail: \"Call Subroutine 1st word 2nd word\" },\r\n    { label: \"CLRWDT\", detail: \"Clear Watchdog Timer\" },\r\n    { label: \"DAW\", detail: \"Decimal Adjust WREG\" },\r\n    { label: \"GOTO\", detail: \"Go to Address 1st word 2nd word\" },\r\n    { label: \"NOP\", detail: \"No Operation\" },\r\n    { label: \"POP\", detail: \"Pop Top of Return Stack (TOS)\" },\r\n    { label: \"PUSH\", detail: \"Push Top of Return Stack (TOS)\" },\r\n    { label: \"RCALL\", detail: \"Relative Call\" },\r\n    { label: \"RESET\", detail: \"Software Device Reset\" },\r\n    { label: \"RETFIE\", detail: \"Return from Interrupt Enable\" },\r\n    { label: \"RETLW\", detail: \"Return with Literal in WREG\" },\r\n    { label: \"RETURN\", detail: \"Return from Subroutine\" },\r\n    { label: \"SLEEP\", detail: \"Go into Standby mode\" },\r\n    { label: \"ADDLW\", detail: \"Add Literal and WREG\" },\r\n    { label: \"ANDLW\", detail: \"AND Literal with WREG\" },\r\n    { label: \"IORLW\", detail: \"Inclusive OR Literal with WREG\" },\r\n    { label: \"LFSR\", detail: \"Move Literal (12-bit)2nd word to FSR(f) 1st word\" },\r\n    { label: \"MOVLB\", detail: \"Move Literal to BSR<3:0>\" },\r\n    { label: \"MOVLW\", detail: \"Move Literal to WREG\" },\r\n    { label: \"MULLW\", detail: \"Multiply Literal with WREG\" },\r\n    { label: \"SUBLW\", detail: \"Subtract WREG from Literal\" },\r\n    { label: \"XORLW\", detail: \"Exclusive OR Literal with WREG\" },\r\n    { label: \"TBLRD*\", detail: \"Table Read\" },\r\n    { label: \"TBLRD*+\", detail: \"Table Read with Post-Increment\" },\r\n    { label: \"TBLRD*-\", detail: \"Table Read with Post-Decrement\" },\r\n    { label: \"TBLRD+*\", detail: \"Table Read with Pre-Increment\" },\r\n    { label: \"TBLWT*\", detail: \"Table Write\" },\r\n    { label: \"TBLWT*+\", detail: \"Table Write with Post-Increment\" },\r\n    { label: \"TBLWT*-\", detail: \"Table Write with Post-Decrement\" },\r\n    { label: \"TBLWT+*\", detail: \"Table Write with Pre-Increment\" },\r\n]\r\n\r\nexport const PIC_INSTRUCTIONS_COMPLETIONS = PIC_INSTRUCTIONS.map(({ label, detail }) => {\r\n    const ci = new CompletionItem(label, CompletionItemKind.Snippet);\r\n    ci.detail = detail;\r\n    ci.insertText = label.startsWith(\"TBL\") ? label : label + \" \".repeat(8 - label.length);\r\n\r\n    const labelKey = label.startsWith(\"TBL\") ? label.slice(0, 5) : label;\r\n    const instructionDetail = INSTRUCTION_DETAILS_MAP.get(labelKey as InstructionKey);\r\n    if (instructionDetail) ci.documentation = new MarkdownString(instructionDetail);\r\n\r\n    return ci;\r\n})\r\n", "import { InstructionKey } from \"./type\";\r\n\r\n\r\nexport const INSTRUCTION_DETAILS: Array<{ name: InstructionKey, content: string }> = [\r\n    {\r\n        name: \"ADDLW\",\r\n        content: `#### ADDLW\r\nADD Literal to W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`ADDLW k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 255 |\r\n| Operation:       | (W) + k \u2192 W |\r\n| Status Affected: | N, OV, C, DC, Z |\r\n| Encoding:        | 0000 1111 kkkk kkkk |\r\n\r\n**Description:** The contents of W are added to the 8-bit literal 'k' and the result is placed in W.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' | Process Data | Write to W |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nADDLW 15h\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = 10h  \r\nAfter Instruction  \r\nW = 25h`\r\n    },\r\n    {\r\n        name: \"ADDWF\",\r\n        content: `#### ADDWF\r\nADD W and f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`ADDWF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (W) + (f) \u2192 dest |\r\n| Status Affected: | N, OV, C, DC, Z |\r\n| Encoding:        | 0001 11da ffff ffff |\r\n\r\n**Description:** Add the contents of the W register to register 'f'. If 'd' is '0', the result is stored in the W register. If 'd' is '1', the result is stored back in register 'f' (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nADDWF REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = 17h  \r\nREG = 0C2h  \r\nAfter Instruction  \r\nW = D9h  \r\nREG = 0C2h`\r\n    },\r\n    {\r\n        name: \"ADDWFC\",\r\n        content: `#### ADDWFC\r\nADD W and Carry bit to f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`ADDWFC f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (W) + (f) + (C) \u2192 dest |\r\n| Status Affected: | N, OV, C, DC, Z |\r\n| Encoding:        | 0010 00da ffff ffff |\r\n\r\n**Description:** Add W, the Carry flag and data memory location \"f\". If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed in data memory location \"f\". If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nADDWFC REG, 0, 1\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nCarry bit = 1  \r\nREG = 02h  \r\nW = 40h  \r\nAfter Instruction  \r\nCarry bit = 0  \r\nREG = 02h  \r\nW = 50h`\r\n    },\r\n    {\r\n        name: \"ANDLW\",\r\n        content: `#### ANDLW\r\nAND Literal with W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`ANDLW k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 255 |\r\n| Operation:       | (W) .AND. k \u2192 W |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0000 1011 kkkk kkkk |\r\n\r\n**Description:** The contents of W are ANDed with the 8-bit literal 'k'. The result is placed in W.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' | Process Data | Write to W |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nANDLW 5Fh\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = A3h  \r\nAfter Instruction  \r\nW = 03h`\r\n    },\r\n    {\r\n        name: \"ANDWF\",\r\n        content: `#### ANDWF\r\nAND W with f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`ANDWF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (W) .AND. (f) \u2192 dest |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0001 01da ffff ffff |\r\n\r\n**Description:** The contents of W are ANDed with register \"f\". If 'd' is '0', the result is stored in W. If 'd' is '1', the result is stored back in register \"f\" (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nANDWF REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = 17h  \r\nREG = C2h  \r\nAfter Instruction  \r\nW = 02h  \r\nREG = C2h`\r\n    },\r\n    {\r\n        name: \"BC\",\r\n        content: `#### BC\r\nBranch if Carry\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BC n\\` |\r\n| Operands:        | -128 \u2264 n \u2264 127 |\r\n| Operation:       | if Carry bit is '1', (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1110 0010 nnnn nnnn |\r\n\r\n**Description:** If the Carry bit is '1', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n\r\n**Q Cycle Activity:**\r\nIf Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\nIf No Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BC 5\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf Carry = 1; PC = address (HERE + 12)  \r\nIf Carry = 0; PC = address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"BCF\",\r\n        content: `#### BCF\r\nBit Clear f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BCF f, b {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1] |\r\n| Operation:       | 0 \u2192 f<b> |\r\n| Status Affected: | None |\r\n| Encoding:        | 1001 bbba ffff ffff |\r\n\r\n**Description:** Bit 'b' in register 'f' is cleared. If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write register 'f' |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nBCF FLAG_REG, 7, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nFLAG_REG = C7h  \r\nAfter Instruction  \r\nFLAG_REG = 47h`\r\n    },\r\n    {\r\n        name: \"BN\",\r\n        content: `#### BN\r\nBranch if Negative\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BN n\\` |\r\n| Operands:        | -128 \u2264 n \u2264 127 |\r\n| Operation:       | If Negative bit is '1', (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1110 0110 nnnn nnnn |\r\n\r\n**Description:** If the Negative bit is '1', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n\r\n**Q Cycle Activity:**\r\nIf Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\nIf No Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BN Jump\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf Negative = 1; PC = address (Jump)  \r\nIf Negative = 0; PC = address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"BNC\",\r\n        content: `#### BNC\r\nBranch if Not Carry\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BNC n\\` |\r\n| Operands:        | -128 \u2264 n \u2264 127 |\r\n| Operation:       | If Carry bit is '0', (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1110 0011 nnnn nnnn |\r\n\r\n**Description:** If the Carry bit is '0', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n\r\n**Q Cycle Activity:**\r\nIf Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\nIf No Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BNC Jump\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf Carry = 0; PC = address (Jump)  \r\nIf Carry = 1; PC = address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"BNN\",\r\n        content: `#### BNN\r\nBranch if Not Negative\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BNN n\\` |\r\n| Operands:        | -128 \u2264 n \u2264 127 |\r\n| Operation:       | If Negative bit is '0', (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1110 0111 nnnn nnnn |\r\n\r\n**Description:** If the Negative bit is '0', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n\r\n**Q Cycle Activity:**\r\nIf Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\nIf No Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BNN Jump\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf Negative = 0; PC = address (Jump)  \r\nIf Negative = 1; PC = address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"BNOV\",\r\n        content: `#### BNOV\r\nBranch if Not Overflow\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BNOV n\\` |\r\n| Operands:        | -128 \u2264 n \u2264 127 |\r\n| Operation:       | if Overflow bit is '0', (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1110 0101 nnnn nnnn |\r\n\r\n**Description:** If the Overflow bit is '0', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n\r\n**Q Cycle Activity:**\r\nIf Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\nIf No Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BNOV Jump\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf Overflow = 0; PC = address (Jump)  \r\nIf Overflow = 1; PC = address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"BNZ\",\r\n        content: `#### BNZ\r\nBranch if Not Zero\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BNZ n\\` |\r\n| Operands:        | -128 \u2264 n \u2264 127 |\r\n| Operation:       | if Zero bit is '0', (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1110 0001 nnnn nnnn |\r\n\r\n**Description:** If the Zero bit is '0', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n\r\n**Q Cycle Activity:**\r\nIf Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\nIf No Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BNZ Jump\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf Zero = 0; PC = address (Jump)  \r\nIf Zero = 1; PC = address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"BRA\",\r\n        content: `#### BRA\r\nUnconditional Branch\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BRA n\\` |\r\n| Operands:        | -1024 \u2264 n \u2264 1023 |\r\n| Operation:       | (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1101 0nnn nnnn nnnn |\r\n\r\n**Description:** Add the 2's complement number, '2n', to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BRA Jump\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nPC = address (Jump)`\r\n    },\r\n    {\r\n        name: \"BSF\",\r\n        content: `#### BSF\r\nBit Set f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BSF f, b {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1] |\r\n| Operation:       | 1 \u2192 f<b> |\r\n| Status Affected: | None |\r\n| Encoding:        | 1000 bbba ffff ffff |\r\n\r\n**Description:** Bit 'b' in register 'f' is set. If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write register 'f' |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nBSF FLAG_REG, 7, 1\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nFLAG_REG = 0Ah  \r\nAfter Instruction  \r\nFLAG_REG = 8Ah`\r\n    },\r\n    {\r\n        name: \"BTFSC\",\r\n        content: `#### BTFSC\r\nBit Test File, Skip if Clear\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BTFSC f, b {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1] |\r\n| Operation:       | skip if (f<b>) = 0 |\r\n| Status Affected: | None |\r\n| Encoding:        | 1011 bbba ffff ffff |\r\n\r\n**Description:** If bit 'b' in register 'f' is '0', then the next instruction is skipped. If bit 'b' is '0', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | No operation |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BTFSC FLAG, 1  \r\nFALSE :  \r\nTRUE :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf FLAG<1> = 0; PC = address (TRUE)  \r\nIf FLAG<1> = 1; PC = address (FALSE)`\r\n    },\r\n    {\r\n        name: \"BTFSS\",\r\n        content: `#### BTFSS\r\nBit Test File, Skip if Set\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BTFSS f, b {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1] |\r\n| Operation:       | skip if (f<b>) = 1 |\r\n| Status Affected: | None |\r\n| Encoding:        | 1010 bbba ffff ffff |\r\n\r\n**Description:** If bit 'b' in register 'f' is '1', then the next instruction is skipped. If bit 'b' is '1', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | No operation |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BTFSS FLAG, 1  \r\nFALSE :  \r\nTRUE :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf FLAG<1> = 1; PC = address (FALSE)  \r\nIf FLAG<1> = 0; PC = address (TRUE)`\r\n    },\r\n    {\r\n        name: \"BTG\",\r\n        content: `#### BTG\r\nBit Toggle f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BTG f, b {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1] |\r\n| Operation:       | (f<b>) \u2192 f<b> |\r\n| Status Affected: | None |\r\n| Encoding:        | 0111 bbba ffff ffff |\r\n\r\n**Description:** Bit 'b' in data memory location 'f' is inverted. If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write register 'f' |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nBTG PORTC, 4, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction:  \r\nPORTC = 0111 0101 [75h]  \r\nAfter Instruction:  \r\nPORTC = 0110 0101 [65h]`\r\n    },\r\n    {\r\n        name: \"BOV\",\r\n        content: `#### BOV\r\nBranch if Overflow\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BOV n\\` |\r\n| Operands:        | -128 \u2264 n \u2264 127 |\r\n| Operation:       | If Overflow bit is '1', (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1110 0100 nnnn nnnn |\r\n\r\n**Description:** If the Overflow bit is '1', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n\r\n**Q Cycle Activity:**\r\nIf Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\nIf No Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BOV Jump\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf Overflow = 1; PC = address (Jump)  \r\nIf Overflow = 0; PC = address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"BZ\",\r\n        content: `#### BZ\r\nBranch if Zero\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`BZ n\\` |\r\n| Operands:        | -128 \u2264 n \u2264 127 |\r\n| Operation:       | if Zero bit is '1', (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1110 0000 nnnn nnnn |\r\n\r\n**Description:** If the Zero bit is '1', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n\r\n**Q Cycle Activity:**\r\nIf Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\nIf No Jump:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) BZ Jump\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nIf Zero = 1; PC = address (Jump)  \r\nIf Zero = 0; PC = address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"CALL\",\r\n        content: `#### CALL\r\nSubroutine Call\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`CALL k {,s}\\` |\r\n| Operands:        | 0 \u2264 k \u2264 1048575 s \u2208 [0,1] |\r\n| Operation:       | (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>; if s = 1, (W) \u2192 WS, (STATUS) \u2192 STATUSS, (BSR) \u2192 BSRS |\r\n| Status Affected: | None |\r\n| Encoding:        | 1st word: 1110 1111 110s kkkk<br>2nd word: kkkk kkkk kkkk kkkk |\r\n\r\n**Description:** Subroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1, the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0, no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>. CALL is a two-cycle instruction.\r\n\r\n**Words:** 2  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k'<7:0>, PUSH PC to stack | Read literal 'k'<19:8>, Write to PC | No operation |\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) CALL THERE, 1\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = address (HERE)  \r\nAfter Instruction  \r\nPC = address (THERE)  \r\nTOS = address (HERE + 4)  \r\nWS = W  \r\nBSRS = BSR  \r\nSTATUSS = STATUS`\r\n    },\r\n    {\r\n        name: \"CLRF\",\r\n        content: `#### CLRF\r\nClear f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`CLRF f {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 a \u2208 [0,1] |\r\n| Operation:       | 000h \u2192 f, 1 \u2192 Z |\r\n| Status Affected: | Z |\r\n| Encoding:        | 0110 101a ffff ffff |\r\n\r\n**Description:** Clears the contents of the specified register. If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write register 'f' |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nCLRF FLAG_REG, 1\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nFLAG_REG = 5Ah  \r\nAfter Instruction  \r\nFLAG_REG = 00h`\r\n    },\r\n    {\r\n        name: \"CLRWDT\",\r\n        content: `#### CLRWDT\r\nClear Watchdog Timer\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`CLRWDT\\` |\r\n| Operands:        | None |\r\n| Operation:       | 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO, 1 \u2192 PD |\r\n| Status Affected: | TO, PD |\r\n| Encoding:        | 0000 0000 0000 0100 |\r\n\r\n**Description:** CLRWDT instruction resets the Watchdog Timer. It also resets the post-scaler of the WDT. Status bits, TO and PD, are set.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | No operation | Process Data | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nCLRWDT\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nWDT Counter = ?  \r\nAfter Instruction  \r\nWDT Counter = 00h  \r\nWDT Postscaler = 0  \r\nTO = 1  \r\nPD = 1`\r\n    },\r\n    {\r\n        name: \"COMF\",\r\n        content: `#### COMF\r\nComplement f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`COMF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f) \u2192 dest |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0001 11da ffff ffff |\r\n\r\n**Description:** The contents of register \"f\" are complemented. If 'd' is '0', the result is stored in W. If 'd' is '1', the result is stored back in register \"f\" (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nCOMF REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 13h  \r\nAfter Instruction  \r\nREG = 13h  \r\nW = ECh`\r\n    },\r\n    {\r\n        name: \"CPFSEQ\",\r\n        content: `#### CPFSEQ\r\nCompare f with W, Skip if f = W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`CPFSEQ f {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 a \u2208 [0,1] |\r\n| Operation:       | (f) - (W), skip if (f) = (W) (unsigned comparison) |\r\n| Status Affected: | None |\r\n| Encoding:        | 0110 001a ffff ffff |\r\n\r\n**Description:** Compares the contents of data memory location \"f\" to the contents of W by performing an unsigned subtraction. If \"f = W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | No operation |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) CPFSEQ REG, 0  \r\nNEQUAL :  \r\nEQUAL :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC Address = HERE  \r\nW = ?  \r\nREG = ?  \r\nAfter Instruction  \r\nIf REG = W; PC = Address (EQUAL)  \r\nIf REG \u2260 W; PC = Address (NEQUAL)`\r\n    },\r\n    {\r\n        name: \"CPFSGT\",\r\n        content: `#### CPFSGT\r\nCompare f with W, Skip if f > W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`CPFSGT f {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 a \u2208 [0,1] |\r\n| Operation:       | (f) - (W), skip if (f) > (W) (unsigned comparison) |\r\n| Status Affected: | None |\r\n| Encoding:        | 0110 010a ffff ffff |\r\n\r\n**Description:** Compares the contents of data memory location 'f' to the contents of the W by performing an unsigned subtraction. If the contents of 'f' are greater than the contents of WREG, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | No operation |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) CPFSGT REG, 0  \r\nNOGREATER :  \r\nGREATER :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = Address (HERE)  \r\nW = ?  \r\nAfter Instruction  \r\nIf REG > W; PC = Address (GREATER)  \r\nIf REG \u2264 W; PC = Address (NOGREATER)`\r\n    },\r\n    {\r\n        name: \"CPFSLT\",\r\n        content: `#### CPFSLT\r\nCompare f with W, Skip if f < W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`CPFSLT f {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 a \u2208 [0,1] |\r\n| Operation:       | (f) - (W), skip if (f) < (W) (unsigned comparison) |\r\n| Status Affected: | None |\r\n| Encoding:        | 0110 000a ffff ffff |\r\n\r\n**Description:** Compares the contents of data memory location 'f' to the contents of W by performing an unsigned subtraction. If the contents of 'f' are less than the contents of W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | No operation |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) CPFSLT REG, 1  \r\nNLESS :  \r\nLESS :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = Address (HERE)  \r\nW = ?  \r\nAfter Instruction  \r\nIf REG < W; PC = Address (LESS)  \r\nIf REG \u2265 W; PC = Address (NLESS)`\r\n    },\r\n    {\r\n        name: \"DAW\",\r\n        content: `#### DAW\r\nDecimal Adjust W Register\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`DAW\\` |\r\n| Operands:        | None |\r\n| Operation:       | If [W<3:0> > 9] or [DC = 1] then, (W<3:0>) + 6 \u2192 W<3:0>; else, (W<3:0>) \u2192 W<3:0>; |\r\n| Status Affected: | C |\r\n| Encoding:        | 0000 0000 0000 0111 |\r\n\r\n**Description:** DAW adjusts the 8-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register W | Process Data | Write W |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nDAW\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = 59h  \r\nAfter Instruction  \r\nW = 59h`\r\n    },\r\n    {\r\n        name: \"DECF\",\r\n        content: `#### DECF\r\nDecrement f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`DECF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f) - 1 \u2192 dest |\r\n| Status Affected: | C, DC, N, OV, Z |\r\n| Encoding:        | 0000 01da ffff ffff |\r\n\r\n**Description:** Decrement register 'f'. If 'd' is '0', the result is stored in W. If 'd' is '1', the result is stored back in register 'f' (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nDECF CNT, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nCNT = 01h  \r\nZ = 0  \r\nAfter Instruction  \r\nCNT = 00h  \r\nZ = 1`\r\n    },\r\n    {\r\n        name: \"DECFSZ\",\r\n        content: `#### DECFSZ\r\nDecrement f, Skip if 0\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`DECFSZ f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f) - 1 \u2192 dest, skip if result = 0 |\r\n| Status Affected: | None |\r\n| Encoding:        | 0010 11da ffff ffff |\r\n\r\n**Description:** The contents of register \"f\" are decremented. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed back in register \"f\" (default). If the result is '0', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) DECFSZ CNT, 1, 0  \r\nGOTO LOOP  \r\nCONTINUE :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = Address (HERE)  \r\nAfter Instruction  \r\nCNT = CNT - 1  \r\nif CNT = 0: PC = Address (CONTINUE)  \r\nif CNT \u2260 0: PC = Address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"DCFSNZ\",\r\n        content: `#### DCFSNZ\r\nDecrement f, Skip if Not 0\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`DCFSNZ f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f) - 1 \u2192 dest, skip if result \u2260 0 |\r\n| Status Affected: | None |\r\n| Encoding:        | 0100 11da ffff ffff |\r\n\r\n**Description:** The contents of register \"f\" are decremented. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed back in register \"f\" (default). If the result is not '0', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) DCFSNZ TEMP, 1, 0  \r\nZERO :  \r\nNZERO :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nTEMP = ?  \r\nAfter Instruction  \r\nTEMP = TEMP - 1,  \r\nif TEMP = 0: PC = Address (ZERO)  \r\nif TEMP \u2260 0: PC = Address (NZERO)`\r\n    },\r\n    {\r\n        name: \"GOTO\",\r\n        content: `#### GOTO\r\nUnconditional Branch\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`GOTO k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 1048575 |\r\n| Operation:       | k \u2192 PC<20:1> |\r\n| Status Affected: | None |\r\n| Encoding:        | 1st word: 1110 1111 kkkk kkkk<br>2nd word: 1111 kkkk kkkk kkkk |\r\n\r\n**Description:** GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.\r\n\r\n**Words:** 2  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' <7:0> | No operation | Read literal 'k' <19:8>, Write to PC |\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nGOTO THERE\r\n\\`\\`\\`\r\n\r\nAfter Instruction  \r\nPC = Address (THERE)`\r\n    },\r\n    {\r\n        name: \"INCF\",\r\n        content: `#### INCF\r\nIncrement f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`INCF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f) + 1 \u2192 dest |\r\n| Status Affected: | C, DC, N, OV, Z |\r\n| Encoding:        | 0010 10da ffff ffff |\r\n\r\n**Description:** The contents of register 'f' are incremented. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed back in register 'f' (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nINCF CNT, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nCNT = FFh  \r\nZ = 0  \r\nC = ?  \r\nDC = ?  \r\nAfter Instruction  \r\nCNT = 00h  \r\nZ = 1  \r\nC = 1  \r\nDC = 1`\r\n    },\r\n    {\r\n        name: \"INCFSZ\",\r\n        content: `#### INCFSZ\r\nIncrement f, Skip if 0\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`INCFSZ f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f) + 1 \u2192 dest, skip if result = 0 |\r\n| Status Affected: | None |\r\n| Encoding:        | 0011 11da ffff ffff |\r\n\r\n**Description:** The contents of register \"f\" are incremented. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed back in register \"f\" (default). If the result is '0', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) INCFSZ CNT, 1, 0  \r\nNZERO :  \r\nZERO :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = Address (HERE)  \r\nAfter Instruction  \r\nCNT = CNT + 1  \r\nIf CNT = 0; PC = Address (ZERO)  \r\nIf CNT \u2260 0; PC = Address (NZERO)`\r\n    },\r\n    {\r\n        name: \"INFSNZ\",\r\n        content: `#### INFSNZ\r\nIncrement f, Skip if Not 0\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`INFSNZ f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f) + 1 \u2192 dest, skip if result \u2260 0 |\r\n| Status Affected: | None |\r\n| Encoding:        | 0100 10da ffff ffff |\r\n\r\n**Description:** The contents of register \"f\" are incremented. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed back in register \"f\" (default). If the result is not '0', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) INFSNZ REG, 1, 0  \r\nZERO :  \r\nNZERO :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = Address (HERE)  \r\nAfter Instruction  \r\nREG = REG + 1  \r\nIf REG = 0; PC = Address (ZERO)  \r\nIf REG \u2260 0; PC = Address (NZERO)`\r\n    },\r\n    {\r\n        name: \"IORLW\",\r\n        content: `#### IORLW\r\nInclusive OR Literal with W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`IORLW k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 255 |\r\n| Operation:       | (W) .OR. k \u2192 W |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0000 1001 kkkk kkkk |\r\n\r\n**Description:** The contents of W are ORed with the 8-bit literal 'k'. The result is placed in W.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' | Process Data | Write to W |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nIORLW 35h\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = 9Ah  \r\nAfter Instruction  \r\nW = BFh`\r\n    },\r\n    {\r\n        name: \"IORWF\",\r\n        content: `#### IORWF\r\nInclusive OR W with f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`IORWF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (W) .OR. (f) \u2192 dest |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0001 00da ffff ffff |\r\n\r\n**Description:** Inclusive OR W with register 'f'. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed back in register 'f' (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nIORWF RESULT, 0, 1\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nRESULT = 13h  \r\nW = 91h  \r\nAfter Instruction  \r\nRESULT = 13h  \r\nW = 93h`\r\n    },\r\n    {\r\n        name: \"LFSR\",\r\n        content: `#### LFSR\r\nLoad FSR\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`LFSR f, k\\` |\r\n| Operands:        | 0 \u2264 f \u2264 2 0 \u2264 k \u2264 4095 |\r\n| Operation:       | k \u2192 FSRf |\r\n| Status Affected: | None |\r\n| Encoding:        | 1st word: 1110 1110 00ff kkkk<br>2nd word: 1111 0000 kkkk kkkk |\r\n\r\n**Description:** The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.\r\n\r\n**Words:** 2  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' MSB | Process Data | Write literal 'k' MSB to FSRfH |\r\n| Decode | Read literal 'k' LSB | Process Data | Write literal 'k' to FSRfL |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nLFSR 2, 3ABh\r\n\\`\\`\\`\r\n\r\nAfter Instruction  \r\nFSR2H = 03h  \r\nFSR2L = ABh`\r\n    },\r\n    {\r\n        name: \"MOVF\",\r\n        content: `#### MOVF\r\nMove f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`MOVF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | f \u2192 dest |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0101 00da ffff ffff |\r\n\r\n**Description:** The contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed back in register 'f' (default). Location 'f' can be anywhere in the 256-byte bank.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write W |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nMOVF REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 22h  \r\nW = FFh  \r\nAfter Instruction  \r\nREG = 22h  \r\nW = 22h`\r\n    },\r\n    {\r\n        name: \"MOVFF\",\r\n        content: `#### MOVFF\r\nMove f to f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`MOVFF fs, fd\\` |\r\n| Operands:        | 0 \u2264 fs \u2264 4095 0 \u2264 fd \u2264 4095 |\r\n| Operation:       | (fs) \u2192 fd |\r\n| Status Affected: | None |\r\n| Encoding:        | 1st word (source): 1100 ffff ffff ffff<br>2nd word (destin.): 1111 ffff ffff ffff |\r\n\r\n**Description:** The contents of source register 'fs' are moved to destination register 'fd'. Location of source 'fs' can be anywhere in the 4096-byte data space (000h to FFFh) and location of destination 'fd' can also be anywhere from 000h to FFFh. Either source or destination can be W (a useful special situation). MOVFF is particularly useful for transferring a data memory location to a peripheral register (such as the transmit buffer or an I/O port). The MOVFF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\r\n\r\n**Words:** 2  \r\n**Cycles:** 2 (3)  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" (src) | Process Data | No operation |\r\n| Decode | No operation No dummy read | No operation | Write register \"f\" (dest) |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nMOVFF REG1, REG2\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nREG1 = 33h\r\nREG2 = 11h\r\nAfter Instruction\r\nREG1 = 33h\r\nREG2 = 33h`\r\n    },\r\n    {\r\n        name: \"MOVLB\",\r\n        content: `#### MOVLB\r\nMove Literal to Low Nibble in BSR\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`MOVLB k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 255 |\r\n| Operation:       | k \u2192 BSR |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 0001 kkkk kkkk |\r\n\r\n**Description:** The 8-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains '0', regardless of the value of k<7:4>.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' | Process Data | Write literal 'k' to BSR |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nMOVLB 5\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nBSR Register = 02h\r\nAfter Instruction\r\nBSR Register = 05h`\r\n    },\r\n    {\r\n        name: \"MOVLW\",\r\n        content: `#### MOVLW\r\nMove Literal to W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`MOVLW k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 255 |\r\n| Operation:       | k \u2192 W |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 1110 kkkk kkkk |\r\n\r\n**Description:** The 8-bit literal 'k' is loaded into W.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' | Process Data | Write to W |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nMOVLW 5Ah\r\n\\`\\`\\`\r\n\r\nAfter Instruction\r\nW = 5Ah`\r\n    },\r\n    {\r\n        name: \"MOVWF\",\r\n        content: `#### MOVWF\r\nMove W to f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`MOVWF f {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 a \u2208 [0,1] |\r\n| Operation:       | (W) \u2192 f |\r\n| Status Affected: | None |\r\n| Encoding:        | 0110 111a ffff ffff |\r\n\r\n**Description:** Move data from W to register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write register 'f' |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nMOVWF REG, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nW = 4Fh\r\nREG = FFh\r\nAfter Instruction\r\nW = 4Fh\r\nREG = 4Fh`\r\n    },\r\n    {\r\n        name: \"MULLW\",\r\n        content: `#### MULLW\r\nMultiply Literal with W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`MULLW k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 255 |\r\n| Operation:       | (W) x k \u2192 PRODH:PRODL |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 1101 kkkk kkkk |\r\n\r\n**Description:** An unsigned multiplication is carried out between the contents of W and the 8-bit literal 'k'. The 16-bit result is placed in the PRODH:PRODL register pair. PRODH contains the high byte. W is unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A zero result is possible but not detected.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' | Process Data | Write registers PRODH: PRODL |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nMULLW 0C4h\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nW = E2h\r\nPRODH = ?\r\nPRODL = ?\r\nAfter Instruction\r\nW = E2h\r\nPRODH = ADh\r\nPRODL = 08h`\r\n    },\r\n    {\r\n        name: \"MULWF\",\r\n        content: `#### MULWF\r\nMultiply W with f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`MULWF f {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 a \u2208 [0,1] |\r\n| Operation:       | (W) x (f) \u2192 PRODH:PRODL |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 001a ffff ffff |\r\n\r\n**Description:** An unsigned multiplication is carried out between the contents of W and the register file location 'f'. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both W and 'f' are unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A zero result is possible but not detected.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write registers PRODH: PRODL |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nMULWF REG, 1\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nW = C4h\r\nREG = B5h\r\nPRODH = ?\r\nPRODL = ?\r\nAfter Instruction\r\nW = C4h\r\nREG = B5h\r\nPRODH = 8Ah\r\nPRODL = 94h`\r\n    },\r\n    {\r\n        name: \"NEGF\",\r\n        content: `#### NEGF\r\nNegate f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`NEGF f {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 a \u2208 [0,1] |\r\n| Operation:       | (f) + 1 \u2192 f |\r\n| Status Affected: | N, OV, C, DC, Z |\r\n| Encoding:        | 0110 110a ffff ffff |\r\n\r\n**Description:** Location \"f\" is negated using two's complement. The result is placed in the data memory location \"f\". If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write register 'f' |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nNEGF REG, 1\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nREG = 0011 1010 [3Ah]\r\nAfter Instruction\r\nREG = 1100 0110 [C6h]`\r\n    },\r\n    {\r\n        name: \"NOP\",\r\n        content: `#### NOP\r\nNo Operation\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`NOP\\` |\r\n| Operands:        | None |\r\n| Operation:       | No operation |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 0000 0000 0000 |\r\n\r\n**Description:** No operation.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | No operation | No operation | No operation |\r\n\r\n**Example:**\r\nNone.`\r\n    },\r\n    {\r\n        name: \"POP\",\r\n        content: `#### POP\r\nPop Top of Return Stack\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`POP\\` |\r\n| Operands:        | None |\r\n| Operation:       | (TOS) \u2192 bit bucket |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 0000 0000 0110 |\r\n\r\n**Description:** The TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | No operation | POP TOS value | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nPOP\r\nGOTO NEW\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nTOS = 0031A2h\r\nStack (1 level down) = 014332h\r\nAfter Instruction\r\nTOS = 014332h\r\nPC = NEW`\r\n    },\r\n    {\r\n        name: \"PUSH\",\r\n        content: `#### PUSH\r\nPush Top of Return Stack\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`PUSH\\` |\r\n| Operands:        | None |\r\n| Operation:       | (PC + 2) \u2192 TOS |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 0000 0000 0101 |\r\n\r\n**Description:** The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | PUSH PC + 2 onto return stack | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nPUSH\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nTOS = 345Ah\r\nPC = 0124h\r\nAfter Instruction\r\nPC = 0126h\r\nTOS = 0126h\r\nStack (1 level down) = 345Ah`\r\n    },\r\n    {\r\n        name: \"RCALL\",\r\n        content: `#### RCALL\r\nRelative Call\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`RCALL n\\` |\r\n| Operands:        | -1024 \u2264 n \u2264 1023 |\r\n| Operation:       | (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC |\r\n| Status Affected: | None |\r\n| Encoding:        | 1101 1nnn nnnn nnnn |\r\n\r\n**Description:** Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.\r\n\r\n**Words:** 1  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'n' | Process Data | Write to PC |\r\n| PUSH PC to stack | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) RCALL Jump\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nPC = Address (HERE)\r\nAfter Instruction\r\nPC = Address (Jump)\r\nTOS = Address (HERE + 2)`\r\n    },\r\n    {\r\n        name: \"RESET\",\r\n        content: `#### RESET\r\nReset\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`RESET\\` |\r\n| Operands:        | None |\r\n| Operation:       | Reset all registers and flags that are affected by a MCLR Reset. |\r\n| Status Affected: | All |\r\n| Encoding:        | 0000 0000 1111 1111 |\r\n\r\n**Description:** This instruction provides a way to execute a MCLR Reset in software.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Start Reset | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nRESET\r\n\\`\\`\\`\r\n\r\nAfter Instruction\r\nRegisters = Reset Value\r\nFlags* = Reset Value`\r\n    },\r\n    {\r\n        name: \"RETFIE\",\r\n        content: `#### RETFIE\r\nReturn from Interrupt\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`RETFIE {s}\\` |\r\n| Operands:        | s \u2208 [0,1] |\r\n| Operation:       | (TOS) \u2192 PC, 1 \u2192 GIE/GIEH or PEIE/GIEL; if s = 1, (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR, PCLATU, PCLATH are unchanged |\r\n| Status Affected: | GIE/GIEH, PEIE/GIEL |\r\n| Encoding:        | 0000 0000 0001 000s |\r\n\r\n**Description:** Return from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If 's' = 1, the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0, no update of these registers occurs (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | No operation | No operation | POP PC from stack Set GIEH or GIEL |\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nRETFIE 1\r\n\\`\\`\\`\r\n\r\nAfter Interrupt\r\nPC = TOS\r\nW = WS\r\nBSR = BSRS\r\nSTATUS = STATUSS\r\nGIE/GIEH, PEIE/GIEL = 1`\r\n    },\r\n    {\r\n        name: \"RETLW\",\r\n        content: `#### RETLW\r\nReturn Literal to W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`RETLW k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 255 |\r\n| Operation:       | k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 1100 kkkk kkkk |\r\n\r\n**Description:** W is loaded with the 8-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.\r\n\r\n**Words:** 1  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' | Process Data | POP PC from stack, Write to W |\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nCALL TABLE ; W contains table offset value\r\n; W now has table value\r\n\\`\\`\\`\r\n\r\nTABLE\r\nADDWF PCL ; W = offset\r\nRETLW k0 ; Begin table\r\nRETLW k1 ;\r\nRETLW kn ; End of table\r\n\r\nBefore Instruction\r\nW = 07h\r\nAfter Instruction\r\nW = value of kn`\r\n    },\r\n    {\r\n        name: \"RETURN\",\r\n        content: `#### RETURN\r\nReturn from Subroutine\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`RETURN {s}\\` |\r\n| Operands:        | s \u2208 [0,1] |\r\n| Operation:       | (TOS) \u2192 PC; if s = 1, (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR, PCLATU, PCLATH are unchanged |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 0000 0001 001s |\r\n\r\n**Description:** Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's' = 1, the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0, no update of these registers occurs (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | No operation | Process Data | POP PC from stack |\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nRETURN\r\n\\`\\`\\`\r\n\r\nAfter Instruction:\r\nPC = TOS`\r\n    },\r\n    {\r\n        name: \"RLCF\",\r\n        content: `#### RLCF\r\nRotate Left f through Carry\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`RLCF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 C, (C) \u2192 dest<0> |\r\n| Status Affected: | C, N, Z |\r\n| Encoding:        | 0011 01da ffff ffff |\r\n\r\n**Description:** The contents of register \"f\" are rotated one bit to the left through the Carry flag. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is stored back in register \"f\" (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nRLCF REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nREG = 1110 0110\r\nC = 0\r\nAfter Instruction\r\nREG = 1110 0110\r\nW = 1100 1100\r\nC = 1`\r\n    },\r\n    {\r\n        name: \"RLNCF\",\r\n        content: `#### RLNCF\r\nRotate Left f (No Carry)\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`RLNCF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 dest<0> |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0100 01da ffff ffff |\r\n\r\n**Description:** The contents of register \"f\" are rotated one bit to the left. If \"d\" is \"0\", the result is placed in W. If \"d\" is \"1\", the result is stored back in register \"f\" (default). If \"a\" is \"0\", the Access Bank is selected. If \"a\" is \"1\", the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nRLNCF REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nREG = 1010 1011\r\nAfter Instruction\r\nREG = 0101 0111`\r\n    },\r\n    {\r\n        name: \"RRCF\",\r\n        content: `#### RRCF\r\nRotate Right f through Carry\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`RRCF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 C, (C) \u2192 dest<7> |\r\n| Status Affected: | C, N, Z |\r\n| Encoding:        | 0011 00da ffff ffff |\r\n\r\n**Description:** The contents of register \"f\" are rotated one bit to the right through the Carry flag. If \"d\" is \"0\", the result is placed in W. If \"d\" is \"1\", the result is placed back in register \"f\" (default). If \"a\" is \"0\", the Access Bank is selected. If \"a\" is \"1\", the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nRRCF REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction\r\nREG = 1110 0110\r\nC = 0\r\nAfter Instruction\r\nREG = 1110 0110\r\nW = 0111 0011\r\nC = 0`\r\n    },\r\n    {\r\n        name: \"RRNCF\",\r\n        content: `#### RRNCF\r\nRotate Right f (No Carry)\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`RRNCF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 dest<7> |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0100 00da ffff ffff |\r\n\r\n**Description:** The contents of register \"f\" are rotated one bit to the right. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed back in register \"f\" (default). If 'a' is '0', the Access Bank will be selected, overriding the BSR value. If 'a' is '1', then the bank will be selected as per the BSR value (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write to destination |\r\n\r\n**Example 1:**\r\n\\`\\`\\`\r\nRRNCF REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 1101 0111  \r\nAfter Instruction  \r\nREG = 1110 1011\r\n\r\n**Example 2:**\r\n\\`\\`\\`\r\nRRNCF REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = ?  \r\nREG = 1101 0111  \r\nAfter Instruction  \r\nW = 1110 1011  \r\nREG = 1101 0111`\r\n    },\r\n    {\r\n        name: \"SETF\",\r\n        content: `#### SETF\r\nSet f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`SETF f {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 a \u2208 [0,1] |\r\n| Operation:       | FFh \u2192 f |\r\n| Status Affected: | None |\r\n| Encoding:        | 0110 100a ffff ffff |\r\n\r\n**Description:** The contents of the specified register are set to FFh. If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register \"f\" | Process Data | Write register \"f\" |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nSETF REG, 1\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 5Ah  \r\nAfter Instruction  \r\nREG = FFh`\r\n    },\r\n    {\r\n        name: \"SLEEP\",\r\n        content: `#### SLEEP\r\nEnter Sleep mode\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`SLEEP\\` |\r\n| Operands:        | None |\r\n| Operation:       | 00h \u2192 WDT, 0 \u2192 WDT postscaler, 1 \u2192 TO, 0 \u2192 PD |\r\n| Status Affected: | TO, PD |\r\n| Encoding:        | 0000 0000 0000 0011 |\r\n\r\n**Description:** The Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its post-scaler are cleared. The processor is put into Sleep mode with the oscillator stopped.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | No operation | Process Data | Go to Sleep |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nSLEEP\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nTO = ?  \r\nPD = ?  \r\nAfter Instruction  \r\nTO = 1\u2191  \r\nPD = 0\r\n\r\n\u2191 If WDT causes wake-up, this bit is cleared.`\r\n    },\r\n    {\r\n        name: \"SUBFWB\",\r\n        content: `#### SUBFWB\r\nSubtract f from W with Borrow\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`SUBFWB f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (W) \u2013 (f) \u2013 (C) \u2192 dest |\r\n| Status Affected: | N, OV, C, DC, Z |\r\n| Encoding:        | 0101 01da ffff ffff |\r\n\r\n**Description:** Subtract register 'f' and Carry flag (borrow) from W (2's complement method). If 'd' is '0', the result is stored in W. If 'd' is '1', the result is stored in register 'f' (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write to destination |\r\n\r\n**Example 1:**\r\n\\`\\`\\`\r\nSUBFWB REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 3  \r\nW = 2  \r\nC = 1  \r\nAfter Instruction  \r\nREG = FF  \r\nW = 2  \r\nC = 0  \r\nZ = 0  \r\nN = 1 ; result is negative\r\n\r\n**Example 2:**\r\n\\`\\`\\`\r\nSUBFWB REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 2  \r\nW = 5  \r\nC = 1  \r\nAfter Instruction  \r\nREG = 2  \r\nW = 3  \r\nC = 1  \r\nZ = 0  \r\nN = 0 ; result is positive\r\n\r\n**Example 3:**\r\n\\`\\`\\`\r\nSUBFWB REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 1  \r\nW = 2  \r\nC = 0  \r\nAfter Instruction  \r\nREG = 0  \r\nW = 2  \r\nC = 1  \r\nZ = 1 ; result is zero  \r\nN = 0`\r\n    },\r\n    {\r\n        name: \"SUBLW\",\r\n        content: `#### SUBLW\r\nSubtract W from Literal\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`SUBLW k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 255 |\r\n| Operation:       | k \u2013 (W) \u2192 W |\r\n| Status Affected: | N, OV, C, DC, Z |\r\n| Encoding:        | 0000 1000 kkkk kkkk |\r\n\r\n**Description:** W is subtracted from the 8-bit literal 'k'. The result is placed in W.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' | Process Data | Write to W |\r\n\r\n**Example 1:**\r\n\\`\\`\\`\r\nSUBLW 02h\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = 01h  \r\nC = ?  \r\nAfter Instruction  \r\nW = 01h  \r\nC = 1 ; result is positive  \r\nZ = 0  \r\nN = 0\r\n\r\n**Example 2:**\r\n\\`\\`\\`\r\nSUBLW 02h\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = 02h  \r\nC = ?  \r\nAfter Instruction  \r\nW = 00h  \r\nC = 1 ; result is zero  \r\nZ = 1  \r\nN = 0\r\n\r\n**Example 3:**\r\n\\`\\`\\`\r\nSUBLW 02h\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = 03h  \r\nC = ?  \r\nAfter Instruction  \r\nW = FFh ; (2's complement)  \r\nC = 0 ; result is negative  \r\nZ = 0  \r\nN = 1`\r\n    },\r\n    {\r\n        name: \"SUBWF\",\r\n        content: `#### SUBWF\r\nSubtract W from f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`SUBWF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f) \u2013 (W) \u2192 dest |\r\n| Status Affected: | N, OV, C, DC, Z |\r\n| Encoding:        | 0101 11da ffff ffff |\r\n\r\n**Description:** Subtract W from register 'f' (2's complement method). If 'd' is '0', the result is stored in W. If 'd' is '1', the result is stored back in register 'f' (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write to destination |\r\n\r\n**Example 1:**\r\n\\`\\`\\`\r\nSUBWF REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 3  \r\nW = 2  \r\nC = ?  \r\nAfter Instruction  \r\nREG = 1  \r\nW = 2  \r\nC = 1 ; result is positive  \r\nZ = 0  \r\nN = 0\r\n\r\n**Example 2:**\r\n\\`\\`\\`\r\nSUBWF REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 2  \r\nW = 2  \r\nC = ?  \r\nAfter Instruction  \r\nREG = 2  \r\nW = 0  \r\nC = 1 ; result is zero  \r\nZ = 1  \r\nN = 0\r\n\r\n**Example 3:**\r\n\\`\\`\\`\r\nSUBWF REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 1  \r\nW = 2  \r\nC = ?  \r\nAfter Instruction  \r\nREG = FFh ; (2's complement)  \r\nW = 2  \r\nC = 0 ; result is negative  \r\nZ = 0  \r\nN = 1`\r\n    },\r\n    {\r\n        name: \"SUBWFB\",\r\n        content: `#### SUBWFB\r\nSubtract W from f with Borrow\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`SUBWFB f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f) \u2013 (W) \u2013 (C) \u2192 dest |\r\n| Status Affected: | N, OV, C, DC, Z |\r\n| Encoding:        | 0101 10da ffff ffff |\r\n\r\n**Description:** Subtract W and the Carry flag (borrow) from register 'f' (2's complement method). If 'd' is '0', the result is stored in W. If 'd' is '1', the result is stored back in register 'f' (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write to destination |\r\n\r\n**Example 1:**\r\n\\`\\`\\`\r\nSUBWFB REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 19h (0001 1001)  \r\nW = 0Dh (0000 1101)  \r\nC = 1  \r\nAfter Instruction  \r\nREG = 0Bh (0000 1011)  \r\nW = 0Dh (0000 1101)  \r\nZ = 0  \r\nC = 1  \r\nN = 0 ; result is positive\r\n\r\n**Example 2:**\r\n\\`\\`\\`\r\nSUBWFB REG, 0, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 1Bh (0001 1011)  \r\nW = 1Ah (0001 1010)  \r\nC = 0  \r\nAfter Instruction  \r\nREG = 1Bh (0001 1011)  \r\nW = 00h  \r\nC = 1  \r\nZ = 1  \r\nN = 0\r\n\r\n**Example 3:**\r\n\\`\\`\\`\r\nSUBWFB REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 03h (0000 0011)  \r\nW = 0Eh (0000 1101)  \r\nC = 1  \r\nAfter Instruction  \r\nREG = F4h (1111 0100) ; [2's comp]  \r\nW = 0Eh (0000 1101)  \r\nC = 0  \r\nZ = 0  \r\nN = 1 ; result is negative`\r\n    },\r\n    {\r\n        name: \"SWAPF\",\r\n        content: `#### SWAPF\r\nSwap f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`SWAPF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0> |\r\n| Status Affected: | None |\r\n| Encoding:        | 0011 10da ffff ffff |\r\n\r\n**Description:** The upper and lower nibbles of register 'f' are exchanged. If 'd' is '0', the result is placed in W. If 'd' is '1', the result is placed in register 'f' (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nSWAPF REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = 53h  \r\nAfter Instruction  \r\nREG = 35h`\r\n    },\r\n    {\r\n        name: \"TBLRD\",\r\n        content: `#### TBLRD\r\nTable Read\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`TBLRD (*; *+; *-; +*)\\` |\r\n| Operands:        | None |\r\n| Operation:       | if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT, TBLPTR \u2013 No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) + 1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) \u2013 1 \u2192 TBLPTR; if TBLRD +*, (TBLPTR) + 1 \u2192 TBLPTR, (Prog Mem (TBLPTR)) \u2192 TABLAT |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 0000 0000 10mm (mm=00: *, 01: *+, 10: *-, 11: +*) |\r\n\r\n**Description:** This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range.\r\n\r\nTBLPTR<0> = 0: Least Significant Byte of Program Memory Word  \r\nTBLPTR<0> = 1: Most Significant Byte of Program Memory Word  \r\nThe TBLRD instruction can modify the value of TBLPTR as follows:  \r\n- no change  \r\n- post-increment  \r\n- post-decrement  \r\n- pre-increment\r\n\r\n**Words:** 1  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | No operation | No operation | No operation |\r\n| No operation | No operation (Read Program Memory) | No operation | No operation (Write TABLAT) |\r\n\r\n**Example 1:**\r\n\\`\\`\\`\r\nTBLRD *+\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nTABLAT = 55h  \r\nTBLPTR = 00A356h  \r\nMEMORY (00A356h) = 34h  \r\nAfter Instruction  \r\nTABLAT = 34h  \r\nTBLPTR = 00A357h\r\n\r\n**Example 2:**\r\n\\`\\`\\`\r\nTBLRD +*\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nTABLAT = AAh  \r\nTBLPTR = 01A357h  \r\nMEMORY (01A357h) = 12h  \r\nMEMORY (01A358h) = 34h  \r\nAfter Instruction  \r\nTABLAT = 34h  \r\nTBLPTR = 01A358h`\r\n    },\r\n    {\r\n        name: \"TBLWT\",\r\n        content: `#### TBLWT\r\nTable Write\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`TBLWT (*; *+; *-; +*)\\` |\r\n| Operands:        | None |\r\n| Operation:       | if TBLWT *, (TABLAT) \u2192 Holding Register, TBLPTR \u2192 No Change; if TBLWT *+, (TABLAT) \u2192 Holding Register, (TBLPTR) + 1 \u2192 TBLPTR; if TBLWT *-, (TABLAT) \u2192 Holding Register, (TBLPTR) \u2013 1 \u2192 TBLPTR; if TBLWT +*, (TBLPTR) + 1 \u2192 TBLPTR, (TABLAT) \u2192 Holding Register |\r\n| Status Affected: | None |\r\n| Encoding:        | 0000 0000 0000 11mm (mm=00: *, 01: *+, 10: *-, 11: +*) |\r\n\r\n**Description:** This instruction uses the 3 LSBs of TBLPTR to determine which of the 8 holding registers the TABLAT is written to. The holding registers are used to program the contents of Program Memory (P.M.). The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-MByte address range. The LSB of the TBLPTR selects which byte of the program memory location to access.\r\n\r\nTBLPTR<0> = 0: Least Significant Byte of Program Memory Word  \r\nTBLPTR<0> = 1: Most Significant Byte of Program Memory Word  \r\nThe TBLWT instruction can modify the value of TBLPTR as follows:  \r\n- no change  \r\n- post-increment  \r\n- post-decrement  \r\n- pre-increment\r\n\r\n**Words:** 1  \r\n**Cycles:** 2  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | No operation | No operation | No operation |\r\n| No operation | No operation (Read TABLAT) | No operation (Write to Holding Register) | No operation |\r\n\r\n**Example 1:**\r\n\\`\\`\\`\r\nTBLWT *+\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nTABLAT = 55h  \r\nTBLPTR = 00A356h  \r\nHOLDING REGISTER (00A356h) = FFh  \r\nAfter Instructions (table write completion)  \r\nTABLAT = 55h  \r\nTBLPTR = 00A357h  \r\nHOLDING REGISTER (00A356h) = 55h\r\n\r\n**Example 2:**\r\n\\`\\`\\`\r\nTBLWT +*\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nTABLAT = 34h  \r\nTBLPTR = 01389Ah  \r\nHOLDING REGISTER (01389Ah) = FFh  \r\nHOLDING REGISTER (01389Bh) = FFh  \r\nAfter Instruction (table write completion)  \r\nTABLAT = 34h  \r\nTBLPTR = 01389Bh  \r\nHOLDING REGISTER (01389Ah) = FFh  \r\nHOLDING REGISTER (01389Bh) = 34h`\r\n    },\r\n    {\r\n        name: \"TSTFSZ\",\r\n        content: `#### TSTFSZ\r\nTest f, Skip if 0\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`TSTFSZ f {,a}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 a \u2208 [0,1] |\r\n| Operation:       | skip if f = 0 |\r\n| Status Affected: | None |\r\n| Encoding:        | 0110 011a ffff ffff |\r\n\r\n**Description:** If 'f' = 0, the next instruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1(2)  \r\n**Note:** 3 cycles if skip and followed by a 2-word instruction.\r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | No operation |\r\n\r\nIf skip:\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| No operation | No operation | No operation | No operation |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\n(HERE) TSTFSZ CNT, 0  \r\nNZERO :  \r\nZERO :  \r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nPC = Address (HERE)  \r\nAfter Instruction  \r\nif CNT = 00h, PC = Address (ZERO)  \r\nif CNT \u2260 00h, PC = Address (NZERO)`\r\n    },\r\n    {\r\n        name: \"XORLW\",\r\n        content: `#### XORLW\r\nExclusive OR Literal with W\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`XORLW k\\` |\r\n| Operands:        | 0 \u2264 k \u2264 255 |\r\n| Operation:       | (W) .XOR. k \u2192 W |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0000 1010 kkkk kkkk |\r\n\r\n**Description:** The contents of W are XORed with the 8-bit literal 'k'. The result is placed in W.\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read literal 'k' | Process Data | Write to W |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nXORLW 0AFh\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nW = B5h  \r\nAfter Instruction  \r\nW = 1Ah`\r\n    },\r\n    {\r\n        name: \"XORWF\",\r\n        content: `#### XORWF\r\nExclusive OR W with f\r\n\r\n|||\r\n|---|---|\r\n| Syntax:          | \\`XORWF f {,d {,a}}\\` |\r\n| Operands:        | 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1] |\r\n| Operation:       | (W) .XOR. (f) \u2192 dest |\r\n| Status Affected: | N, Z |\r\n| Encoding:        | 0001 10da ffff ffff |\r\n\r\n**Description:** Exclusive OR the contents of W with register 'f'. If 'd' is '0', the result is stored in W. If 'd' is '1', the result is stored back in the register 'f' (default). If 'a' is '0', the Access Bank is selected. If 'a' is '1', the BSR is used to select the GPR bank (default).\r\n\r\n**Words:** 1  \r\n**Cycles:** 1  \r\n\r\n**Q Cycle Activity:**\r\n\r\n| Q1 | Q2 | Q3 | Q4 |\r\n|---|---|---|---|\r\n| Decode | Read register 'f' | Process Data | Write to destination |\r\n\r\n**Example:**\r\n\\`\\`\\`\r\nXORWF REG, 1, 0\r\n\\`\\`\\`\r\n\r\nBefore Instruction  \r\nREG = AFh  \r\nW = B5h  \r\nAfter Instruction  \r\nREG = 1Ah  \r\nW = B5h`\r\n    }\r\n];\r\n\r\nexport const INSTRUCTION_DETAILS_MAP: Map<InstructionKey, string> = new Map(INSTRUCTION_DETAILS.map(\r\n    detail => [detail.name, detail.content]\r\n));\r\n", "export function isBranchAutoComplete(linePrefix: string): boolean {\r\n    const labelContextMatch = linePrefix.match(/(?:^|\\s)(BC|BN|BNC|BNN|BNOV|BNZ|BOV|BRA|BZ|CALL|RCALL|GOTO)\\s+([\\dA-Za-z_\\?\\$]*)$/i);\r\n    return labelContextMatch !== null\r\n}\r\n", "import { CompletionItem, CompletionItemKind, MarkdownString } from \"vscode\";\r\n\r\nimport differenceDefine from \"./define/difference.json\";\r\nimport sameDefine from \"./define/same.json\";\r\nimport mpasmDefine from \"./define/mpasm.json\";\r\nimport xc8Define from \"./define/xc8.json\";\r\n\r\nexport const PIC_DEFINE_COMPLETIONS = [\r\n    ...Object.entries(sameDefine).map(([label, value]) => {\r\n        const ci = new CompletionItem(label, CompletionItemKind.Constant);\r\n        ci.detail = value;\r\n        ci.insertText = label;\r\n        ci.documentation = new MarkdownString(`#### ${label}\\nSame value in both assemblers.\\n\\n\\`${value}\\``);\r\n\r\n        return ci;\r\n    }),\r\n    ...Object.entries(differenceDefine).map(([label, value]) => {\r\n        const ci = new CompletionItem(label, CompletionItemKind.Constant);\r\n        ci.detail = `(different) ${value.xc8} or ${value.mpasm}`;\r\n        ci.insertText = label;\r\n        ci.documentation = new MarkdownString(`#### ${label}\\nDifferent value depending on the assembler.\\n\\n- MPASM: \\`${value.mpasm}\\`\\n- XC8: \\`${value.xc8}\\``);\r\n\r\n        return ci;\r\n    }),\r\n    ...Object.entries(mpasmDefine).map(([label, value]) => {\r\n        const ci = new CompletionItem(label, CompletionItemKind.Constant);\r\n        ci.detail = `(mpasm) ${value}`;\r\n        ci.insertText = label;\r\n        ci.documentation = new MarkdownString(`#### ${label}\\nOnly defined in MPASM.\\n\\n\\`${value}\\``);\r\n\r\n        return ci;\r\n    }),\r\n    ...Object.entries(xc8Define).map(([label, value]) => {\r\n        const ci = new CompletionItem(label, CompletionItemKind.Constant);\r\n        ci.detail = `(xc8) ${value}`;\r\n        ci.insertText = label;\r\n        ci.documentation = new MarkdownString(`#### ${label}\\nOnly defined in XC8.\\n\\n\\`${value}\\``);\r\n\r\n        return ci;\r\n    }),\r\n];\r\n\r\nexport const PIC_DEFINE_COMPLETIONS_WITH_SORT_TEXT = PIC_DEFINE_COMPLETIONS.map(ci => {\r\n    ci.sortText = `zzz${ci.label}`;\r\n    return ci;\r\n})\r\n", "{\n  \"ABDEN\": {\n    \"xc8\": \"BANKMASK(BAUDCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"ABDOVF\": {\n    \"xc8\": \"BANKMASK(BAUDCON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"ACKDT\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"ACKEN\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"ACKSTAT\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"ACQT0\": {\n    \"xc8\": \"BANKMASK(ADCON2), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"ACQT1\": {\n    \"xc8\": \"BANKMASK(ADCON2), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"ACQT2\": {\n    \"xc8\": \"BANKMASK(ADCON2), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"ADCS0\": {\n    \"xc8\": \"BANKMASK(ADCON2), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"ADCS1\": {\n    \"xc8\": \"BANKMASK(ADCON2), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"ADCS2\": {\n    \"xc8\": \"BANKMASK(ADCON2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"ADDEN\": {\n    \"xc8\": \"BANKMASK(RCSTA), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"ADEN\": {\n    \"xc8\": \"BANKMASK(RCSTA), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"ADFM\": {\n    \"xc8\": \"BANKMASK(ADCON2), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"ADIE\": {\n    \"xc8\": \"BANKMASK(PIE1), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"ADIF\": {\n    \"xc8\": \"BANKMASK(PIR1), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"ADIP\": {\n    \"xc8\": \"BANKMASK(IPR1), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"ADMSK1\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"ADMSK2\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"ADMSK3\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"ADMSK4\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"ADMSK5\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"ADON\": {\n    \"xc8\": \"BANKMASK(ADCON0), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"AN0\": {\n    \"xc8\": \"BANKMASK(PORTA), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"AN1\": {\n    \"xc8\": \"BANKMASK(PORTA), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"AN10\": {\n    \"xc8\": \"BANKMASK(PORTB), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"AN11\": {\n    \"xc8\": \"BANKMASK(PORTB), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"AN12\": {\n    \"xc8\": \"BANKMASK(PORTB), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"AN2\": {\n    \"xc8\": \"BANKMASK(PORTA), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"AN3\": {\n    \"xc8\": \"BANKMASK(PORTA), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"AN4\": {\n    \"xc8\": \"BANKMASK(PORTA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"AN5\": {\n    \"xc8\": \"BANKMASK(PORTE), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"AN6\": {\n    \"xc8\": \"BANKMASK(PORTE), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"AN7\": {\n    \"xc8\": \"BANKMASK(PORTE), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"AN8\": {\n    \"xc8\": \"BANKMASK(PORTB), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"AN9\": {\n    \"xc8\": \"BANKMASK(PORTB), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"BCLIE\": {\n    \"xc8\": \"BANKMASK(PIE2), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"BCLIF\": {\n    \"xc8\": \"BANKMASK(PIR2), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"BCLIP\": {\n    \"xc8\": \"BANKMASK(IPR2), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"BF\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"BGST\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"BOR\": {\n    \"xc8\": \"BANKMASK(RCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"BRG16\": {\n    \"xc8\": \"BANKMASK(BAUDCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"BRGH\": {\n    \"xc8\": \"BANKMASK(TXSTA), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"C1INV\": {\n    \"xc8\": \"BANKMASK(CMCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"C2INV\": {\n    \"xc8\": \"BANKMASK(CMCON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"CCP1\": {\n    \"xc8\": \"BANKMASK(PORTC), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CCP1IE\": {\n    \"xc8\": \"BANKMASK(PIE1), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CCP1IF\": {\n    \"xc8\": \"BANKMASK(PIR1), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CCP1IP\": {\n    \"xc8\": \"BANKMASK(IPR1), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CCP1M0\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"CCP1M1\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"CCP1M2\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CCP1M3\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"CCP1X\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"CCP1Y\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"CCP2IE\": {\n    \"xc8\": \"BANKMASK(PIE2), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"CCP2IF\": {\n    \"xc8\": \"BANKMASK(PIR2), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"CCP2IP\": {\n    \"xc8\": \"BANKMASK(IPR2), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"CCP2M0\": {\n    \"xc8\": \"BANKMASK(CCP2CON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"CCP2M1\": {\n    \"xc8\": \"BANKMASK(CCP2CON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"CCP2M2\": {\n    \"xc8\": \"BANKMASK(CCP2CON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CCP2M3\": {\n    \"xc8\": \"BANKMASK(CCP2CON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"CCP2X\": {\n    \"xc8\": \"BANKMASK(CCP2CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"CCP2Y\": {\n    \"xc8\": \"BANKMASK(CCP2CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"CFGS\": {\n    \"xc8\": \"BANKMASK(EECON1), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"CHS0\": {\n    \"xc8\": \"BANKMASK(ADCON0), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CHS1\": {\n    \"xc8\": \"BANKMASK(ADCON0), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"CHS2\": {\n    \"xc8\": \"BANKMASK(ADCON0), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"CHS3\": {\n    \"xc8\": \"BANKMASK(ADCON0), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"CIS\": {\n    \"xc8\": \"BANKMASK(CMCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"CK\": {\n    \"xc8\": \"BANKMASK(PORTC), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"CKE\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"CKP\": {\n    \"xc8\": \"BANKMASK(SSPCON1), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"CLKI\": {\n    \"xc8\": \"BANKMASK(PORTA), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"CLKO\": {\n    \"xc8\": \"BANKMASK(PORTA), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"CM0\": {\n    \"xc8\": \"BANKMASK(CMCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"CM1\": {\n    \"xc8\": \"BANKMASK(CMCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"CM2\": {\n    \"xc8\": \"BANKMASK(CMCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CMIE\": {\n    \"xc8\": \"BANKMASK(PIE2), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"CMIF\": {\n    \"xc8\": \"BANKMASK(PIR2), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"CMIP\": {\n    \"xc8\": \"BANKMASK(IPR2), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"CREN\": {\n    \"xc8\": \"BANKMASK(RCSTA), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"CS\": {\n    \"xc8\": \"BANKMASK(PORTE), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CSRC\": {\n    \"xc8\": \"BANKMASK(TXSTA), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"CVR0\": {\n    \"xc8\": \"BANKMASK(CVRCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"CVR1\": {\n    \"xc8\": \"BANKMASK(CVRCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"CVR2\": {\n    \"xc8\": \"BANKMASK(CVRCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CVR3\": {\n    \"xc8\": \"BANKMASK(CVRCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"CVREF\": {\n    \"xc8\": \"BANKMASK(PORTA), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"CVREN\": {\n    \"xc8\": \"BANKMASK(CVRCON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"CVROE\": {\n    \"xc8\": \"BANKMASK(CVRCON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"CVRR\": {\n    \"xc8\": \"BANKMASK(CVRCON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"CVRSS\": {\n    \"xc8\": \"BANKMASK(CVRCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"DC\": {\n    \"xc8\": \"BANKMASK(STATUS), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"DC1B0\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"DC1B1\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"DC2B0\": {\n    \"xc8\": \"BANKMASK(CCP2CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"DC2B1\": {\n    \"xc8\": \"BANKMASK(CCP2CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"DONE\": {\n    \"xc8\": \"BANKMASK(ADCON0), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"D_A\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"D_NOT_A\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"ECCPAS0\": {\n    \"xc8\": \"BANKMASK(ECCP1AS), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"ECCPAS1\": {\n    \"xc8\": \"BANKMASK(ECCP1AS), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"ECCPAS2\": {\n    \"xc8\": \"BANKMASK(ECCP1AS), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"ECCPASE\": {\n    \"xc8\": \"BANKMASK(ECCP1AS), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"EEIE\": {\n    \"xc8\": \"BANKMASK(PIE2), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"EEIF\": {\n    \"xc8\": \"BANKMASK(PIR2), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"EEIP\": {\n    \"xc8\": \"BANKMASK(IPR2), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"EEPGD\": {\n    \"xc8\": \"BANKMASK(EECON1), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"FERR\": {\n    \"xc8\": \"BANKMASK(RCSTA), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"FLT0\": {\n    \"xc8\": \"BANKMASK(PORTB), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"FLTS\": {\n    \"xc8\": \"BANKMASK(OSCCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"FREE\": {\n    \"xc8\": \"BANKMASK(EECON1), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"GCEN\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"GIE\": {\n    \"xc8\": \"BANKMASK(INTCON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"GIEH\": {\n    \"xc8\": \"BANKMASK(INTCON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"GIEL\": {\n    \"xc8\": \"BANKMASK(INTCON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"GIE_GIEH\": {\n    \"xc8\": \"BANKMASK(INTCON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"GO\": {\n    \"xc8\": \"BANKMASK(ADCON0), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"GO_DONE\": {\n    \"xc8\": \"BANKMASK(ADCON0), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"GO_NOT_DONE\": {\n    \"xc8\": \"BANKMASK(ADCON0), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"HLVDEN\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"HLVDIE\": {\n    \"xc8\": \"BANKMASK(PIE2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"HLVDIF\": {\n    \"xc8\": \"BANKMASK(PIR2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"HLVDIN\": {\n    \"xc8\": \"BANKMASK(PORTA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"HLVDIP\": {\n    \"xc8\": \"BANKMASK(IPR2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"HLVDL0\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"HLVDL1\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"HLVDL2\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"HLVDL3\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"IBF\": {\n    \"xc8\": \"BANKMASK(TRISE), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"IBOV\": {\n    \"xc8\": \"BANKMASK(TRISE), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"IDLEN\": {\n    \"xc8\": \"BANKMASK(OSCCON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"INT0\": {\n    \"xc8\": \"BANKMASK(PORTB), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"INT0E\": {\n    \"xc8\": \"BANKMASK(INTCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"INT0F\": {\n    \"xc8\": \"BANKMASK(INTCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"INT0IE\": {\n    \"xc8\": \"BANKMASK(INTCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"INT0IF\": {\n    \"xc8\": \"BANKMASK(INTCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"INT1\": {\n    \"xc8\": \"BANKMASK(PORTB), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"INT1E\": {\n    \"xc8\": \"BANKMASK(INTCON3), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"INT1F\": {\n    \"xc8\": \"BANKMASK(INTCON3), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"INT1IE\": {\n    \"xc8\": \"BANKMASK(INTCON3), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"INT1IF\": {\n    \"xc8\": \"BANKMASK(INTCON3), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"INT1IP\": {\n    \"xc8\": \"BANKMASK(INTCON3), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"INT1P\": {\n    \"xc8\": \"BANKMASK(INTCON3), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"INT2\": {\n    \"xc8\": \"BANKMASK(PORTB), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"INT2E\": {\n    \"xc8\": \"BANKMASK(INTCON3), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"INT2F\": {\n    \"xc8\": \"BANKMASK(INTCON3), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"INT2IE\": {\n    \"xc8\": \"BANKMASK(INTCON3), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"INT2IF\": {\n    \"xc8\": \"BANKMASK(INTCON3), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"INT2IP\": {\n    \"xc8\": \"BANKMASK(INTCON3), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"INT2P\": {\n    \"xc8\": \"BANKMASK(INTCON3), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"INTEDG0\": {\n    \"xc8\": \"BANKMASK(INTCON2), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"INTEDG1\": {\n    \"xc8\": \"BANKMASK(INTCON2), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"INTEDG2\": {\n    \"xc8\": \"BANKMASK(INTCON2), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"INTSRC\": {\n    \"xc8\": \"BANKMASK(OSCTUNE), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"IOFS\": {\n    \"xc8\": \"BANKMASK(OSCCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"IPEN\": {\n    \"xc8\": \"BANKMASK(RCON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"IRCF0\": {\n    \"xc8\": \"BANKMASK(OSCCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"IRCF1\": {\n    \"xc8\": \"BANKMASK(OSCCON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"IRCF2\": {\n    \"xc8\": \"BANKMASK(OSCCON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"IRVST\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"IVRST\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"KBI0\": {\n    \"xc8\": \"BANKMASK(PORTB), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"KBI1\": {\n    \"xc8\": \"BANKMASK(PORTB), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"KBI2\": {\n    \"xc8\": \"BANKMASK(PORTB), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"KBI3\": {\n    \"xc8\": \"BANKMASK(PORTB), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"LATA0\": {\n    \"xc8\": \"BANKMASK(LATA), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"LATA1\": {\n    \"xc8\": \"BANKMASK(LATA), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"LATA2\": {\n    \"xc8\": \"BANKMASK(LATA), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LATA3\": {\n    \"xc8\": \"BANKMASK(LATA), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"LATA4\": {\n    \"xc8\": \"BANKMASK(LATA), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"LATA5\": {\n    \"xc8\": \"BANKMASK(LATA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"LATA6\": {\n    \"xc8\": \"BANKMASK(LATA), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"LATA7\": {\n    \"xc8\": \"BANKMASK(LATA), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"LATB0\": {\n    \"xc8\": \"BANKMASK(LATB), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"LATB1\": {\n    \"xc8\": \"BANKMASK(LATB), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"LATB2\": {\n    \"xc8\": \"BANKMASK(LATB), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LATB3\": {\n    \"xc8\": \"BANKMASK(LATB), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"LATB4\": {\n    \"xc8\": \"BANKMASK(LATB), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"LATB5\": {\n    \"xc8\": \"BANKMASK(LATB), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"LATB6\": {\n    \"xc8\": \"BANKMASK(LATB), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"LATB7\": {\n    \"xc8\": \"BANKMASK(LATB), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"LATC0\": {\n    \"xc8\": \"BANKMASK(LATC), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"LATC1\": {\n    \"xc8\": \"BANKMASK(LATC), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"LATC2\": {\n    \"xc8\": \"BANKMASK(LATC), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LATC3\": {\n    \"xc8\": \"BANKMASK(LATC), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"LATC4\": {\n    \"xc8\": \"BANKMASK(LATC), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"LATC5\": {\n    \"xc8\": \"BANKMASK(LATC), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"LATC6\": {\n    \"xc8\": \"BANKMASK(LATC), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"LATC7\": {\n    \"xc8\": \"BANKMASK(LATC), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"LATD0\": {\n    \"xc8\": \"BANKMASK(LATD), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"LATD1\": {\n    \"xc8\": \"BANKMASK(LATD), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"LATD2\": {\n    \"xc8\": \"BANKMASK(LATD), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LATD3\": {\n    \"xc8\": \"BANKMASK(LATD), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"LATD4\": {\n    \"xc8\": \"BANKMASK(LATD), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"LATD5\": {\n    \"xc8\": \"BANKMASK(LATD), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"LATD6\": {\n    \"xc8\": \"BANKMASK(LATD), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"LATD7\": {\n    \"xc8\": \"BANKMASK(LATD), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"LATE0\": {\n    \"xc8\": \"BANKMASK(LATE), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"LATE1\": {\n    \"xc8\": \"BANKMASK(LATE), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"LATE2\": {\n    \"xc8\": \"BANKMASK(LATE), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LVDEN\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"LVDIE\": {\n    \"xc8\": \"BANKMASK(PIE2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LVDIF\": {\n    \"xc8\": \"BANKMASK(PIR2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LVDIN\": {\n    \"xc8\": \"BANKMASK(PORTA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"LVDIP\": {\n    \"xc8\": \"BANKMASK(IPR2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LVDL0\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"LVDL1\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"LVDL2\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LVDL3\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"LVV0\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"LVV1\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"LVV2\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"LVV3\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"MCLR\": {\n    \"xc8\": \"BANKMASK(PORTE), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"NOT_A\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"NOT_ADDRESS\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"NOT_BOR\": {\n    \"xc8\": \"BANKMASK(RCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"NOT_CS\": {\n    \"xc8\": \"BANKMASK(PORTE), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"NOT_DONE\": {\n    \"xc8\": \"BANKMASK(ADCON0), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"NOT_MCLR\": {\n    \"xc8\": \"BANKMASK(PORTE), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"NOT_PD\": {\n    \"xc8\": \"BANKMASK(RCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"NOT_POR\": {\n    \"xc8\": \"BANKMASK(RCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"NOT_RBPU\": {\n    \"xc8\": \"BANKMASK(INTCON2), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"NOT_RD\": {\n    \"xc8\": \"BANKMASK(PORTE), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"NOT_RI\": {\n    \"xc8\": \"BANKMASK(RCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"NOT_SS\": {\n    \"xc8\": \"BANKMASK(PORTA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"NOT_T1SYNC\": {\n    \"xc8\": \"BANKMASK(T1CON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"NOT_T3SYNC\": {\n    \"xc8\": \"BANKMASK(T3CON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"NOT_TO\": {\n    \"xc8\": \"BANKMASK(RCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"NOT_W\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"NOT_WR\": {\n    \"xc8\": \"BANKMASK(PORTE), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"NOT_WRITE\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"OBF\": {\n    \"xc8\": \"BANKMASK(TRISE), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"OERR\": {\n    \"xc8\": \"BANKMASK(RCSTA), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"OSC1\": {\n    \"xc8\": \"BANKMASK(PORTA), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"OSC2\": {\n    \"xc8\": \"BANKMASK(PORTA), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"OSCFIE\": {\n    \"xc8\": \"BANKMASK(PIE2), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"OSCFIF\": {\n    \"xc8\": \"BANKMASK(PIR2), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"OSCFIP\": {\n    \"xc8\": \"BANKMASK(IPR2), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"OSTS\": {\n    \"xc8\": \"BANKMASK(OSCCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"OV\": {\n    \"xc8\": \"BANKMASK(STATUS), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"P1A\": {\n    \"xc8\": \"BANKMASK(PORTC), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"P1B\": {\n    \"xc8\": \"BANKMASK(PORTD), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"P1C\": {\n    \"xc8\": \"BANKMASK(PORTD), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"P1D\": {\n    \"xc8\": \"BANKMASK(PORTD), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"P1M0\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"P1M1\": {\n    \"xc8\": \"BANKMASK(CCP1CON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"PCFG0\": {\n    \"xc8\": \"BANKMASK(ADCON1), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"PCFG1\": {\n    \"xc8\": \"BANKMASK(ADCON1), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"PCFG2\": {\n    \"xc8\": \"BANKMASK(ADCON1), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"PCFG3\": {\n    \"xc8\": \"BANKMASK(ADCON1), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"PD\": {\n    \"xc8\": \"BANKMASK(RCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"PDC0\": {\n    \"xc8\": \"BANKMASK(PWM1CON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"PDC1\": {\n    \"xc8\": \"BANKMASK(PWM1CON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"PDC2\": {\n    \"xc8\": \"BANKMASK(PWM1CON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"PDC3\": {\n    \"xc8\": \"BANKMASK(PWM1CON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"PDC4\": {\n    \"xc8\": \"BANKMASK(PWM1CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"PDC5\": {\n    \"xc8\": \"BANKMASK(PWM1CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"PDC6\": {\n    \"xc8\": \"BANKMASK(PWM1CON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"PEIE\": {\n    \"xc8\": \"BANKMASK(INTCON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"PEIE_GIEL\": {\n    \"xc8\": \"BANKMASK(INTCON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"PEN\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"PGC\": {\n    \"xc8\": \"BANKMASK(PORTB), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"PGD\": {\n    \"xc8\": \"BANKMASK(PORTB), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"PGM\": {\n    \"xc8\": \"BANKMASK(PORTB), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"PLLEN\": {\n    \"xc8\": \"BANKMASK(OSCTUNE), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"POR\": {\n    \"xc8\": \"BANKMASK(RCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"PRSEN\": {\n    \"xc8\": \"BANKMASK(PWM1CON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"PSA\": {\n    \"xc8\": \"BANKMASK(T0CON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"PSP0\": {\n    \"xc8\": \"BANKMASK(PORTD), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"PSP1\": {\n    \"xc8\": \"BANKMASK(PORTD), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"PSP2\": {\n    \"xc8\": \"BANKMASK(PORTD), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"PSP3\": {\n    \"xc8\": \"BANKMASK(PORTD), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"PSP4\": {\n    \"xc8\": \"BANKMASK(PORTD), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"PSP5\": {\n    \"xc8\": \"BANKMASK(PORTD), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"PSP6\": {\n    \"xc8\": \"BANKMASK(PORTD), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"PSP7\": {\n    \"xc8\": \"BANKMASK(PORTD), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"PSPIE\": {\n    \"xc8\": \"BANKMASK(PIE1), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"PSPIF\": {\n    \"xc8\": \"BANKMASK(PIR1), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"PSPIP\": {\n    \"xc8\": \"BANKMASK(IPR1), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"PSPMODE\": {\n    \"xc8\": \"BANKMASK(TRISE), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"PSSAC0\": {\n    \"xc8\": \"BANKMASK(ECCP1AS), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"PSSAC1\": {\n    \"xc8\": \"BANKMASK(ECCP1AS), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"PSSBD0\": {\n    \"xc8\": \"BANKMASK(ECCP1AS), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"PSSBD1\": {\n    \"xc8\": \"BANKMASK(ECCP1AS), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"RA0\": {\n    \"xc8\": \"BANKMASK(PORTA), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"RA1\": {\n    \"xc8\": \"BANKMASK(PORTA), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"RA2\": {\n    \"xc8\": \"BANKMASK(PORTA), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"RA3\": {\n    \"xc8\": \"BANKMASK(PORTA), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"RA4\": {\n    \"xc8\": \"BANKMASK(PORTA), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"RA5\": {\n    \"xc8\": \"BANKMASK(PORTA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"RA6\": {\n    \"xc8\": \"BANKMASK(PORTA), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"RA7\": {\n    \"xc8\": \"BANKMASK(PORTA), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"RB0\": {\n    \"xc8\": \"BANKMASK(PORTB), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"RB1\": {\n    \"xc8\": \"BANKMASK(PORTB), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"RB2\": {\n    \"xc8\": \"BANKMASK(PORTB), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"RB3\": {\n    \"xc8\": \"BANKMASK(PORTB), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"RB4\": {\n    \"xc8\": \"BANKMASK(PORTB), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"RB5\": {\n    \"xc8\": \"BANKMASK(PORTB), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"RB6\": {\n    \"xc8\": \"BANKMASK(PORTB), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"RB7\": {\n    \"xc8\": \"BANKMASK(PORTB), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"RBIE\": {\n    \"xc8\": \"BANKMASK(INTCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"RBIF\": {\n    \"xc8\": \"BANKMASK(INTCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"RBIP\": {\n    \"xc8\": \"BANKMASK(INTCON2), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"RBPU\": {\n    \"xc8\": \"BANKMASK(INTCON2), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"RC0\": {\n    \"xc8\": \"BANKMASK(PORTC), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"RC1\": {\n    \"xc8\": \"BANKMASK(PORTC), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"RC2\": {\n    \"xc8\": \"BANKMASK(PORTC), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"RC3\": {\n    \"xc8\": \"BANKMASK(PORTC), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"RC4\": {\n    \"xc8\": \"BANKMASK(PORTC), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"RC5\": {\n    \"xc8\": \"BANKMASK(PORTC), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"RC6\": {\n    \"xc8\": \"BANKMASK(PORTC), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"RC7\": {\n    \"xc8\": \"BANKMASK(PORTC), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"RCEN\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"RCIDL\": {\n    \"xc8\": \"BANKMASK(BAUDCON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"RCIE\": {\n    \"xc8\": \"BANKMASK(PIE1), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"RCIF\": {\n    \"xc8\": \"BANKMASK(PIR1), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"RCIP\": {\n    \"xc8\": \"BANKMASK(IPR1), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"RCMT\": {\n    \"xc8\": \"BANKMASK(BAUDCON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"RD\": {\n    \"xc8\": \"BANKMASK(EECON1), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"RD0\": {\n    \"xc8\": \"BANKMASK(PORTD), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"RD1\": {\n    \"xc8\": \"BANKMASK(PORTD), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"RD2\": {\n    \"xc8\": \"BANKMASK(PORTD), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"RD3\": {\n    \"xc8\": \"BANKMASK(PORTD), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"RD4\": {\n    \"xc8\": \"BANKMASK(PORTD), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"RD5\": {\n    \"xc8\": \"BANKMASK(PORTD), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"RD6\": {\n    \"xc8\": \"BANKMASK(PORTD), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"RD7\": {\n    \"xc8\": \"BANKMASK(PORTD), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"RE0\": {\n    \"xc8\": \"BANKMASK(PORTE), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"RE1\": {\n    \"xc8\": \"BANKMASK(PORTE), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"RE2\": {\n    \"xc8\": \"BANKMASK(PORTE), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"RE3\": {\n    \"xc8\": \"BANKMASK(PORTE), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"RI\": {\n    \"xc8\": \"BANKMASK(RCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"RSEN\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"RX\": {\n    \"xc8\": \"BANKMASK(PORTC), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"RX9\": {\n    \"xc8\": \"BANKMASK(RCSTA), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"RX9D\": {\n    \"xc8\": \"BANKMASK(RCSTA), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"RXDTP\": {\n    \"xc8\": \"BANKMASK(BAUDCON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"R_NOT_W\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"R_W\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"SBOREN\": {\n    \"xc8\": \"BANKMASK(RCON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"SCK\": {\n    \"xc8\": \"BANKMASK(PORTC), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"SCKP\": {\n    \"xc8\": \"BANKMASK(BAUDCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"SCL\": {\n    \"xc8\": \"BANKMASK(PORTC), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"SCS0\": {\n    \"xc8\": \"BANKMASK(OSCCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"SCS1\": {\n    \"xc8\": \"BANKMASK(OSCCON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"SDA\": {\n    \"xc8\": \"BANKMASK(PORTC), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"SDI\": {\n    \"xc8\": \"BANKMASK(PORTC), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"SDO\": {\n    \"xc8\": \"BANKMASK(PORTC), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"SEN\": {\n    \"xc8\": \"BANKMASK(SSPCON2), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"SENDB\": {\n    \"xc8\": \"BANKMASK(TXSTA), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"SMP\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"SP0\": {\n    \"xc8\": \"BANKMASK(STKPTR), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"SP1\": {\n    \"xc8\": \"BANKMASK(STKPTR), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"SP2\": {\n    \"xc8\": \"BANKMASK(STKPTR), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"SP3\": {\n    \"xc8\": \"BANKMASK(STKPTR), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"SP4\": {\n    \"xc8\": \"BANKMASK(STKPTR), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"SPEN\": {\n    \"xc8\": \"BANKMASK(RCSTA), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"SREN\": {\n    \"xc8\": \"BANKMASK(RCSTA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"SS\": {\n    \"xc8\": \"BANKMASK(PORTA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"SSPEN\": {\n    \"xc8\": \"BANKMASK(SSPCON1), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"SSPIE\": {\n    \"xc8\": \"BANKMASK(PIE1), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"SSPIF\": {\n    \"xc8\": \"BANKMASK(PIR1), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"SSPIP\": {\n    \"xc8\": \"BANKMASK(IPR1), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"SSPM0\": {\n    \"xc8\": \"BANKMASK(SSPCON1), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"SSPM1\": {\n    \"xc8\": \"BANKMASK(SSPCON1), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"SSPM2\": {\n    \"xc8\": \"BANKMASK(SSPCON1), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"SSPM3\": {\n    \"xc8\": \"BANKMASK(SSPCON1), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"SSPOV\": {\n    \"xc8\": \"BANKMASK(SSPCON1), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"STKFUL\": {\n    \"xc8\": \"BANKMASK(STKPTR), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"STKOVF\": {\n    \"xc8\": \"BANKMASK(STKPTR), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"STKUNF\": {\n    \"xc8\": \"BANKMASK(STKPTR), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"SWDTE\": {\n    \"xc8\": \"BANKMASK(WDTCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"SWDTEN\": {\n    \"xc8\": \"BANKMASK(WDTCON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"SYNC\": {\n    \"xc8\": \"BANKMASK(TXSTA), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"T016BIT\": {\n    \"xc8\": \"BANKMASK(T0CON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"T08BIT\": {\n    \"xc8\": \"BANKMASK(T0CON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"T0CKI\": {\n    \"xc8\": \"BANKMASK(PORTA), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"T0CS\": {\n    \"xc8\": \"BANKMASK(T0CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"T0IE\": {\n    \"xc8\": \"BANKMASK(INTCON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"T0IF\": {\n    \"xc8\": \"BANKMASK(INTCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"T0PS0\": {\n    \"xc8\": \"BANKMASK(T0CON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"T0PS1\": {\n    \"xc8\": \"BANKMASK(T0CON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"T0PS2\": {\n    \"xc8\": \"BANKMASK(T0CON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"T0PS3\": {\n    \"xc8\": \"BANKMASK(T0CON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"T0SE\": {\n    \"xc8\": \"BANKMASK(T0CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"T13CKI\": {\n    \"xc8\": \"BANKMASK(PORTC), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"T1CKI\": {\n    \"xc8\": \"BANKMASK(PORTC), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"T1CKPS0\": {\n    \"xc8\": \"BANKMASK(T1CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"T1CKPS1\": {\n    \"xc8\": \"BANKMASK(T1CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"T1OSCEN\": {\n    \"xc8\": \"BANKMASK(T1CON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"T1OSI\": {\n    \"xc8\": \"BANKMASK(PORTC), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"T1OSO\": {\n    \"xc8\": \"BANKMASK(PORTC), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"T1RUN\": {\n    \"xc8\": \"BANKMASK(T1CON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"T1SYNC\": {\n    \"xc8\": \"BANKMASK(T1CON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"T2CKPS0\": {\n    \"xc8\": \"BANKMASK(T2CON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"T2CKPS1\": {\n    \"xc8\": \"BANKMASK(T2CON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"T2OUTPS0\": {\n    \"xc8\": \"BANKMASK(T2CON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"T2OUTPS1\": {\n    \"xc8\": \"BANKMASK(T2CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"T2OUTPS2\": {\n    \"xc8\": \"BANKMASK(T2CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"T2OUTPS3\": {\n    \"xc8\": \"BANKMASK(T2CON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"T3CCP1\": {\n    \"xc8\": \"BANKMASK(T3CON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"T3CCP2\": {\n    \"xc8\": \"BANKMASK(T3CON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"T3CKPS0\": {\n    \"xc8\": \"BANKMASK(T3CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"T3CKPS1\": {\n    \"xc8\": \"BANKMASK(T3CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"T3SYNC\": {\n    \"xc8\": \"BANKMASK(T3CON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TMR0IE\": {\n    \"xc8\": \"BANKMASK(INTCON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"TMR0IF\": {\n    \"xc8\": \"BANKMASK(INTCON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TMR0IP\": {\n    \"xc8\": \"BANKMASK(INTCON2), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TMR0ON\": {\n    \"xc8\": \"BANKMASK(T0CON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"TMR1CS\": {\n    \"xc8\": \"BANKMASK(T1CON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TMR1IE\": {\n    \"xc8\": \"BANKMASK(PIE1), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TMR1IF\": {\n    \"xc8\": \"BANKMASK(PIR1), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TMR1IP\": {\n    \"xc8\": \"BANKMASK(IPR1), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TMR1ON\": {\n    \"xc8\": \"BANKMASK(T1CON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TMR2IE\": {\n    \"xc8\": \"BANKMASK(PIE1), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TMR2IF\": {\n    \"xc8\": \"BANKMASK(PIR1), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TMR2IP\": {\n    \"xc8\": \"BANKMASK(IPR1), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TMR2ON\": {\n    \"xc8\": \"BANKMASK(T2CON), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TMR3CS\": {\n    \"xc8\": \"BANKMASK(T3CON), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TMR3IE\": {\n    \"xc8\": \"BANKMASK(PIE2), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TMR3IF\": {\n    \"xc8\": \"BANKMASK(PIR2), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TMR3IP\": {\n    \"xc8\": \"BANKMASK(IPR2), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TMR3ON\": {\n    \"xc8\": \"BANKMASK(T3CON), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TO\": {\n    \"xc8\": \"BANKMASK(RCON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"TOUTPS0\": {\n    \"xc8\": \"BANKMASK(T2CON), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"TOUTPS1\": {\n    \"xc8\": \"BANKMASK(T2CON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"TOUTPS2\": {\n    \"xc8\": \"BANKMASK(T2CON), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"TOUTPS3\": {\n    \"xc8\": \"BANKMASK(T2CON), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"TRISA0\": {\n    \"xc8\": \"BANKMASK(TRISA), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TRISA1\": {\n    \"xc8\": \"BANKMASK(TRISA), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TRISA2\": {\n    \"xc8\": \"BANKMASK(TRISA), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TRISA3\": {\n    \"xc8\": \"BANKMASK(TRISA), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"TRISA4\": {\n    \"xc8\": \"BANKMASK(TRISA), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"TRISA5\": {\n    \"xc8\": \"BANKMASK(TRISA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"TRISA6\": {\n    \"xc8\": \"BANKMASK(TRISA), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"TRISA7\": {\n    \"xc8\": \"BANKMASK(TRISA), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"TRISB0\": {\n    \"xc8\": \"BANKMASK(TRISB), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TRISB1\": {\n    \"xc8\": \"BANKMASK(TRISB), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TRISB2\": {\n    \"xc8\": \"BANKMASK(TRISB), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TRISB3\": {\n    \"xc8\": \"BANKMASK(TRISB), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"TRISB4\": {\n    \"xc8\": \"BANKMASK(TRISB), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"TRISB5\": {\n    \"xc8\": \"BANKMASK(TRISB), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"TRISB6\": {\n    \"xc8\": \"BANKMASK(TRISB), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"TRISB7\": {\n    \"xc8\": \"BANKMASK(TRISB), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"TRISC0\": {\n    \"xc8\": \"BANKMASK(TRISC), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TRISC1\": {\n    \"xc8\": \"BANKMASK(TRISC), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TRISC2\": {\n    \"xc8\": \"BANKMASK(TRISC), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TRISC3\": {\n    \"xc8\": \"BANKMASK(TRISC), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"TRISC4\": {\n    \"xc8\": \"BANKMASK(TRISC), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"TRISC5\": {\n    \"xc8\": \"BANKMASK(TRISC), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"TRISC6\": {\n    \"xc8\": \"BANKMASK(TRISC), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"TRISC7\": {\n    \"xc8\": \"BANKMASK(TRISC), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"TRISD0\": {\n    \"xc8\": \"BANKMASK(TRISD), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TRISD1\": {\n    \"xc8\": \"BANKMASK(TRISD), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TRISD2\": {\n    \"xc8\": \"BANKMASK(TRISD), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TRISD3\": {\n    \"xc8\": \"BANKMASK(TRISD), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"TRISD4\": {\n    \"xc8\": \"BANKMASK(TRISD), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"TRISD5\": {\n    \"xc8\": \"BANKMASK(TRISD), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"TRISD6\": {\n    \"xc8\": \"BANKMASK(TRISD), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"TRISD7\": {\n    \"xc8\": \"BANKMASK(TRISD), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"TRISE0\": {\n    \"xc8\": \"BANKMASK(TRISE), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TRISE1\": {\n    \"xc8\": \"BANKMASK(TRISE), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TRISE2\": {\n    \"xc8\": \"BANKMASK(TRISE), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TRMT\": {\n    \"xc8\": \"BANKMASK(TXSTA), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TUN0\": {\n    \"xc8\": \"BANKMASK(OSCTUNE), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TUN1\": {\n    \"xc8\": \"BANKMASK(OSCTUNE), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"TUN2\": {\n    \"xc8\": \"BANKMASK(OSCTUNE), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"TUN3\": {\n    \"xc8\": \"BANKMASK(OSCTUNE), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"TUN4\": {\n    \"xc8\": \"BANKMASK(OSCTUNE), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"TX\": {\n    \"xc8\": \"BANKMASK(PORTC), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"TX9\": {\n    \"xc8\": \"BANKMASK(TXSTA), 6, a\",\n    \"mpasm\": \"6\"\n  },\n  \"TX9D\": {\n    \"xc8\": \"BANKMASK(TXSTA), 0, a\",\n    \"mpasm\": \"0\"\n  },\n  \"TXCKP\": {\n    \"xc8\": \"BANKMASK(BAUDCON), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"TXEN\": {\n    \"xc8\": \"BANKMASK(TXSTA), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"TXIE\": {\n    \"xc8\": \"BANKMASK(PIE1), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"TXIF\": {\n    \"xc8\": \"BANKMASK(PIR1), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"TXIP\": {\n    \"xc8\": \"BANKMASK(IPR1), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"UA\": {\n    \"xc8\": \"BANKMASK(SSPSTAT), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"VCFG0\": {\n    \"xc8\": \"BANKMASK(ADCON1), 4, a\",\n    \"mpasm\": \"4\"\n  },\n  \"VCFG1\": {\n    \"xc8\": \"BANKMASK(ADCON1), 5, a\",\n    \"mpasm\": \"5\"\n  },\n  \"VDIRMAG\": {\n    \"xc8\": \"BANKMASK(HLVDCON), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"VPP\": {\n    \"xc8\": \"BANKMASK(PORTE), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"VREFN\": {\n    \"xc8\": \"BANKMASK(PORTA), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"VREFP\": {\n    \"xc8\": \"BANKMASK(PORTA), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"WCOL\": {\n    \"xc8\": \"BANKMASK(SSPCON1), 7, a\",\n    \"mpasm\": \"7\"\n  },\n  \"WR\": {\n    \"xc8\": \"BANKMASK(EECON1), 1, a\",\n    \"mpasm\": \"1\"\n  },\n  \"WREN\": {\n    \"xc8\": \"BANKMASK(EECON1), 2, a\",\n    \"mpasm\": \"2\"\n  },\n  \"WRERR\": {\n    \"xc8\": \"BANKMASK(EECON1), 3, a\",\n    \"mpasm\": \"3\"\n  },\n  \"WUE\": {\n    \"xc8\": \"BANKMASK(BAUDCON), 1, a\",\n    \"mpasm\": \"1\"\n  }\n}", "{\n  \"w\": \"0\",\n  \"f\": \"1\",\n  \"b\": \"1\",\n  \"c\": \"0\",\n  \"a\": \"0\",\n  \"PORTA\": \"0F80h\",\n  \"PORTB\": \"0F81h\",\n  \"PORTC\": \"0F82h\",\n  \"PORTD\": \"0F83h\",\n  \"PORTE\": \"0F84h\",\n  \"LATA\": \"0F89h\",\n  \"LATB\": \"0F8Ah\",\n  \"LATC\": \"0F8Bh\",\n  \"LATD\": \"0F8Ch\",\n  \"LATE\": \"0F8Dh\",\n  \"TRISA\": \"0F92h\",\n  \"TRISB\": \"0F93h\",\n  \"TRISC\": \"0F94h\",\n  \"TRISD\": \"0F95h\",\n  \"TRISE\": \"0F96h\",\n  \"OSCTUNE\": \"0F9Bh\",\n  \"PIE1\": \"0F9Dh\",\n  \"PIR1\": \"0F9Eh\",\n  \"IPR1\": \"0F9Fh\",\n  \"PIE2\": \"0FA0h\",\n  \"PIR2\": \"0FA1h\",\n  \"IPR2\": \"0FA2h\",\n  \"EECON1\": \"0FA6h\",\n  \"EECON2\": \"0FA7h\",\n  \"EEDATA\": \"0FA8h\",\n  \"EEADR\": \"0FA9h\",\n  \"RCSTA\": \"0FABh\",\n  \"TXSTA\": \"0FACh\",\n  \"TXREG\": \"0FADh\",\n  \"RCREG\": \"0FAEh\",\n  \"SPBRG\": \"0FAFh\",\n  \"SPBRGH\": \"0FB0h\",\n  \"T3CON\": \"0FB1h\",\n  \"TMR3\": \"0FB2h\",\n  \"TMR3L\": \"0FB2h\",\n  \"TMR3H\": \"0FB3h\",\n  \"CMCON\": \"0FB4h\",\n  \"CVRCON\": \"0FB5h\",\n  \"ECCP1AS\": \"0FB6h\",\n  \"PWM1CON\": \"0FB7h\",\n  \"BAUDCON\": \"0FB8h\",\n  \"CCP2CON\": \"0FBAh\",\n  \"CCPR2\": \"0FBBh\",\n  \"CCPR2L\": \"0FBBh\",\n  \"CCPR2H\": \"0FBCh\",\n  \"CCP1CON\": \"0FBDh\",\n  \"CCPR1\": \"0FBEh\",\n  \"CCPR1L\": \"0FBEh\",\n  \"CCPR1H\": \"0FBFh\",\n  \"ADCON2\": \"0FC0h\",\n  \"ADCON1\": \"0FC1h\",\n  \"ADCON0\": \"0FC2h\",\n  \"ADRES\": \"0FC3h\",\n  \"ADRESL\": \"0FC3h\",\n  \"ADRESH\": \"0FC4h\",\n  \"SSPCON2\": \"0FC5h\",\n  \"SSPCON1\": \"0FC6h\",\n  \"SSPSTAT\": \"0FC7h\",\n  \"SSPADD\": \"0FC8h\",\n  \"SSPBUF\": \"0FC9h\",\n  \"T2CON\": \"0FCAh\",\n  \"PR2\": \"0FCBh\",\n  \"TMR2\": \"0FCCh\",\n  \"T1CON\": \"0FCDh\",\n  \"TMR1\": \"0FCEh\",\n  \"TMR1L\": \"0FCEh\",\n  \"TMR1H\": \"0FCFh\",\n  \"RCON\": \"0FD0h\",\n  \"WDTCON\": \"0FD1h\",\n  \"HLVDCON\": \"0FD2h\",\n  \"OSCCON\": \"0FD3h\",\n  \"T0CON\": \"0FD5h\",\n  \"TMR0\": \"0FD6h\",\n  \"TMR0L\": \"0FD6h\",\n  \"TMR0H\": \"0FD7h\",\n  \"STATUS\": \"0FD8h\",\n  \"FSR2\": \"0FD9h\",\n  \"FSR2L\": \"0FD9h\",\n  \"FSR2H\": \"0FDAh\",\n  \"PLUSW2\": \"0FDBh\",\n  \"PREINC2\": \"0FDCh\",\n  \"POSTDEC2\": \"0FDDh\",\n  \"POSTINC2\": \"0FDEh\",\n  \"INDF2\": \"0FDFh\",\n  \"BSR\": \"0FE0h\",\n  \"FSR1\": \"0FE1h\",\n  \"FSR1L\": \"0FE1h\",\n  \"FSR1H\": \"0FE2h\",\n  \"PLUSW1\": \"0FE3h\",\n  \"PREINC1\": \"0FE4h\",\n  \"POSTDEC1\": \"0FE5h\",\n  \"POSTINC1\": \"0FE6h\",\n  \"INDF1\": \"0FE7h\",\n  \"WREG\": \"0FE8h\",\n  \"FSR0\": \"0FE9h\",\n  \"FSR0L\": \"0FE9h\",\n  \"FSR0H\": \"0FEAh\",\n  \"PLUSW0\": \"0FEBh\",\n  \"PREINC0\": \"0FECh\",\n  \"POSTDEC0\": \"0FEDh\",\n  \"POSTINC0\": \"0FEEh\",\n  \"INDF0\": \"0FEFh\",\n  \"INTCON3\": \"0FF0h\",\n  \"INTCON2\": \"0FF1h\",\n  \"INTCON\": \"0FF2h\",\n  \"PROD\": \"0FF3h\",\n  \"PRODL\": \"0FF3h\",\n  \"PRODH\": \"0FF4h\",\n  \"TABLAT\": \"0FF5h\",\n  \"TBLPTR\": \"0FF6h\",\n  \"TBLPTRL\": \"0FF6h\",\n  \"TBLPTRH\": \"0FF7h\",\n  \"TBLPTRU\": \"0FF8h\",\n  \"PCL\": \"0FF9h\",\n  \"PCLATH\": \"0FFAh\",\n  \"PCLATU\": \"0FFBh\",\n  \"STKPTR\": \"0FFCh\",\n  \"TOS\": \"0FFDh\",\n  \"TOSL\": \"0FFDh\",\n  \"TOSH\": \"0FFEh\",\n  \"TOSU\": \"0FFFh\"\n}", "{\n  \"ECCPAS\": \"0FB6h\",\n  \"ECCP1DEL\": \"0FB7h\",\n  \"BAUDCTL\": \"0FB8h\",\n  \"LVDCON\": \"0FD2h\",\n  \"PC\": \"0FF9h\",\n  \"C1OUT_PORTA\": \"4\",\n  \"C2OUT_PORTA\": \"5\",\n  \"CCP2_PORTB\": \"3\",\n  \"CCP2_PORTC\": \"1\",\n  \"RD16\": \"7\",\n  \"C1OUT_CMCON\": \"6\",\n  \"C2OUT_CMCON\": \"7\",\n  \"S\": \"3\",\n  \"P\": \"4\",\n  \"R\": \"2\",\n  \"D\": \"5\",\n  \"C\": \"0\",\n  \"Z\": \"2\",\n  \"N\": \"4\",\n  \"_CONFIG1H\": \"0300001h\",\n  \"_CONFIG2L\": \"0300002h\",\n  \"_CONFIG2H\": \"0300003h\",\n  \"_CONFIG3H\": \"0300005h\",\n  \"_CONFIG4L\": \"0300006h\",\n  \"_CONFIG5L\": \"0300008h\",\n  \"_CONFIG5H\": \"0300009h\",\n  \"_CONFIG6L\": \"030000Ah\",\n  \"_CONFIG6H\": \"030000Bh\",\n  \"_CONFIG7L\": \"030000Ch\",\n  \"_CONFIG7H\": \"030000Dh\",\n  \"_OSC_LP_1H\": \"0F0h\",\n  \"_OSC_XT_1H\": \"0F1h\",\n  \"_OSC_HS_1H\": \"0F2h\",\n  \"_OSC_RC_1H\": \"0F3h\",\n  \"_OSC_EC_1H\": \"0F4h\",\n  \"_OSC_ECIO6_1H\": \"0F5h\",\n  \"_OSC_HSPLL_1H\": \"0F6h\",\n  \"_OSC_RCIO6_1H\": \"0F7h\",\n  \"_OSC_INTIO67_1H\": \"0F8h\",\n  \"_OSC_INTIO7_1H\": \"0F9h\",\n  \"_FCMEN_OFF_1H\": \"0BFh\",\n  \"_FCMEN_ON_1H\": \"0FFh\",\n  \"_IESO_OFF_1H\": \"07Fh\",\n  \"_IESO_ON_1H\": \"0FFh\",\n  \"_PWRT_ON_2L\": \"0FEh\",\n  \"_PWRT_OFF_2L\": \"0FFh\",\n  \"_BOREN_OFF_2L\": \"0F9h\",\n  \"_BOREN_ON_2L\": \"0FBh\",\n  \"_BOREN_NOSLP_2L\": \"0FDh\",\n  \"_BOREN_SBORDIS_2L\": \"0FFh\",\n  \"_BORV_0_2L\": \"0E7h\",\n  \"_BORV_1_2L\": \"0EFh\",\n  \"_BORV_2_2L\": \"0F7h\",\n  \"_BORV_3_2L\": \"0FFh\",\n  \"_WDT_OFF_2H\": \"0FEh\",\n  \"_WDT_ON_2H\": \"0FFh\",\n  \"_WDTPS_1_2H\": \"0E1h\",\n  \"_WDTPS_2_2H\": \"0E3h\",\n  \"_WDTPS_4_2H\": \"0E5h\",\n  \"_WDTPS_8_2H\": \"0E7h\",\n  \"_WDTPS_16_2H\": \"0E9h\",\n  \"_WDTPS_32_2H\": \"0EBh\",\n  \"_WDTPS_64_2H\": \"0EDh\",\n  \"_WDTPS_128_2H\": \"0EFh\",\n  \"_WDTPS_256_2H\": \"0F1h\",\n  \"_WDTPS_512_2H\": \"0F3h\",\n  \"_WDTPS_1024_2H\": \"0F5h\",\n  \"_WDTPS_2048_2H\": \"0F7h\",\n  \"_WDTPS_4096_2H\": \"0F9h\",\n  \"_WDTPS_8192_2H\": \"0FBh\",\n  \"_WDTPS_16384_2H\": \"0FDh\",\n  \"_WDTPS_32768_2H\": \"0FFh\",\n  \"_CCP2MX_PORTBE_3H\": \"0FEh\",\n  \"_CCP2MX_PORTC_3H\": \"0FFh\",\n  \"_PBADEN_OFF_3H\": \"0FDh\",\n  \"_PBADEN_ON_3H\": \"0FFh\",\n  \"_LPT1OSC_OFF_3H\": \"0FBh\",\n  \"_LPT1OSC_ON_3H\": \"0FFh\",\n  \"_MCLRE_OFF_3H\": \"07Fh\",\n  \"_MCLRE_ON_3H\": \"0FFh\",\n  \"_STVREN_OFF_4L\": \"0FEh\",\n  \"_STVREN_ON_4L\": \"0FFh\",\n  \"_LVP_OFF_4L\": \"0FBh\",\n  \"_LVP_ON_4L\": \"0FFh\",\n  \"_XINST_OFF_4L\": \"0BFh\",\n  \"_XINST_ON_4L\": \"0FFh\",\n  \"_DEBUG_ON_4L\": \"07Fh\",\n  \"_DEBUG_OFF_4L\": \"0FFh\",\n  \"_CP0_ON_5L\": \"0FEh\",\n  \"_CP0_OFF_5L\": \"0FFh\",\n  \"_CP1_ON_5L\": \"0FDh\",\n  \"_CP1_OFF_5L\": \"0FFh\",\n  \"_CP2_ON_5L\": \"0FBh\",\n  \"_CP2_OFF_5L\": \"0FFh\",\n  \"_CP3_ON_5L\": \"0F7h\",\n  \"_CP3_OFF_5L\": \"0FFh\",\n  \"_CPB_ON_5H\": \"0BFh\",\n  \"_CPB_OFF_5H\": \"0FFh\",\n  \"_CPD_ON_5H\": \"07Fh\",\n  \"_CPD_OFF_5H\": \"0FFh\",\n  \"_WRT0_ON_6L\": \"0FEh\",\n  \"_WRT0_OFF_6L\": \"0FFh\",\n  \"_WRT1_ON_6L\": \"0FDh\",\n  \"_WRT1_OFF_6L\": \"0FFh\",\n  \"_WRT2_ON_6L\": \"0FBh\",\n  \"_WRT2_OFF_6L\": \"0FFh\",\n  \"_WRT3_ON_6L\": \"0F7h\",\n  \"_WRT3_OFF_6L\": \"0FFh\",\n  \"_WRTC_ON_6H\": \"0DFh\",\n  \"_WRTC_OFF_6H\": \"0FFh\",\n  \"_WRTB_ON_6H\": \"0BFh\",\n  \"_WRTB_OFF_6H\": \"0FFh\",\n  \"_WRTD_ON_6H\": \"07Fh\",\n  \"_WRTD_OFF_6H\": \"0FFh\",\n  \"_EBTR0_ON_7L\": \"0FEh\",\n  \"_EBTR0_OFF_7L\": \"0FFh\",\n  \"_EBTR1_ON_7L\": \"0FDh\",\n  \"_EBTR1_OFF_7L\": \"0FFh\",\n  \"_EBTR2_ON_7L\": \"0FBh\",\n  \"_EBTR2_OFF_7L\": \"0FFh\",\n  \"_EBTR3_ON_7L\": \"0F7h\",\n  \"_EBTR3_OFF_7L\": \"0FFh\",\n  \"_EBTRB_ON_7H\": \"0BFh\",\n  \"_EBTRB_OFF_7H\": \"0FFh\",\n  \"_DEVID1\": \"03FFFFEh\",\n  \"_DEVID2\": \"03FFFFFh\",\n  \"_IDLOC0\": \"0200000h\",\n  \"_IDLOC1\": \"0200001h\",\n  \"_IDLOC2\": \"0200002h\",\n  \"_IDLOC3\": \"0200003h\",\n  \"_IDLOC4\": \"0200004h\",\n  \"_IDLOC5\": \"0200005h\",\n  \"_IDLOC6\": \"0200006h\",\n  \"_IDLOC7\": \"0200007h\"\n}", "{\n  \"PCLAT\": \"0FF9h\",\n  \"PAGEMASK\": \"(addr) ((addr) and 0FFFFFh)\",\n  \"BANKMASK\": \"(addr) ((addr) and 0FFh)\",\n  \"BRGH1\": \"BANKMASK(TXSTA), 2, a\",\n  \"C1OUT\": \"BANKMASK(CMCON), 6, a\",\n  \"C2OUT\": \"BANKMASK(CMCON), 7, a\",\n  \"CARRY\": \"BANKMASK(STATUS), 0, a\",\n  \"CCP10\": \"BANKMASK(PORTE), 2, a\",\n  \"CCP2_PA2\": \"BANKMASK(PORTB), 3, a\",\n  \"CCP9E\": \"BANKMASK(PORTE), 3, a\",\n  \"CHSN3\": \"BANKMASK(ADCON1), 3, a\",\n  \"CMEN0\": \"BANKMASK(CMCON), 0, a\",\n  \"CMEN1\": \"BANKMASK(CMCON), 1, a\",\n  \"CMEN2\": \"BANKMASK(CMCON), 2, a\",\n  \"CSRC1\": \"BANKMASK(TXSTA), 7, a\",\n  \"CVROEN\": \"BANKMASK(CVRCON), 6, a\",\n  \"DA\": \"BANKMASK(SSPSTAT), 5, a\",\n  \"DT\": \"BANKMASK(PORTC), 7, a\",\n  \"D_nA\": \"BANKMASK(SSPSTAT), 5, a\",\n  \"EBDIS\": \"BANKMASK(PR2), 7, a\",\n  \"EEFS\": \"BANKMASK(EECON1), 6, a\",\n  \"GODONE\": \"BANKMASK(ADCON0), 1, a\",\n  \"GO_nDONE\": \"BANKMASK(ADCON0), 1, a\",\n  \"LA0\": \"BANKMASK(LATA), 0, a\",\n  \"LA1\": \"BANKMASK(LATA), 1, a\",\n  \"LA2\": \"BANKMASK(LATA), 2, a\",\n  \"LA3\": \"BANKMASK(LATA), 3, a\",\n  \"LA4\": \"BANKMASK(LATA), 4, a\",\n  \"LA5\": \"BANKMASK(LATA), 5, a\",\n  \"LA6\": \"BANKMASK(LATA), 6, a\",\n  \"LA7\": \"BANKMASK(LATA), 7, a\",\n  \"LB0\": \"BANKMASK(LATB), 0, a\",\n  \"LB1\": \"BANKMASK(LATB), 1, a\",\n  \"LB2\": \"BANKMASK(LATB), 2, a\",\n  \"LB3\": \"BANKMASK(LATB), 3, a\",\n  \"LB4\": \"BANKMASK(LATB), 4, a\",\n  \"LB5\": \"BANKMASK(LATB), 5, a\",\n  \"LB6\": \"BANKMASK(LATB), 6, a\",\n  \"LB7\": \"BANKMASK(LATB), 7, a\",\n  \"LC0\": \"BANKMASK(LATC), 0, a\",\n  \"LC1\": \"BANKMASK(LATC), 1, a\",\n  \"LC2\": \"BANKMASK(LATC), 2, a\",\n  \"LC3\": \"BANKMASK(LATC), 3, a\",\n  \"LC4\": \"BANKMASK(LATC), 4, a\",\n  \"LC5\": \"BANKMASK(LATC), 5, a\",\n  \"LC6\": \"BANKMASK(LATC), 6, a\",\n  \"LC7\": \"BANKMASK(LATC), 7, a\",\n  \"LD0\": \"BANKMASK(LATD), 0, a\",\n  \"LD1\": \"BANKMASK(LATD), 1, a\",\n  \"LD2\": \"BANKMASK(LATD), 2, a\",\n  \"LD3\": \"BANKMASK(LATD), 3, a\",\n  \"LD4\": \"BANKMASK(LATD), 4, a\",\n  \"LD5\": \"BANKMASK(LATD), 5, a\",\n  \"LD6\": \"BANKMASK(LATD), 6, a\",\n  \"LD7\": \"BANKMASK(LATD), 7, a\",\n  \"LE0\": \"BANKMASK(LATE), 0, a\",\n  \"LE1\": \"BANKMASK(LATE), 1, a\",\n  \"LE2\": \"BANKMASK(LATE), 2, a\",\n  \"NEGATIVE\": \"BANKMASK(STATUS), 4, a\",\n  \"OVERFLOW\": \"BANKMASK(STATUS), 3, a\",\n  \"PA1\": \"BANKMASK(PORTC), 2, a\",\n  \"PA2\": \"BANKMASK(PORTC), 1, a\",\n  \"PB2\": \"BANKMASK(PORTE), 2, a\",\n  \"PC2\": \"BANKMASK(PORTE), 1, a\",\n  \"PC3E\": \"BANKMASK(PORTE), 3, a\",\n  \"PD2\": \"BANKMASK(PORTE), 0, a\",\n  \"RC1IE\": \"BANKMASK(PIE1), 5, a\",\n  \"RC1IF\": \"BANKMASK(PIR1), 5, a\",\n  \"RC1IP\": \"BANKMASK(IPR1), 5, a\",\n  \"RC8_9\": \"BANKMASK(RCSTA), 6, a\",\n  \"RC9\": \"BANKMASK(RCSTA), 6, a\",\n  \"RCD8\": \"BANKMASK(RCSTA), 0, a\",\n  \"RD163\": \"BANKMASK(T3CON), 7, a\",\n  \"RDE\": \"BANKMASK(PORTE), 0, a\",\n  \"RJPU\": \"BANKMASK(PORTA), 7, a\",\n  \"RW\": \"BANKMASK(SSPSTAT), 2, a\",\n  \"RXCKP\": \"BANKMASK(BAUDCON), 5, a\",\n  \"R_nW\": \"BANKMASK(SSPSTAT), 2, a\",\n  \"SENDB1\": \"BANKMASK(TXSTA), 3, a\",\n  \"SOSCEN\": \"BANKMASK(T1CON), 3, a\",\n  \"SOSCEN3\": \"BANKMASK(T3CON), 3, a\",\n  \"SRENA\": \"BANKMASK(RCSTA), 5, a\",\n  \"SS2\": \"BANKMASK(PORTD), 7, a\",\n  \"START\": \"BANKMASK(SSPSTAT), 3, a\",\n  \"STOP\": \"BANKMASK(SSPSTAT), 4, a\",\n  \"SYNC1\": \"BANKMASK(TXSTA), 4, a\",\n  \"T1RD16\": \"BANKMASK(T1CON), 7, a\",\n  \"T3RD16\": \"BANKMASK(T3CON), 7, a\",\n  \"TRMT1\": \"BANKMASK(TXSTA), 1, a\",\n  \"TX1IE\": \"BANKMASK(PIE1), 4, a\",\n  \"TX1IF\": \"BANKMASK(PIR1), 4, a\",\n  \"TX1IP\": \"BANKMASK(IPR1), 4, a\",\n  \"TX8_9\": \"BANKMASK(TXSTA), 6, a\",\n  \"TX91\": \"BANKMASK(TXSTA), 6, a\",\n  \"TX9D1\": \"BANKMASK(TXSTA), 0, a\",\n  \"TXD8\": \"BANKMASK(TXSTA), 0, a\",\n  \"TXEN1\": \"BANKMASK(TXSTA), 5, a\",\n  \"ULPWUIN\": \"BANKMASK(PORTA), 0, a\",\n  \"VCFG01\": \"BANKMASK(ADCON1), 4, a\",\n  \"VCFG11\": \"BANKMASK(ADCON1), 5, a\",\n  \"W4E\": \"BANKMASK(BAUDCON), 1, a\",\n  \"WAIT0\": \"BANKMASK(PR2), 4, a\",\n  \"WAIT1\": \"BANKMASK(PR2), 5, a\",\n  \"WM0\": \"BANKMASK(PR2), 0, a\",\n  \"WM1\": \"BANKMASK(PR2), 1, a\",\n  \"WRE\": \"BANKMASK(PORTE), 1, a\",\n  \"ZERO\": \"BANKMASK(STATUS), 2, a\",\n  \"nA\": \"BANKMASK(SSPSTAT), 5, a\",\n  \"nADDRESS\": \"BANKMASK(SSPSTAT), 5, a\",\n  \"nBOR\": \"BANKMASK(RCON), 0, a\",\n  \"nCS\": \"BANKMASK(PORTE), 2, a\",\n  \"nDONE\": \"BANKMASK(ADCON0), 1, a\",\n  \"nMCLR\": \"BANKMASK(PORTE), 3, a\",\n  \"nPD\": \"BANKMASK(RCON), 2, a\",\n  \"nPOR\": \"BANKMASK(RCON), 1, a\",\n  \"nRBPU\": \"BANKMASK(INTCON2), 7, a\",\n  \"nRD\": \"BANKMASK(PORTE), 0, a\",\n  \"nRI\": \"BANKMASK(RCON), 4, a\",\n  \"nSS\": \"BANKMASK(PORTA), 5, a\",\n  \"nT1SYNC\": \"BANKMASK(T1CON), 2, a\",\n  \"nT3SYNC\": \"BANKMASK(T3CON), 2, a\",\n  \"nTO\": \"BANKMASK(RCON), 3, a\",\n  \"nW\": \"BANKMASK(SSPSTAT), 2, a\",\n  \"nWR\": \"BANKMASK(PORTE), 1, a\",\n  \"nWRITE\": \"BANKMASK(SSPSTAT), 2, a\",\n  \"SPACE_CODE\": \"0\",\n  \"SPACE_DATA\": \"1\",\n  \"SPACE_EEPROM\": \"3\"\n}", "import { CompletionItem, CompletionItemKind, MarkdownString, Position, TextDocument, TextEdit } from \"vscode\";\r\n\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nimport { labelManager } from \"./data\";\r\nimport { LabelResourceType } from \"./types/label\";\r\n\r\nlet cachedResults: CompletionItem[] = [];\r\nlet lastDocumentUri: string = \"\";\r\n\r\nexport function resetCompletionCache(): void {\r\n    cachedResults = [];\r\n    lastDocumentUri = \"\";\r\n}\r\n\r\nconst INSERT_ORDER: [string, 0 | 1][] = [\r\n    [\"extrn\", 1],\r\n    [\"include\", 1],\r\n    [\"global\", 0],\r\n    [\"psect\", 0]\r\n];\r\n\r\nfunction labelToCompletionItem(\r\n    label: LabelResourceType,\r\n    type: \"currentFile\" | \"imported\" | \"external\"\r\n): CompletionItem {\r\n    const {\r\n        uri,\r\n        position,\r\n        value: { name: labelName, comment }\r\n    } = label;\r\n    const fileUri = getFileId(uri);\r\n\r\n    const item = new CompletionItem(labelName, CompletionItemKind.Function);\r\n    item.insertText = labelName;\r\n    item.documentation = new MarkdownString(label.value.comment);\r\n    item.documentation = new MarkdownString(`Define in \\`${fileUri}:${position.line}\\`\\n\\n${comment || \"\"}`);\r\n\r\n    switch (type) {\r\n        case \"currentFile\":\r\n            item.detail = \"(this file)\";\r\n            item.sortText = `0_${labelName}`;\r\n            break;\r\n        case \"imported\":\r\n            item.detail = `(imported)`;\r\n            item.sortText = `0_${labelName}`;\r\n            break;\r\n        case \"external\":\r\n            item.detail = `(external)`;\r\n            item.sortText = `1_${labelName}`;\r\n            break;\r\n    }\r\n\r\n    return item;\r\n}\r\n\r\nexport function getLabelCompletions(document: TextDocument): CompletionItem[] {\r\n    const fileUri = getFileId(document.uri);\r\n    if (lastDocumentUri === fileUri) return cachedResults;\r\n\r\n    const currentFilesLabels = labelManager.fileMapData.get(fileUri) || [];\r\n    const importedLabels = currentFilesLabels.filter(({ value: label }) => label.isExternal).map(({ value: label }) => label.name);\r\n\r\n    const documentText = document.getText().toLowerCase();\r\n    const completions: CompletionItem[] = currentFilesLabels.filter(\r\n        ({ value: { isExternal } }) => !isExternal\r\n    ).map(label => labelToCompletionItem(\r\n        label, \"currentFile\"\r\n    ));\r\n\r\n    labelManager.fileMapData.forEach((resource, uri) => {\r\n        if (uri === fileUri) return;\r\n\r\n        completions.push(...resource.filter(({ value: { isExternal } }) => !isExternal).map(resource => {\r\n            const labelName = resource.value.name;\r\n            if (importedLabels.includes(labelName)) return labelToCompletionItem(resource, \"imported\");\r\n\r\n            const item = labelToCompletionItem(resource, \"external\");\r\n            let insertLine = 0;\r\n            for (const [directive, indexType] of INSERT_ORDER) {\r\n                if (!documentText.includes(directive)) continue;\r\n                insertLine = document.positionAt(\r\n                    indexType === 1\r\n                        ? documentText.lastIndexOf(directive)\r\n                        : documentText.indexOf(directive)\r\n                ).line + indexType;\r\n                break;\r\n            }\r\n\r\n            item.additionalTextEdits = [TextEdit.insert(new Position(insertLine, 0), `EXTRN ${labelName}\\n`)];\r\n\r\n            return item;\r\n        }))\r\n    })\r\n\r\n    cachedResults = completions;\r\n    lastDocumentUri = fileUri;\r\n\r\n    return completions;\r\n}", "import { Uri, workspace } from \"vscode\";\r\n\r\nexport function getFileId(uri: Uri) {\r\n    return workspace.asRelativePath(uri, false).toLowerCase();\r\n}", "import { Uri } from \"vscode\";\r\n\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nimport { LabelResourceType } from \"./types/label\";\r\nimport { BranchLabelResourceType } from \"./types/branchLabel\";\r\n\r\nclass DataManager {\r\n    private _fileMapData: Map<string, LabelResourceType[]>;\r\n    private _labelNameMapData: Map<string, LabelResourceType[]>;\r\n    private _branchLabelFileMapData: Map<string, BranchLabelResourceType[]>;\r\n\r\n    get fileMapData(): Map<string, LabelResourceType[]> {\r\n        return this._fileMapData;\r\n    }\r\n\r\n    get labelNameMapData(): Map<string, LabelResourceType[]> {\r\n        return this._labelNameMapData;\r\n    }\r\n\r\n    get branchLabelFileMapData(): Map<string, BranchLabelResourceType[]> {\r\n        return this._branchLabelFileMapData;\r\n    }\r\n\r\n    constructor() {\r\n        this._fileMapData = new Map();\r\n        this._labelNameMapData = new Map();\r\n        this._branchLabelFileMapData = new Map();\r\n    }\r\n\r\n    private labelEquals(a: LabelResourceType, b: LabelResourceType): boolean {\r\n        return getFileId(a.uri) === getFileId(b.uri)\r\n            && a.position.isEqual(b.position)\r\n            && a.value.name === b.value.name\r\n            && a.value.comment === b.value.comment\r\n            && a.value.isExternal === b.value.isExternal;\r\n    }\r\n\r\n    private push(label: LabelResourceType, mode?: \"filenameOnly\" | \"labelNameOnly\"): void {\r\n        if (mode === undefined || mode === \"filenameOnly\") {\r\n            const labelFileUri = getFileId(label.uri);\r\n            const filenameMap = this._fileMapData.get(labelFileUri);\r\n            if (filenameMap) filenameMap.push(label);\r\n            else this._fileMapData.set(labelFileUri, [label]);\r\n        }\r\n\r\n        if (mode === undefined || mode === \"labelNameOnly\") {\r\n            const labelName = label.value.name;\r\n            const labelNameMap = this._labelNameMapData.get(labelName);\r\n            if (labelNameMap) labelNameMap.push(label);\r\n            else this._labelNameMapData.set(labelName, [label]);\r\n        }\r\n    }\r\n\r\n    private remove(label: LabelResourceType, mode?: \"filenameOnly\" | \"labelNameOnly\"): void {\r\n        if (mode === undefined || mode === \"filenameOnly\") {\r\n            const labelFileUri = getFileId(label.uri);\r\n            const filenameMap = this._fileMapData.get(labelFileUri);\r\n            if (filenameMap) {\r\n                filenameMap.splice(filenameMap.indexOf(label), 1);\r\n                if (filenameMap.length === 0) this._fileMapData.delete(labelFileUri);\r\n            }\r\n        }\r\n\r\n        if (mode === undefined || mode === \"labelNameOnly\") {\r\n            const labelName = label.value.name;\r\n            const labelNameMap = this._labelNameMapData.get(labelName);\r\n            if (labelNameMap) {\r\n                labelNameMap.splice(labelNameMap.indexOf(label), 1);\r\n                if (labelNameMap.length === 0) this._labelNameMapData.delete(labelName);\r\n            }\r\n        }\r\n\r\n        const { name, isExternal } = label.value;\r\n\r\n        if (isExternal) {\r\n            const nameMap = this._labelNameMapData.get(name);\r\n            label.value.exists = nameMap ? nameMap.some(l => !l.value.isExternal) : false;\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this._fileMapData.clear();\r\n        this._labelNameMapData.clear();\r\n    }\r\n\r\n    public setLabelsOfUri(uri: Uri, labels: LabelResourceType[]): void {\r\n        if (labels.length === 0) {\r\n            this.removeLabelsOfUri(uri);\r\n            return;\r\n        }\r\n\r\n        const fileUri = getFileId(uri);\r\n        const existingLabels = this._fileMapData.get(fileUri);\r\n        if (!existingLabels) {\r\n            this._fileMapData.set(fileUri, labels);\r\n            labels.forEach(data => this.push(data, \"labelNameOnly\"));\r\n            return;\r\n        }\r\n\r\n        const newLabels: LabelResourceType[] = [];\r\n        const sameLabels: LabelResourceType[] = [];\r\n\r\n        labels.forEach(newLabel => {\r\n            const existsLabel = existingLabels.find(existingLabel => this.labelEquals(existingLabel, newLabel));\r\n            if (existsLabel) sameLabels.push(existsLabel);\r\n            else newLabels.push(newLabel);\r\n        });\r\n\r\n        const toRemoveLabels: LabelResourceType[] = existingLabels.filter(existingLabel => !sameLabels.includes(existingLabel));\r\n        toRemoveLabels.forEach(data => this.remove(data, \"labelNameOnly\"));\r\n        newLabels.forEach(data => this.push(data, \"labelNameOnly\"));\r\n\r\n        this._fileMapData.set(fileUri, [...sameLabels, ...newLabels]);\r\n    }\r\n\r\n    public setBranchLabelsOfUri(uri: Uri, labels: BranchLabelResourceType[]): void {\r\n        const fileUri = getFileId(uri);\r\n        this._branchLabelFileMapData.set(fileUri, labels);\r\n    }\r\n\r\n    public removeLabelsOfUri(uri: Uri): void {\r\n        const fileUri = getFileId(uri);\r\n        this._branchLabelFileMapData.delete(fileUri);\r\n\r\n        const existingLabels = this._fileMapData.get(fileUri);\r\n        if (!existingLabels) return;\r\n\r\n        this._fileMapData.delete(fileUri);\r\n        existingLabels.forEach(data => this.remove(data, \"labelNameOnly\"));\r\n\r\n        this.updateExternalLabelsExistence();\r\n    }\r\n\r\n    public updateExternalLabelsOfFileExistence(uri: Uri): void {\r\n        const fileUri = getFileId(uri);\r\n\r\n        this._fileMapData.get(fileUri)?.forEach(label => {\r\n            label.value.exists = this._labelNameMapData.get(label.value.name)?.some(l => !l.value.isExternal) ?? false;\r\n        });\r\n    }\r\n\r\n    public updateExternalLabelsExistence(): void {\r\n        this._labelNameMapData.forEach(labels => labels.filter(label => label.value.isExternal).forEach(label => {\r\n            label.value.exists = labels.some(l => !l.value.isExternal);\r\n        }));\r\n    }\r\n}\r\n\r\nexport const labelManager = new DataManager();\r\n", "import { CompletionItem, CompletionItemKind, MarkdownString, TextDocument } from \"vscode\";\r\n\r\nimport { getFileId } from \"@/utils/getFileId\";\r\nimport { variableManager } from \"./data\";\r\nimport { includeManager } from \"../include/data\";\r\n\r\nexport function getVariableCompletions(document: TextDocument): CompletionItem[] {\r\n    const fileUri = getFileId(document.uri);\r\n\r\n    const includeFiles = includeManager.recursiveIncludeMapData.get(fileUri);\r\n    if (!includeFiles) return [];\r\n\r\n    const includedVariables: CompletionItem[] = [];\r\n    includeFiles.forEach(includeUri => {\r\n        variableManager.fileMapDefineData.get(includeUri)?.forEach(({ position, value: { value, comment } }, name) => {\r\n            const item = new CompletionItem(name, CompletionItemKind.Variable);\r\n\r\n            item.insertText = name;\r\n            item.detail = `(variable) ${value}`;\r\n            item.documentation = new MarkdownString(`Define in \\`${includeUri}:${position.line}\\`\\n\\n${comment || \"\"}`);\r\n\r\n            includedVariables.push(item);\r\n        });\r\n    });\r\n\r\n    return includedVariables;\r\n}\r\n", "import { Uri } from \"vscode\";\r\n\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nimport { IncludeDataType, IncludeResourceType } from \"./types/include\";\r\n\r\nclass DataManager {\r\n    private _fileMapData: Map<string, IncludeResourceType>;\r\n    private _recursiveIncludeMapData: Map<string, Set<string>>;\r\n    private _referencesCallbacks: Set<(uri: Uri) => void>;\r\n\r\n    get fileMapData(): Map<string, IncludeResourceType> {\r\n        return this._fileMapData;\r\n    }\r\n\r\n    get recursiveIncludeMapData(): Map<string, Set<string>> {\r\n        return this._recursiveIncludeMapData;\r\n    }\r\n\r\n    constructor() {\r\n        this._fileMapData = new Map();\r\n        this._recursiveIncludeMapData = new Map();\r\n        this._referencesCallbacks = new Set();\r\n    }\r\n\r\n    private referenceRefresh(modifyInclude: IncludeResourceType): void {\r\n        const uris = Array.from(modifyInclude.value.referencedBy).map(uri => {\r\n            const includeData = this._fileMapData.get(uri);\r\n            return includeData && includeData.uri;\r\n        }).filter(uri => uri !== undefined);\r\n\r\n        if (this._fileMapData.has(getFileId(modifyInclude.uri))) {\r\n            uris.push(modifyInclude.uri);\r\n        }\r\n\r\n        uris.forEach(uri => this._referencesCallbacks.forEach(\r\n            callback => callback(uri)\r\n        ));\r\n    }\r\n\r\n    public addReferencesRefreshCallback(callback: (uri: Uri) => void): void {\r\n        this._referencesCallbacks.add(callback);\r\n    }\r\n\r\n    private push(include: IncludeResourceType): void {\r\n        const fileUri = getFileId(include.uri);\r\n\r\n        this._fileMapData.set(fileUri, include);\r\n        include.value.includes.forEach(includedFileUri => {\r\n            const includedFileData = this._fileMapData.get(includedFileUri);\r\n            if (!includedFileData) return;\r\n\r\n            includedFileData.value.referencedBy.add(fileUri);\r\n        });\r\n\r\n        // Update recursive includes relationships\r\n        this._recursiveIncludeMapData.set(\r\n            fileUri,\r\n            this.getRecursiveIncludesOfUri(include.uri)\r\n        );\r\n        include.value.referencedBy.forEach(referencingFileUri => {\r\n            const referencingIncludeData = this._fileMapData.get(referencingFileUri);\r\n            if (!referencingIncludeData) return;\r\n\r\n            this._recursiveIncludeMapData.set(\r\n                referencingFileUri,\r\n                this.getRecursiveIncludesOfUri(referencingIncludeData.uri)\r\n            );\r\n        });\r\n\r\n        this.referenceRefresh(include);\r\n    }\r\n\r\n    private remove(include: IncludeResourceType): void {\r\n        const fileUri = getFileId(include.uri);\r\n\r\n        const includeData = this._fileMapData.get(fileUri);\r\n        if (!includeData) return;\r\n\r\n        this._fileMapData.delete(fileUri);\r\n        includeData.value.includes.forEach(includedFileUri => {\r\n            const includedFileData = this._fileMapData.get(includedFileUri);\r\n            if (!includedFileData) return;\r\n\r\n            includedFileData.value.referencedBy.delete(fileUri);\r\n        });\r\n\r\n        this._recursiveIncludeMapData.delete(fileUri);\r\n        includeData.value.referencedBy.forEach(referencingFileUri => {\r\n            const referencingIncludeData = this._fileMapData.get(referencingFileUri);\r\n            if (!referencingIncludeData) return;\r\n\r\n            referencingIncludeData.value.includes.delete(fileUri);\r\n            this._recursiveIncludeMapData.set(\r\n                referencingFileUri,\r\n                this.getRecursiveIncludesOfUri(referencingIncludeData.uri)\r\n            );\r\n        });\r\n\r\n        this.referenceRefresh(include);\r\n    }\r\n\r\n    public clear(): void {\r\n        this._fileMapData.clear();\r\n    }\r\n\r\n    public setIncludeOfUri(uri: Uri, include: IncludeResourceType): void {\r\n        const fileUri = getFileId(uri);\r\n        const oldIncludeData = this._fileMapData.get(fileUri);\r\n\r\n        if (oldIncludeData) {\r\n            include.value.referencedBy = oldIncludeData.value.referencedBy;\r\n\r\n            [...oldIncludeData.value.includes].filter(x => !include.value.includes.has(x)).forEach(includedFileUri => {\r\n                const includedFileData = this._fileMapData.get(includedFileUri);\r\n                if (!includedFileData) return;\r\n                includedFileData.value.referencedBy.delete(fileUri);\r\n            });\r\n        }\r\n\r\n        this.push(include);\r\n    }\r\n\r\n    public removeIncludeOfUri(uri: Uri): void {\r\n        const fileUri = getFileId(uri);\r\n        const existInclude = this._fileMapData.get(fileUri);\r\n        if (!existInclude) return;\r\n\r\n        this.remove(existInclude);\r\n    }\r\n\r\n    public updateReferences(): void {\r\n        this._fileMapData.forEach((includeData, fileUri) => {\r\n            includeData.value.includes.forEach(includedFileUri => {\r\n                const includedFileData = this._fileMapData.get(includedFileUri);\r\n                if (!includedFileData) return;\r\n                includedFileData.value.referencedBy.add(fileUri);\r\n            });\r\n        });\r\n\r\n        this._fileMapData.forEach((includeData, fileUri) => {\r\n            const recursiveIncludes = this.getRecursiveIncludesOfUri(includeData.uri);\r\n            this._recursiveIncludeMapData.set(fileUri, recursiveIncludes);\r\n        });\r\n    }\r\n\r\n    private getRecursiveIncludesOfUri(uri: Uri, results?: Set<string>): Set<string> {\r\n        const fileUri = getFileId(uri);\r\n        if (results === undefined) results = new Set([fileUri]);\r\n\r\n        const includeData = this._fileMapData.get(fileUri);\r\n        if (!includeData) return results;\r\n\r\n        includeData.value.includes.forEach(fileUri => {\r\n            if (results.has(fileUri)) return;\r\n            results.add(fileUri);\r\n\r\n            const includeData = this._fileMapData.get(fileUri);\r\n            if (!includeData) return;\r\n\r\n            this.getRecursiveIncludesOfUri(includeData.uri, results);\r\n        });\r\n\r\n        return results;\r\n    }\r\n}\r\n\r\nexport const includeManager = new DataManager();\r\n", "import { Uri } from \"vscode\";\r\n\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nimport { VariableDefineResourceType } from \"./types/variableDefine\";\r\nimport { VariableResourceType } from \"./types/variable\";\r\nimport { includeManager } from \"../include/data\";\r\n\r\nclass DataManager {\r\n    private _fileMapDefineData: Map<string, Map<string, VariableDefineResourceType>>;\r\n    private _fileMapUsageData: Map<string, VariableResourceType[]>;\r\n\r\n    get fileMapDefineData(): Map<string, Map<string, VariableDefineResourceType>> {\r\n        return this._fileMapDefineData;\r\n    }\r\n\r\n    get fileMapUsageData(): Map<string, VariableResourceType[]> {\r\n        return this._fileMapUsageData;\r\n    }\r\n\r\n    constructor() {\r\n        this._fileMapDefineData = new Map();\r\n        this._fileMapUsageData = new Map();\r\n    }\r\n\r\n    private push(variable: VariableDefineResourceType): void {\r\n        const { uri, value: { name } } = variable;\r\n        const fileUri = getFileId(uri);\r\n\r\n        const nameMap = this._fileMapDefineData.get(fileUri) ?? this._fileMapDefineData.set(fileUri, new Map()).get(fileUri);\r\n        nameMap!.set(name, variable);\r\n    }\r\n\r\n    public clear(): void {\r\n        this._fileMapDefineData.clear();\r\n    }\r\n\r\n    public setDefineVariablesOfUri(uri: Uri, variables: VariableDefineResourceType[]): void {\r\n        if (variables.length === 0) {\r\n            this.removeDefineVariablesOfUri(uri);\r\n            return;\r\n        }\r\n\r\n        variables.forEach(variable => this.push(variable));\r\n    }\r\n\r\n    public removeDefineVariablesOfUri(uri: Uri): void {\r\n        const fileUri = getFileId(uri);\r\n\r\n        this._fileMapDefineData.delete(fileUri);\r\n    }\r\n\r\n    public setUsageVariablesOfUri(uri: Uri, variables: VariableResourceType[]): void {\r\n        const fileUri = getFileId(uri);\r\n\r\n        this._fileMapUsageData.set(fileUri, variables);\r\n        this.refreshUsageVariablesExistsOfUri(uri);\r\n    }\r\n\r\n    public removeUsageVariablesOfUri(uri: Uri): void {\r\n        const fileUri = getFileId(uri);\r\n\r\n        this._fileMapUsageData.delete(fileUri);\r\n    }\r\n\r\n    public refreshUsageVariablesExistsOfUri(uri: Uri): void {\r\n        const fileUri = getFileId(uri);\r\n\r\n        const variables = this._fileMapUsageData.get(fileUri);\r\n        if (!variables) return;\r\n\r\n        const includedVariables: VariableDefineResourceType[] = [];\r\n        includeManager.recursiveIncludeMapData.get(fileUri)?.forEach(includeUri => {\r\n            const variables = this._fileMapDefineData.get(includeUri);\r\n\r\n            if (variables) includedVariables.push(...Array.from(variables.values()));\r\n        });\r\n\r\n        variables.forEach(variable => {\r\n            variable.value.exists = includedVariables.some(v => v.value.name === variable.value.name);\r\n        });\r\n    }\r\n\r\n    public refreshAllUsageVariablesExists(): void {\r\n        this._fileMapUsageData.forEach((data) => {\r\n            if (data.length === 0) return;\r\n            this.refreshUsageVariablesExistsOfUri(data[0].uri);\r\n        });\r\n    }\r\n}\r\n\r\nexport const variableManager = new DataManager();\r\n", "import { ExtensionContext, TextDocument, Uri, workspace } from \"vscode\";\r\n\r\nimport { FILE_GLOBS, getWorkspaceFileUris } from \"@/config\";\r\nimport { scheduleWork } from \"@/utils/scheduleWork\";\r\n\r\n// import { removeFileVariables, scheduleIndexFileVariables, scheduleIndexWorkspaceVariables } from \"@/resource/variable\";\r\n// import { removeFileIncludes, scheduleIndexFileIncludes, scheduleIndexWorkspaceIncludes } from \"@/resource/includes\";\r\nimport {\r\n    analyzeLabelsOfDocument,\r\n    analyzeLabelsOfWorkspace,\r\n    removeLabelsOfDocument\r\n} from \"@/resource/label/analyze\";\r\nimport {\r\n    resetCompletionCache\r\n} from \"@/resource/label/completion\";\r\nimport {\r\n    semanticTokensProvider\r\n} from \"@/semantic\";\r\nimport { analyzeIncludesOfDocument, analyzeIncludesOfWorkspace, removeIncludesOfDocument } from \"@/resource/include/analyze\";\r\nimport { analyzeVariablesOfDocument, analyzeVariablesOfWorkspace, removeVariablesOfDocument } from \"@/resource/variable/analyze\";\r\nimport { includeManager } from \"@/resource/include/data\";\r\nimport { variableManager } from \"@/resource/variable/data\";\r\n\r\n\r\nexport function initFileSystemWatcher(context: ExtensionContext) {\r\n    const {\r\n        subscriptions\r\n    } = context;\r\n\r\n    const updateWorkspaceIndex = async () => {\r\n        const uris = await getWorkspaceFileUris();\r\n        const documents: TextDocument[] = await Promise.all(uris.map(async uri => {\r\n            return await workspace.openTextDocument(uri);\r\n        }));\r\n\r\n        scheduleWork(\"indexWorkspace\", async () => {\r\n            analyzeLabelsOfWorkspace(documents);\r\n            analyzeIncludesOfWorkspace(documents);\r\n            analyzeVariablesOfWorkspace(documents);\r\n\r\n            includeManager.addReferencesRefreshCallback(uri => {\r\n                variableManager.refreshUsageVariablesExistsOfUri(uri);\r\n            })\r\n        }, 200);\r\n\r\n    }\r\n    updateWorkspaceIndex();\r\n\r\n    const watcher = workspace.createFileSystemWatcher(FILE_GLOBS);\r\n    const updateFunc = async (uri: Uri) => {\r\n        let doc: TextDocument;\r\n        try { doc = await workspace.openTextDocument(uri); }\r\n        catch { return; }\r\n\r\n        analyzeLabelsOfDocument(doc);\r\n        analyzeIncludesOfDocument(doc);\r\n        analyzeVariablesOfDocument(doc);\r\n    }\r\n    watcher.onDidChange(updateFunc);\r\n    watcher.onDidDelete(uri => {\r\n        removeLabelsOfDocument(uri);\r\n        removeIncludesOfDocument(uri);\r\n        removeVariablesOfDocument(uri);\r\n\r\n        resetCompletionCache();\r\n\r\n        semanticTokensProvider.clearCacheForUri(uri);\r\n    });\r\n\r\n    subscriptions.push(watcher);\r\n}\r\n// function scheduleIndexWorkspaceIncludes(documents: TextDocument[], arg1: number, arg2: () => Promise<void>) {\r\n//     throw new Error(\"Function not implemented.\");\r\n// }\r\n\r\n", "import { Uri, workspace } from \"vscode\";\r\n\r\nconst DEFAULT_EXCLUDE_FILES = [\r\n    \"**/node_modules/**\",\r\n    \"**/build/**\",\r\n    \"**/.vscode/**\",\r\n    \"**/.git/**\",\r\n    \"**/nbproject/**\",\r\n    \"**/dist/**\",\r\n    \"**/debug/**\",\r\n    \"**/_build/**\",\r\n    \"**/cmake/**\",\r\n    \"**/out/**\",\r\n];\r\n\r\nexport const EXCLUDE_FILES = DEFAULT_EXCLUDE_FILES;\r\n\r\nexport const FILE_GLOBS = `**/*.{asm,as,s,inc}`;\r\n\r\nexport async function getWorkspaceFileUris(): Promise<Uri[]> {\r\n    return await workspace.findFiles(\r\n        FILE_GLOBS,\r\n        `{${EXCLUDE_FILES.join(\",\")}}`\r\n    );\r\n}\r\n", "const debounceTimerMap = new Map<string, NodeJS.Timeout>();\r\n\r\nexport function scheduleWork(\r\n    key: string,\r\n    work: () => any,\r\n    delay: number = 200\r\n): void {\r\n    if (debounceTimerMap.has(key)) clearTimeout(debounceTimerMap.get(key)!);\r\n\r\n    const timer = setTimeout(() => {\r\n        work();\r\n        debounceTimerMap.delete(key);\r\n    }, delay);\r\n    debounceTimerMap.set(key, timer);\r\n}\r\n", "import { Position, Range, TextDocument, Uri } from \"vscode\";\r\n\r\nimport { ResourceData, ResourceDataType } from \"@/resource/types\";\r\nimport { getFileId } from \"@/utils/getFileId\";\r\nimport { scheduleWork } from \"@/utils/scheduleWork\";\r\n\r\nimport { labelManager } from \"./data\";\r\nimport { updateLabelDiagnostics } from \"./diagnostic\";\r\nimport { LabelData, LabelResourceType } from \"./types/label\";\r\nimport { BaseLabelDataType } from \"./types/base\";\r\nimport { BranchLabelData } from \"./types/branchLabel\";\r\nimport { refreshSemanticTokensFuncGenerator } from \"@/semantic\";\r\n\r\nexport const labelRegex = /^[ \\t]*([A-Za-z_\\?][\\dA-Za-z_\\?\\$]*):(?:.*;[ \\t]*([^\\n]+))?/gm;\r\nexport const externalLabelRegex = /^[ \\t]*(?:extrn|global)[ \\t]+([A-Za-z_\\?][\\dA-Za-z_\\?\\$]*)(?:$|[, \\t;])/gmi;\r\nexport const labelBehindBranchRegex = /^[ \\t]*(?:CALL|RCALL|GOTO|BRA|BC|BNC|BN|BNN|BZ|BNZ|BOV|BNOV)[ \\t]+([A-Za-z_\\?][\\dA-Za-z_\\?\\$]*)(?:$|[, \\t;])/gmi;\r\n\r\nexport const externalLabelsMap: Map<string, Set<string>> = new Map();\r\n\r\nexport let lastLabelAnalysisTimestamp: number = 0;\r\n\r\nfunction callbackAfterAnalysis(delay: number = 100): void {\r\n    lastLabelAnalysisTimestamp = Date.now();\r\n    scheduleWork(\r\n        \"diagnostics.updateLabels\",\r\n        () => updateLabelDiagnostics(),\r\n        delay\r\n    );\r\n    scheduleWork(\r\n        \"semantic.refreshLabels\",\r\n        refreshSemanticTokensFuncGenerator(\"label\"),\r\n        delay + 10\r\n    );\r\n}\r\n\r\nfunction matchLabelsInText<T extends BaseLabelDataType>(\r\n    text: string,\r\n    document: TextDocument,\r\n    matchRegex: RegExp,\r\n    valueFactory: (props: Readonly<{\r\n        name: string;\r\n        comment?: string;\r\n    }>) => T,\r\n    parseCallback?: (props: Readonly<{\r\n        name: string;\r\n        comment?: string;\r\n        position: Position;\r\n        match: RegExpMatchArray;\r\n    }>) => any\r\n): ResourceDataType<T>[] {\r\n    return [...text.matchAll(matchRegex)].map(m => {\r\n        const labelName = m[1];\r\n        const labelComment = m[2];\r\n        const labelPosition = document.positionAt(m.index + m[0].indexOf(m[1]));\r\n        parseCallback?.({\r\n            name: labelName,\r\n            comment: labelComment,\r\n            position: labelPosition,\r\n            match: m\r\n        });\r\n\r\n        return new ResourceData<T>({\r\n            value: valueFactory({ name: labelName, comment: labelComment }),\r\n            uri: document.uri,\r\n            position: labelPosition,\r\n            range: new Range(labelPosition, labelPosition.translate(0, labelName.length))\r\n        });\r\n    });\r\n}\r\n\r\nexport function analyzeLabelsOfDocument(document: TextDocument): void {\r\n    const fileUri = getFileId(document.uri);\r\n    const text = document.getText();\r\n    const currentFileLabelNames: Set<string> = new Set();\r\n\r\n    // Match the labels defined in the current file\r\n    const currentFileDefineLabel: LabelResourceType[] = matchLabelsInText(\r\n        text, document, labelRegex,\r\n        ({ name, comment }) => new LabelData({\r\n            name: name,\r\n            comment: comment ?? \"\",\r\n            isExternal: false,\r\n        }),\r\n        ({ name }) => currentFileLabelNames.add(name)\r\n    );\r\n\r\n    // Initialize or clear external labels for this file\r\n    if (externalLabelsMap.has(fileUri)) externalLabelsMap.get(fileUri)!.clear();\r\n    else externalLabelsMap.set(fileUri, new Set<string>());\r\n    const externalLabelNames = externalLabelsMap.get(fileUri)!;\r\n\r\n    // Match the external labels in the current file\r\n    const externalLabels: LabelResourceType[] = matchLabelsInText(\r\n        text, document, externalLabelRegex,\r\n        ({ name, comment }) => new LabelData({\r\n            name: name,\r\n            comment: comment ?? \"\",\r\n            isExternal: true\r\n        }),\r\n        ({ name }) => {\r\n            externalLabelNames.add(name);\r\n            currentFileLabelNames.add(name);\r\n        }\r\n    )\r\n\r\n    // Update the label manager with the combined labels\r\n    labelManager.setLabelsOfUri(document.uri, [\r\n        ...currentFileDefineLabel,\r\n        ...externalLabels\r\n    ]);\r\n\r\n    // Match the labels used in branch instructions\r\n    labelManager.setBranchLabelsOfUri(document.uri, matchLabelsInText(\r\n        text, document, labelBehindBranchRegex,\r\n        ({ name, comment }) => new BranchLabelData({\r\n            name: name,\r\n            comment: comment ?? \"\",\r\n            missing: !currentFileLabelNames.has(name)\r\n        })\r\n    ));\r\n\r\n    // Schedule diagnostic update\r\n    callbackAfterAnalysis();\r\n\r\n    // Update external labels existence for this file\r\n    labelManager.updateExternalLabelsOfFileExistence(document.uri);\r\n}\r\n\r\nexport function analyzeLabelsOfWorkspace(documents: TextDocument[]): void {\r\n    labelManager.clear();\r\n    documents.forEach(doc => analyzeLabelsOfDocument(doc));\r\n\r\n    labelManager.updateExternalLabelsExistence();\r\n\r\n    callbackAfterAnalysis();\r\n}\r\n\r\nexport function removeLabelsOfDocument(uri: Uri): void {\r\n    labelManager.removeLabelsOfUri(uri);\r\n\r\n    callbackAfterAnalysis();\r\n}\r\n", "import { Location, Position, Range, Uri } from \"vscode\";\r\n\r\nexport type ResourceDataType<T> = {\r\n    value: T;\r\n    uri: Uri;\r\n    position: Position;\r\n    range: Range;\r\n}\r\n\r\nexport class ResourceData<T> implements ResourceDataType<T> {\r\n    public readonly value: Readonly<T>;\r\n    public readonly uri: Readonly<Uri>;\r\n    public readonly position: Readonly<Position>;\r\n    public readonly range: Readonly<Range>;\r\n\r\n    constructor(props: Readonly<{\r\n        value: T;\r\n        uri: Uri;\r\n        position: Position;\r\n        range?: Range;\r\n    }>) {\r\n        const { value, uri, position, range } = props;\r\n\r\n        this.value = value;\r\n        this.uri = uri;\r\n        this.position = position;\r\n        this.range = range ?? new Range(position, position);\r\n    }\r\n}\r\n", "import { Diagnostic, DiagnosticCollection, DiagnosticSeverity, languages, Uri } from \"vscode\";\r\n\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nimport { labelManager } from \"./data\";\r\nimport { LabelResourceType } from \"./types/label\";\r\n\r\nconst labelCollections: DiagnosticCollection = languages.createDiagnosticCollection(\"pic18-asm-labels\");\r\n\r\nexport function updateLabelDiagnostics(): void {\r\n    labelCollections.clear();\r\n    const diagnosticsMap: Map<string, {\r\n        uri: Uri;\r\n        diagnostics: Diagnostic[]\r\n    }> = new Map();\r\n\r\n    const pushDiagnostic = (uri: Uri, diagnostic: Diagnostic) => {\r\n        const fileUri = getFileId(uri);\r\n        if (diagnosticsMap.has(fileUri)) diagnosticsMap.get(fileUri)!.diagnostics.push(diagnostic);\r\n        else diagnosticsMap.set(fileUri, {\r\n            uri: uri,\r\n            diagnostics: [diagnostic]\r\n        });\r\n    }\r\n\r\n    labelManager.labelNameMapData.forEach((labels, labelName) => {\r\n        const definedLabel: LabelResourceType[] = [];\r\n        labels.forEach(label => {\r\n            if (!label.value.isExternal) {\r\n                definedLabel.push(label);\r\n                return;\r\n            }\r\n\r\n            if (label.value.exists) return;\r\n\r\n            pushDiagnostic(\r\n                label.uri,\r\n                new Diagnostic(\r\n                    label.range, `Undefined external label '${labelName}'`,\r\n                    DiagnosticSeverity.Error\r\n                )\r\n            )\r\n        });\r\n\r\n        if (definedLabel.length > 1) {\r\n            definedLabel.forEach(({ uri, range }) => pushDiagnostic(\r\n                uri,\r\n                new Diagnostic(\r\n                    range, `Duplicate label '${labelName}'`,\r\n                    DiagnosticSeverity.Error\r\n                )\r\n            ));\r\n        }\r\n    });\r\n\r\n    labelManager.branchLabelFileMapData.forEach(labels => labels.forEach(({\r\n        uri,\r\n        range,\r\n        value: { name, missing }\r\n    }) => {\r\n        if (!missing) return;\r\n\r\n        pushDiagnostic(uri, new Diagnostic(\r\n            range, `Unknow branch label '${name}'`,\r\n            DiagnosticSeverity.Error\r\n        ));\r\n    }));\r\n\r\n    diagnosticsMap.forEach(({ uri, diagnostics }) => labelCollections.set(uri, diagnostics));\r\n}", "import { ResourceData, ResourceDataType } from \"@/resource/types\";\r\n\r\nexport type BaseLabelDataType = {\r\n    name: Readonly<string>;\r\n    comment?: Readonly<string>\r\n};\r\n\r\nexport type BaseLabelResourceType = ResourceDataType<BaseLabelDataType>;\r\n\r\nexport type BaseLabelDataProps = Readonly<BaseLabelDataType>;\r\nexport class BaseLabelData implements BaseLabelDataType {\r\n    public readonly name: Readonly<string>;\r\n    public readonly comment?: Readonly<string>;\r\n\r\n    constructor(props: BaseLabelDataProps) {\r\n        const { name, comment } = props;\r\n\r\n        this.name = name;\r\n        this.comment = comment;\r\n    }\r\n}\r\n\r\nexport class BaseLabelResource extends ResourceData<BaseLabelDataType> { };\r\n", "import { ResourceData, ResourceDataType } from \"@/resource/types\";\r\n\r\nimport { BaseLabelData, BaseLabelDataProps, BaseLabelDataType } from \"./base\";\r\n\r\nexport type LabelDataType = {\r\n    isExternal: Readonly<boolean>;\r\n    exists: boolean;\r\n} & BaseLabelDataType;\r\nexport type LabelResourceType = ResourceDataType<LabelDataType>;\r\n\r\nexport class LabelData extends BaseLabelData implements LabelDataType {\r\n    public readonly isExternal: Readonly<boolean>;\r\n    public exists: Readonly<boolean>;\r\n\r\n    constructor(props: Readonly<{\r\n        isExternal: boolean;\r\n        exists?: boolean;\r\n    }> & BaseLabelDataProps) {\r\n        super(props);\r\n        const { isExternal, exists } = props;\r\n\r\n        this.isExternal = isExternal;\r\n        this.exists = exists === undefined ? !isExternal : exists;\r\n    }\r\n}\r\n\r\nexport class LabelResource extends ResourceData<LabelDataType> { };\r\n", "import { ResourceData, ResourceDataType } from \"@/resource/types\";\r\n\r\nimport { BaseLabelData, BaseLabelDataProps, BaseLabelDataType } from \"./base\";\r\n\r\nexport type BranchLabelDataType = {\r\n    missing: Readonly<boolean>;\r\n} & BaseLabelDataType;\r\n\r\nexport type BranchLabelResourceType = ResourceDataType<BranchLabelDataType>;\r\n\r\nexport class BranchLabelData extends BaseLabelData implements BranchLabelDataType {\r\n    public readonly missing: Readonly<boolean>;\r\n\r\n    constructor(props: Readonly<{\r\n        missing: boolean;\r\n    }> & BaseLabelDataProps) {\r\n        super(props);\r\n        const { missing } = props;\r\n\r\n        this.missing = missing;\r\n    }\r\n}\r\n\r\nexport class BranchLabelResource extends ResourceData<BranchLabelDataType> { };\r\n", "import {\r\n    CancellationToken,\r\n    DocumentSemanticTokensProvider,\r\n    ExtensionContext,\r\n    Event,\r\n    EventEmitter,\r\n    languages,\r\n    ProviderResult,\r\n    SemanticTokens,\r\n    SemanticTokensBuilder,\r\n    SemanticTokensLegend,\r\n    TextDocument,\r\n    Range,\r\n    Uri,\r\n} from \"vscode\";\r\n\r\nimport { scheduleWork } from \"@/utils/scheduleWork\";\r\n\r\nimport { getLabelRanges } from \"./module/label\";\r\nimport { getVariableRanges } from \"./module/variable\";\r\nimport { getFileId } from \"@/utils/getFileId\";\r\nimport { LRUCache } from \"lru-cache\";\r\n\r\ntype DispatcherType = \"label\" | \"variable\";\r\nconst dispatcherTypeMap: { [key in DispatcherType]: string } = {\r\n    label: \"function\",\r\n    variable: \"variable\",\r\n};\r\nconst allDispatchers = new Set(Object.keys(dispatcherTypeMap) as DispatcherType[]);\r\n\r\n// Limit cached resources to avoid unbounded memory growth. Keep a modest max entries.\r\nconst cachedResources: LRUCache<string, Map<DispatcherType, [Range, string][]>> = new LRUCache({ max: 200 });\r\nconst funcMap: { [key in DispatcherType]: (document: TextDocument) => Range[] } = {\r\n    label: getLabelRanges,\r\n    variable: getVariableRanges,\r\n};\r\n\r\nexport class CustomSemanticProvider implements DocumentSemanticTokensProvider {\r\n    private _onDidChange = new EventEmitter<void>();\r\n    private dispatchers: Set<DispatcherType> = new Set();\r\n\r\n    public readonly onDidChangeSemanticTokens: Event<void> = this._onDidChange.event;\r\n\r\n    public provideDocumentSemanticTokens(\r\n        document: TextDocument,\r\n        token: CancellationToken\r\n    ): ProviderResult<SemanticTokens> {\r\n        const fileUri = getFileId(document.uri);\r\n        const builder = new SemanticTokensBuilder(legend);\r\n        const dispatchers = this.dispatchers.size === 0 ? allDispatchers : this.dispatchers;\r\n\r\n        let cacheMap = cachedResources.get(fileUri);\r\n        if (!cacheMap) {\r\n            cacheMap = new Map<DispatcherType, [Range, string][]>();\r\n            cachedResources.set(fileUri, cacheMap);\r\n        }\r\n        const results: [Range, string][] = [];\r\n        for (const dispatcher of allDispatchers) {\r\n            if (dispatchers.has(dispatcher) || !cacheMap.has(dispatcher)) {\r\n                const rangePairs = funcMap[dispatcher](document).map(r => [r, dispatcherTypeMap[dispatcher]] as [Range, string]);\r\n                cacheMap.set(dispatcher, rangePairs);\r\n\r\n                results.push(...rangePairs);\r\n            }\r\n            else {\r\n                results.push(...cacheMap.get(dispatcher)!);\r\n            }\r\n        }\r\n\r\n        results.forEach(r => builder.push(...r));\r\n        this.dispatchers.clear();\r\n\r\n        return builder.build();\r\n    }\r\n\r\n    public addDispatcher(dispatcher: DispatcherType) {\r\n        this.dispatchers.add(dispatcher);\r\n    }\r\n\r\n    public refresh(): void {\r\n        this._onDidChange.fire();\r\n    }\r\n\r\n    public clearCacheForUri(uri: Uri): void {\r\n        const fileUri = getFileId(uri);\r\n        cachedResources.delete(fileUri);\r\n    }\r\n}\r\n\r\nconst legend = new SemanticTokensLegend([\"function\", \"variable\"], []);\r\nconst provider = new CustomSemanticProvider();\r\n\r\nexport function initSemanticProvider(context: ExtensionContext) {\r\n    const {\r\n        subscriptions\r\n    } = context;\r\n\r\n    subscriptions.push(languages.registerDocumentSemanticTokensProvider(\r\n        { language: \"asm\" },\r\n        provider,\r\n        legend\r\n    ));\r\n}\r\n\r\nexport function refreshSemanticTokensFuncGenerator(dispatchor: DispatcherType): () => void {\r\n    provider.addDispatcher(dispatchor);\r\n\r\n    return () => provider.refresh();\r\n}\r\n\r\nexport const semanticTokensProvider = provider;\r\n", "import { Range, TextDocument } from \"vscode\";\r\n\r\nimport { labelManager } from \"@/resource/label/data\";\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nexport function getLabelRanges(document: TextDocument): Range[] {\r\n    const fileUri = getFileId(document.uri);\r\n\r\n    const branchLabelRanges = labelManager.branchLabelFileMapData.get(fileUri)?.filter(\r\n        l => !l.value.missing\r\n    ).map(l => l.range) ?? [];\r\n    const externalLabelRanges = labelManager.fileMapData.get(fileUri)?.filter(\r\n        l => l.value.isExternal && l.value.exists\r\n    ).map(l => l.range) ?? [];\r\n\r\n    return [...branchLabelRanges, ...externalLabelRanges];\r\n}\r\n", "import { Range, TextDocument } from \"vscode\";\r\n\r\nimport { variableManager } from \"@/resource/variable/data\";\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nexport const variableRegexGenerator = (name: string, flag: string = \"gm\") => new RegExp(`(?:^|,|\\\\s+)(${name})(?:\\\\s+|,|$)`, flag);\r\n\r\nexport function getVariableRanges(document: TextDocument): Range[] {\r\n    const fileUri = getFileId(document.uri);\r\n\r\n    const usageDataRanges = Array.from(variableManager.fileMapUsageData.get(fileUri)?.values() ?? []).filter(\r\n        l => l.value.exists\r\n    ).map(l => l.range);\r\n\r\n    return usageDataRanges;\r\n}\r\n", "/**\n * @module LRUCache\n */\n\n// module-private names and types\n// this provides the default Perf object source.\n// it can be passed in via configuration to override it\n// for a single LRU object.\nexport type Perf = { now: () => number }\nconst defaultPerf: Perf =\n  (\n    typeof performance === 'object' &&\n    performance &&\n    typeof performance.now === 'function'\n  ) ?\n    performance\n  : Date\n\nconst warned = new Set<string>()\n\n// either a function or a class\ntype ForC = ((...a: any[]) => any) | { new (...a: any[]): any }\n\n/* c8 ignore start */\nconst PROCESS = (\n  typeof process === 'object' && !!process ?\n    process\n  : {}) as { [k: string]: any }\n/* c8 ignore start */\n\nconst emitWarning = (\n  msg: string,\n  type: string,\n  code: string,\n  fn: ForC,\n) => {\n  typeof PROCESS.emitWarning === 'function' ?\n    PROCESS.emitWarning(msg, type, code, fn)\n  : console.error(`[${code}] ${type}: ${msg}`)\n}\n\nlet AC = globalThis.AbortController\nlet AS = globalThis.AbortSignal\n\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n  //@ts-ignore\n  AS = class AbortSignal {\n    onabort?: (...a: any[]) => any\n    _onabort: ((...a: any[]) => any)[] = []\n    reason?: any\n    aborted: boolean = false\n    addEventListener(_: string, fn: (...a: any[]) => any) {\n      this._onabort.push(fn)\n    }\n  }\n  //@ts-ignore\n  AC = class AbortController {\n    constructor() {\n      warnACPolyfill()\n    }\n    signal = new AS()\n    abort(reason: any) {\n      if (this.signal.aborted) return\n      //@ts-ignore\n      this.signal.reason = reason\n      //@ts-ignore\n      this.signal.aborted = true\n      //@ts-ignore\n      for (const fn of this.signal._onabort) {\n        fn(reason)\n      }\n      this.signal.onabort?.(reason)\n    }\n  }\n  let printACPolyfillWarning =\n    PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'\n  const warnACPolyfill = () => {\n    if (!printACPolyfillWarning) return\n    printACPolyfillWarning = false\n    emitWarning(\n      'AbortController is not defined. If using lru-cache in ' +\n        'node 14, load an AbortController polyfill from the ' +\n        '`node-abort-controller` package. A minimal polyfill is ' +\n        'provided for use by LRUCache.fetch(), but it should not be ' +\n        'relied upon in other contexts (eg, passing it to other APIs that ' +\n        'use AbortController/AbortSignal might have undesirable effects). ' +\n        'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',\n      'NO_ABORT_CONTROLLER',\n      'ENOTSUP',\n      warnACPolyfill,\n    )\n  }\n}\n/* c8 ignore stop */\n\nconst shouldWarn = (code: string) => !warned.has(code)\n\nconst TYPE = Symbol('type')\nexport type PosInt = number & { [TYPE]: 'Positive Integer' }\nexport type Index = number & { [TYPE]: 'LRUCache Index' }\n\nconst isPosInt = (n: any): n is PosInt =>\n  n && n === Math.floor(n) && n > 0 && isFinite(n)\n\nexport type UintArray = Uint8Array | Uint16Array | Uint32Array\nexport type NumberArray = UintArray | number[]\n\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max: number) =>\n  !isPosInt(max) ? null\n  : max <= Math.pow(2, 8) ? Uint8Array\n  : max <= Math.pow(2, 16) ? Uint16Array\n  : max <= Math.pow(2, 32) ? Uint32Array\n  : max <= Number.MAX_SAFE_INTEGER ? ZeroArray\n  : null\n/* c8 ignore stop */\n\nclass ZeroArray extends Array<number> {\n  constructor(size: number) {\n    super(size)\n    this.fill(0)\n  }\n}\nexport type { ZeroArray }\nexport type { Stack }\n\nexport type StackLike = Stack | Index[]\nclass Stack {\n  heap: NumberArray\n  length: number\n  // private constructor\n  static #constructing: boolean = false\n  static create(max: number): StackLike {\n    const HeapCls = getUintArray(max)\n    if (!HeapCls) return []\n    Stack.#constructing = true\n    const s = new Stack(max, HeapCls)\n    Stack.#constructing = false\n    return s\n  }\n  constructor(\n    max: number,\n    HeapCls: { new (n: number): NumberArray },\n  ) {\n    /* c8 ignore start */\n    if (!Stack.#constructing) {\n      throw new TypeError('instantiate Stack using Stack.create(n)')\n    }\n    /* c8 ignore stop */\n    this.heap = new HeapCls(max)\n    this.length = 0\n  }\n  push(n: Index) {\n    this.heap[this.length++] = n\n  }\n  pop(): Index {\n    return this.heap[--this.length] as Index\n  }\n}\n\n/**\n * Promise representing an in-progress {@link LRUCache#fetch} call\n */\nexport type BackgroundFetch<V> = Promise<V | undefined> & {\n  __returned: BackgroundFetch<V> | undefined\n  __abortController: AbortController\n  __staleWhileFetching: V | undefined\n}\n\nexport type DisposeTask<K, V> = [\n  value: V,\n  key: K,\n  reason: LRUCache.DisposeReason,\n]\n\nexport namespace LRUCache {\n  /**\n   * An integer greater than 0, reflecting the calculated size of items\n   */\n  export type Size = number\n\n  /**\n   * Integer greater than 0, representing some number of milliseconds, or the\n   * time at which a TTL started counting from.\n   */\n  export type Milliseconds = number\n\n  /**\n   * An integer greater than 0, reflecting a number of items\n   */\n  export type Count = number\n\n  /**\n   * The reason why an item was removed from the cache, passed\n   * to the {@link Disposer} methods.\n   *\n   * - `evict`: The item was evicted because it is the least recently used,\n   *   and the cache is full.\n   * - `set`: A new value was set, overwriting the old value being disposed.\n   * - `delete`: The item was explicitly deleted, either by calling\n   *   {@link LRUCache#delete}, {@link LRUCache#clear}, or\n   *   {@link LRUCache#set} with an undefined value.\n   * - `expire`: The item was removed due to exceeding its TTL.\n   * - `fetch`: A {@link OptionsBase#fetchMethod} operation returned\n   *   `undefined` or was aborted, causing the item to be deleted.\n   */\n  export type DisposeReason =\n    | 'evict'\n    | 'set'\n    | 'delete'\n    | 'expire'\n    | 'fetch'\n  /**\n   * A method called upon item removal, passed as the\n   * {@link OptionsBase.dispose} and/or\n   * {@link OptionsBase.disposeAfter} options.\n   */\n  export type Disposer<K, V> = (\n    value: V,\n    key: K,\n    reason: DisposeReason,\n  ) => void\n\n  /**\n   * The reason why an item was added to the cache, passed\n   * to the {@link Inserter} methods.\n   *\n   * - `add`: the item was not found in the cache, and was added\n   * - `update`: the item was in the cache, with the same value provided\n   * - `replace`: the item was in the cache, and replaced\n   */\n  export type InsertReason = 'add' | 'update' | 'replace'\n\n  /**\n   * A method called upon item insertion, passed as the\n   * {@link OptionsBase.insert}\n   */\n  export type Inserter<K, V> = (\n    value: V,\n    key: K,\n    reason: InsertReason,\n  ) => void\n\n  /**\n   * A function that returns the effective calculated size\n   * of an entry in the cache.\n   */\n  export type SizeCalculator<K, V> = (value: V, key: K) => Size\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.fetchMethod} function.\n   */\n  export interface FetcherOptions<K, V, FC = unknown> {\n    signal: AbortSignal\n    options: FetcherFetchOptions<K, V, FC>\n    /**\n     * Object provided in the {@link FetchOptions.context} option to\n     * {@link LRUCache#fetch}\n     */\n    context: FC\n  }\n\n  /**\n   * Occasionally, it may be useful to track the internal behavior of the\n   * cache, particularly for logging, debugging, or for behavior within the\n   * `fetchMethod`. To do this, you can pass a `status` object to the\n   * {@link LRUCache#fetch}, {@link LRUCache#get}, {@link LRUCache#set},\n   * {@link LRUCache#memo}, and {@link LRUCache#has} methods.\n   *\n   * The `status` option should be a plain JavaScript object. The following\n   * fields will be set on it appropriately, depending on the situation.\n   */\n  export interface Status<V> {\n    /**\n     * The status of a set() operation.\n     *\n     * - add: the item was not found in the cache, and was added\n     * - update: the item was in the cache, with the same value provided\n     * - replace: the item was in the cache, and replaced\n     * - miss: the item was not added to the cache for some reason\n     */\n    set?: 'add' | 'update' | 'replace' | 'miss'\n\n    /**\n     * the ttl stored for the item, or undefined if ttls are not used.\n     */\n    ttl?: Milliseconds\n\n    /**\n     * the start time for the item, or undefined if ttls are not used.\n     */\n    start?: Milliseconds\n\n    /**\n     * The timestamp used for TTL calculation\n     */\n    now?: Milliseconds\n\n    /**\n     * the remaining ttl for the item, or undefined if ttls are not used.\n     */\n    remainingTTL?: Milliseconds\n\n    /**\n     * The calculated size for the item, if sizes are used.\n     */\n    entrySize?: Size\n\n    /**\n     * The total calculated size of the cache, if sizes are used.\n     */\n    totalCalculatedSize?: Size\n\n    /**\n     * A flag indicating that the item was not stored, due to exceeding the\n     * {@link OptionsBase.maxEntrySize}\n     */\n    maxEntrySizeExceeded?: true\n\n    /**\n     * The old value, specified in the case of `set:'update'` or\n     * `set:'replace'`\n     */\n    oldValue?: V\n\n    /**\n     * The results of a {@link LRUCache#has} operation\n     *\n     * - hit: the item was found in the cache\n     * - stale: the item was found in the cache, but is stale\n     * - miss: the item was not found in the cache\n     */\n    has?: 'hit' | 'stale' | 'miss'\n\n    /**\n     * The status of a {@link LRUCache#fetch} operation.\n     * Note that this can change as the underlying fetch() moves through\n     * various states.\n     *\n     * - inflight: there is another fetch() for this key which is in process\n     * - get: there is no {@link OptionsBase.fetchMethod}, so\n     *   {@link LRUCache#get} was called.\n     * - miss: the item is not in cache, and will be fetched.\n     * - hit: the item is in the cache, and was resolved immediately.\n     * - stale: the item is in the cache, but stale.\n     * - refresh: the item is in the cache, and not stale, but\n     *   {@link FetchOptions.forceRefresh} was specified.\n     */\n    fetch?: 'get' | 'inflight' | 'miss' | 'hit' | 'stale' | 'refresh'\n\n    /**\n     * The {@link OptionsBase.fetchMethod} was called\n     */\n    fetchDispatched?: true\n\n    /**\n     * The cached value was updated after a successful call to\n     * {@link OptionsBase.fetchMethod}\n     */\n    fetchUpdated?: true\n\n    /**\n     * The reason for a fetch() rejection.  Either the error raised by the\n     * {@link OptionsBase.fetchMethod}, or the reason for an\n     * AbortSignal.\n     */\n    fetchError?: Error\n\n    /**\n     * The fetch received an abort signal\n     */\n    fetchAborted?: true\n\n    /**\n     * The abort signal received was ignored, and the fetch was allowed to\n     * continue.\n     */\n    fetchAbortIgnored?: true\n\n    /**\n     * The fetchMethod promise resolved successfully\n     */\n    fetchResolved?: true\n\n    /**\n     * The fetchMethod promise was rejected\n     */\n    fetchRejected?: true\n\n    /**\n     * The status of a {@link LRUCache#get} operation.\n     *\n     * - fetching: The item is currently being fetched.  If a previous value\n     *   is present and allowed, that will be returned.\n     * - stale: The item is in the cache, and is stale.\n     * - hit: the item is in the cache\n     * - miss: the item is not in the cache\n     */\n    get?: 'stale' | 'hit' | 'miss'\n\n    /**\n     * A fetch or get operation returned a stale value.\n     */\n    returnedStale?: true\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#fetch}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link OptionsBase.noDeleteOnFetchRejection},\n   * {@link OptionsBase.allowStaleOnFetchRejection},\n   * {@link FetchOptions.forceRefresh}, and\n   * {@link FetcherOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.fetchMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the fetchMethod is called.\n   */\n  export interface FetcherFetchOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    status?: Status<V>\n    size?: Size\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#fetch} method.\n   */\n  export interface FetchOptions<K, V, FC>\n    extends FetcherFetchOptions<K, V, FC> {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.fetchMethod} as\n     * the {@link FetcherOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    signal?: AbortSignal\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface FetchOptionsWithContext<K, V, FC>\n    extends FetchOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface FetchOptionsNoContext<K, V>\n    extends FetchOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  export interface MemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.memoMethod} as\n     * the {@link MemoizerOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface MemoOptionsWithContext<K, V, FC>\n    extends MemoOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface MemoOptionsNoContext<K, V>\n    extends MemoOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.memoMethod} function.\n   */\n  export interface MemoizerOptions<K, V, FC = unknown> {\n    options: MemoizerMemoOptions<K, V, FC>\n    /**\n     * Object provided in the {@link MemoOptions.context} option to\n     * {@link LRUCache#memo}\n     */\n    context: FC\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#memo}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link MemoOptions.forceRefresh}, and\n   * {@link MemoOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.memoMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the memoMethod is called.\n   */\n  export interface MemoizerMemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n    > {\n    status?: Status<V>\n    size?: Size\n    start?: Milliseconds\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#has} method.\n   */\n  export interface HasOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'updateAgeOnHas'> {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#get} method.\n   */\n  export interface GetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'allowStale' | 'updateAgeOnGet' | 'noDeleteOnStaleGet'\n    > {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#peek} method.\n   */\n  export interface PeekOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'allowStale'> {}\n\n  /**\n   * Options that may be passed to the {@link LRUCache#set} method.\n   */\n  export interface SetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'sizeCalculation' | 'ttl' | 'noDisposeOnSet' | 'noUpdateTTL'\n    > {\n    /**\n     * If size tracking is enabled, then setting an explicit size\n     * in the {@link LRUCache#set} call will prevent calling the\n     * {@link OptionsBase.sizeCalculation} function.\n     */\n    size?: Size\n    /**\n     * If TTL tracking is enabled, then setting an explicit start\n     * time in the {@link LRUCache#set} call will override the\n     * default time from `performance.now()` or `Date.now()`.\n     *\n     * Note that it must be a valid value for whichever time-tracking\n     * method is in use.\n     */\n    start?: Milliseconds\n    status?: Status<V>\n  }\n\n  /**\n   * The type signature for the {@link OptionsBase.fetchMethod} option.\n   */\n  export type Fetcher<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: FetcherOptions<K, V, FC>,\n  ) => Promise<V | undefined | void> | V | undefined | void\n\n  /**\n   * the type signature for the {@link OptionsBase.memoMethod} option.\n   */\n  export type Memoizer<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: MemoizerOptions<K, V, FC>,\n  ) => V\n\n  /**\n   * Options which may be passed to the {@link LRUCache} constructor.\n   *\n   * Most of these may be overridden in the various options that use\n   * them.\n   *\n   * Despite all being technically optional, the constructor requires that\n   * a cache is at minimum limited by one or more of {@link OptionsBase.max},\n   * {@link OptionsBase.ttl}, or {@link OptionsBase.maxSize}.\n   *\n   * If {@link OptionsBase.ttl} is used alone, then it is strongly advised\n   * (and in fact required by the type definitions here) that the cache\n   * also set {@link OptionsBase.ttlAutopurge}, to prevent potentially\n   * unbounded storage.\n   *\n   * All options are also available on the {@link LRUCache} instance, making\n   * it safe to pass an LRUCache instance as the options argumemnt to\n   * make another empty cache of the same type.\n   *\n   * Some options are marked as read-only, because changing them after\n   * instantiation is not safe. Changing any of the other options will of\n   * course only have an effect on subsequent method calls.\n   */\n  export interface OptionsBase<K, V, FC> {\n    /**\n     * The maximum number of items to store in the cache before evicting\n     * old entries. This is read-only on the {@link LRUCache} instance,\n     * and may not be overridden.\n     *\n     * If set, then storage space will be pre-allocated at construction\n     * time, and the cache will perform significantly faster.\n     *\n     * Note that significantly fewer items may be stored, if\n     * {@link OptionsBase.maxSize} and/or {@link OptionsBase.ttl} are also\n     * set.\n     *\n     * **It is strongly recommended to set a `max` to prevent unbounded growth\n     * of the cache.**\n     */\n    max?: Count\n\n    /**\n     * Max time in milliseconds for items to live in cache before they are\n     * considered stale.  Note that stale items are NOT preemptively removed by\n     * default, and MAY live in the cache, contributing to its LRU max, long\n     * after they have expired, unless {@link OptionsBase.ttlAutopurge} is\n     * set.\n     *\n     * If set to `0` (the default value), then that means \"do not track\n     * TTL\", not \"expire immediately\".\n     *\n     * Also, as this cache is optimized for LRU/MRU operations, some of\n     * the staleness/TTL checks will reduce performance, as they will incur\n     * overhead by deleting items.\n     *\n     * This is not primarily a TTL cache, and does not make strong TTL\n     * guarantees. There is no pre-emptive pruning of expired items, but you\n     * _may_ set a TTL on the cache, and it will treat expired items as missing\n     * when they are fetched, and delete them.\n     *\n     * Optional, but must be a non-negative integer in ms if specified.\n     *\n     * This may be overridden by passing an options object to `cache.set()`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if ttl tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * If ttl tracking is enabled, and `max` and `maxSize` are not set,\n     * and `ttlAutopurge` is not set, then a warning will be emitted\n     * cautioning about the potential for unbounded memory consumption.\n     * (The TypeScript definitions will also discourage this.)\n     */\n    ttl?: Milliseconds\n\n    /**\n     * Minimum amount of time in ms in which to check for staleness.\n     * Defaults to 1, which means that the current time is checked\n     * at most once per millisecond.\n     *\n     * Set to 0 to check the current time every time staleness is tested.\n     * (This reduces performance, and is theoretically unnecessary.)\n     *\n     * Setting this to a higher value will improve performance somewhat\n     * while using ttl tracking, albeit at the expense of keeping stale\n     * items around a bit longer than their TTLs would indicate.\n     *\n     * @default 1\n     */\n    ttlResolution?: Milliseconds\n\n    /**\n     * Preemptively remove stale items from the cache.\n     *\n     * Note that this may *significantly* degrade performance, especially if\n     * the cache is storing a large number of items. It is almost always best\n     * to just leave the stale items in the cache, and let them fall out as new\n     * items are added.\n     *\n     * Note that this means that {@link OptionsBase.allowStale} is a bit\n     * pointless, as stale items will be deleted almost as soon as they\n     * expire.\n     *\n     * Use with caution!\n     */\n    ttlAutopurge?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever it is retrieved from cache with\n     * {@link LRUCache#get}, causing it to not expire. (It can still fall out\n     * of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     */\n    updateAgeOnGet?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever its presence in the cache is\n     * checked with {@link LRUCache#has}, causing it to not expire. (It can\n     * still fall out of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     */\n    updateAgeOnHas?: boolean\n\n    /**\n     * Allow {@link LRUCache#get} and {@link LRUCache#fetch} calls to return\n     * stale data, if available.\n     *\n     * By default, if you set `ttl`, stale items will only be deleted from the\n     * cache when you `get(key)`. That is, it's not preemptively pruning items,\n     * unless {@link OptionsBase.ttlAutopurge} is set.\n     *\n     * If you set `allowStale:true`, it'll return the stale value *as well as*\n     * deleting it. If you don't set this, then it'll return `undefined` when\n     * you try to get a stale entry.\n     *\n     * Note that when a stale entry is fetched, _even if it is returned due to\n     * `allowStale` being set_, it is removed from the cache immediately. You\n     * can suppress this behavior by setting\n     * {@link OptionsBase.noDeleteOnStaleGet}, either in the constructor, or in\n     * the options provided to {@link LRUCache#get}.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     * The `cache.has()` method will always return `false` for stale items.\n     *\n     * Only relevant if a ttl is set.\n     */\n    allowStale?: boolean\n\n    /**\n     * Function that is called on items when they are dropped from the\n     * cache, as `dispose(value, key, reason)`.\n     *\n     * This can be handy if you want to close file descriptors or do\n     * other cleanup tasks when items are no longer stored in the cache.\n     *\n     * **NOTE**: It is called _before_ the item has been fully removed\n     * from the cache, so if you want to put it right back in, you need\n     * to wait until the next tick. If you try to add it back in during\n     * the `dispose()` function call, it will break things in subtle and\n     * weird ways.\n     *\n     * Unlike several other options, this may _not_ be overridden by\n     * passing an option to `set()`, for performance reasons.\n     *\n     * The `reason` will be one of the following strings, corresponding\n     * to the reason for the item's deletion:\n     *\n     * - `evict` Item was evicted to make space for a new addition\n     * - `set` Item was overwritten by a new value\n     * - `expire` Item expired its TTL\n     * - `fetch` Item was deleted due to a failed or aborted fetch, or a\n     *   fetchMethod returning `undefined.\n     * - `delete` Item was removed by explicit `cache.delete(key)`,\n     *   `cache.clear()`, or `cache.set(key, undefined)`.\n     */\n    dispose?: Disposer<K, V>\n\n    /**\n     * Function that is called when new items are inserted into the cache,\n     * as `onInsert(value, key, reason)`.\n     *\n     * This can be useful if you need to perform actions when an item is\n     * added, such as logging or tracking insertions.\n     *\n     * Unlike some other options, this may _not_ be overridden by passing\n     * an option to `set()`, for performance and consistency reasons.\n     */\n    onInsert?: Inserter<K, V>\n\n    /**\n     * The same as {@link OptionsBase.dispose}, but called *after* the entry\n     * is completely removed and the cache is once again in a clean state.\n     *\n     * It is safe to add an item right back into the cache at this point.\n     * However, note that it is *very* easy to inadvertently create infinite\n     * recursion this way.\n     */\n    disposeAfter?: Disposer<K, V>\n\n    /**\n     * Set to true to suppress calling the\n     * {@link OptionsBase.dispose} function if the entry key is\n     * still accessible within the cache.\n     *\n     * This may be overridden by passing an options object to\n     * {@link LRUCache#set}.\n     *\n     * Only relevant if `dispose` or `disposeAfter` are set.\n     */\n    noDisposeOnSet?: boolean\n\n    /**\n     * Boolean flag to tell the cache to not update the TTL when setting a new\n     * value for an existing key (ie, when updating a value rather than\n     * inserting a new value).  Note that the TTL value is _always_ set (if\n     * provided) when adding a new entry into the cache.\n     *\n     * Has no effect if a {@link OptionsBase.ttl} is not set.\n     *\n     * May be passed as an option to {@link LRUCache#set}.\n     */\n    noUpdateTTL?: boolean\n\n    /**\n     * Set to a positive integer to track the sizes of items added to the\n     * cache, and automatically evict items in order to stay below this size.\n     * Note that this may result in fewer than `max` items being stored.\n     *\n     * Attempting to add an item to the cache whose calculated size is greater\n     * that this amount will be a no-op. The item will not be cached, and no\n     * other items will be evicted.\n     *\n     * Optional, must be a positive integer if provided.\n     *\n     * Sets `maxEntrySize` to the same value, unless a different value is\n     * provided for `maxEntrySize`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if size tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * Note also that size tracking can negatively impact performance,\n     * though for most cases, only minimally.\n     */\n    maxSize?: Size\n\n    /**\n     * The maximum allowed size for any single item in the cache.\n     *\n     * If a larger item is passed to {@link LRUCache#set} or returned by a\n     * {@link OptionsBase.fetchMethod} or {@link OptionsBase.memoMethod}, then\n     * it will not be stored in the cache.\n     *\n     * Attempting to add an item whose calculated size is greater than\n     * this amount will not cache the item or evict any old items, but\n     * WILL delete an existing value if one is already present.\n     *\n     * Optional, must be a positive integer if provided. Defaults to\n     * the value of `maxSize` if provided.\n     */\n    maxEntrySize?: Size\n\n    /**\n     * A function that returns a number indicating the item's size.\n     *\n     * Requires {@link OptionsBase.maxSize} to be set.\n     *\n     * If not provided, and {@link OptionsBase.maxSize} or\n     * {@link OptionsBase.maxEntrySize} are set, then all\n     * {@link LRUCache#set} calls **must** provide an explicit\n     * {@link SetOptions.size} or sizeCalculation param.\n     */\n    sizeCalculation?: SizeCalculator<K, V>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#fetch}\n     *\n     * ```ts\n     * fetchMethod(key, staleValue, { signal, options, context })\n     * ```\n     *\n     * If `fetchMethod` is not provided, then `cache.fetch(key)` is equivalent\n     * to `Promise.resolve(cache.get(key))`.\n     *\n     * If at any time, `signal.aborted` is set to `true`, or if the\n     * `signal.onabort` method is called, or if it emits an `'abort'` event\n     * which you can listen to with `addEventListener`, then that means that\n     * the fetch should be abandoned. This may be passed along to async\n     * functions aware of AbortController/AbortSignal behavior.\n     *\n     * The `fetchMethod` should **only** return `undefined` or a Promise\n     * resolving to `undefined` if the AbortController signaled an `abort`\n     * event. In all other cases, it should return or resolve to a value\n     * suitable for adding to the cache.\n     *\n     * The `options` object is a union of the options that may be provided to\n     * `set()` and `get()`. If they are modified, then that will result in\n     * modifying the settings to `cache.set()` when the value is resolved, and\n     * in the case of\n     * {@link OptionsBase.noDeleteOnFetchRejection} and\n     * {@link OptionsBase.allowStaleOnFetchRejection}, the handling of\n     * `fetchMethod` failures.\n     *\n     * For example, a DNS cache may update the TTL based on the value returned\n     * from a remote DNS server by changing `options.ttl` in the `fetchMethod`.\n     */\n    fetchMethod?: Fetcher<K, V, FC>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#memo}\n     */\n    memoMethod?: Memoizer<K, V, FC>\n\n    /**\n     * Set to true to suppress the deletion of stale data when a\n     * {@link OptionsBase.fetchMethod} returns a rejected promise.\n     */\n    noDeleteOnFetchRejection?: boolean\n\n    /**\n     * Do not delete stale items when they are retrieved with\n     * {@link LRUCache#get}.\n     *\n     * Note that the `get` return value will still be `undefined`\n     * unless {@link OptionsBase.allowStale} is true.\n     *\n     * When using time-expiring entries with `ttl`, by default stale\n     * items will be removed from the cache when the key is accessed\n     * with `cache.get()`.\n     *\n     * Setting this option will cause stale items to remain in the cache, until\n     * they are explicitly deleted with `cache.delete(key)`, or retrieved with\n     * `noDeleteOnStaleGet` set to `false`.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     *\n     * Only relevant if a ttl is used.\n     */\n    noDeleteOnStaleGet?: boolean\n\n    /**\n     * Set to true to allow returning stale data when a\n     * {@link OptionsBase.fetchMethod} throws an error or returns a rejected\n     * promise.\n     *\n     * This differs from using {@link OptionsBase.allowStale} in that stale\n     * data will ONLY be returned in the case that the {@link LRUCache#fetch}\n     * fails, not any other times.\n     *\n     * If a `fetchMethod` fails, and there is no stale value available, the\n     * `fetch()` will resolve to `undefined`. Ie, all `fetchMethod` errors are\n     * suppressed.\n     *\n     * Implies `noDeleteOnFetchRejection`.\n     *\n     * This may be set in calls to `fetch()`, or defaulted on the constructor,\n     * or overridden by modifying the options object in the `fetchMethod`.\n     */\n    allowStaleOnFetchRejection?: boolean\n\n    /**\n     * Set to true to return a stale value from the cache when the\n     * `AbortSignal` passed to the {@link OptionsBase.fetchMethod} dispatches\n     * an `'abort'` event, whether user-triggered, or due to internal cache\n     * behavior.\n     *\n     * Unless {@link OptionsBase.ignoreFetchAbort} is also set, the underlying\n     * {@link OptionsBase.fetchMethod} will still be considered canceled, and\n     * any value it returns will be ignored and not cached.\n     *\n     * Caveat: since fetches are aborted when a new value is explicitly\n     * set in the cache, this can lead to fetch returning a stale value,\n     * since that was the fallback value _at the moment the `fetch()` was\n     * initiated_, even though the new updated value is now present in\n     * the cache.\n     *\n     * For example:\n     *\n     * ```ts\n     * const cache = new LRUCache<string, any>({\n     *   ttl: 100,\n     *   fetchMethod: async (url, oldValue, { signal }) =>  {\n     *     const res = await fetch(url, { signal })\n     *     return await res.json()\n     *   }\n     * })\n     * cache.set('https://example.com/', { some: 'data' })\n     * // 100ms go by...\n     * const result = cache.fetch('https://example.com/')\n     * cache.set('https://example.com/', { other: 'thing' })\n     * console.log(await result) // { some: 'data' }\n     * console.log(cache.get('https://example.com/')) // { other: 'thing' }\n     * ```\n     */\n    allowStaleOnFetchAbort?: boolean\n\n    /**\n     * Set to true to ignore the `abort` event emitted by the `AbortSignal`\n     * object passed to {@link OptionsBase.fetchMethod}, and still cache the\n     * resulting resolution value, as long as it is not `undefined`.\n     *\n     * When used on its own, this means aborted {@link LRUCache#fetch} calls\n     * are not immediately resolved or rejected when they are aborted, and\n     * instead take the full time to await.\n     *\n     * When used with {@link OptionsBase.allowStaleOnFetchAbort}, aborted\n     * {@link LRUCache#fetch} calls will resolve immediately to their stale\n     * cached value or `undefined`, and will continue to process and eventually\n     * update the cache when they resolve, as long as the resulting value is\n     * not `undefined`, thus supporting a \"return stale on timeout while\n     * refreshing\" mechanism by passing `AbortSignal.timeout(n)` as the signal.\n     *\n     * For example:\n     *\n     * ```ts\n     * const c = new LRUCache({\n     *   ttl: 100,\n     *   ignoreFetchAbort: true,\n     *   allowStaleOnFetchAbort: true,\n     *   fetchMethod: async (key, oldValue, { signal }) => {\n     *     // note: do NOT pass the signal to fetch()!\n     *     // let's say this fetch can take a long time.\n     *     const res = await fetch(`https://slow-backend-server/${key}`)\n     *     return await res.json()\n     *   },\n     * })\n     *\n     * // this will return the stale value after 100ms, while still\n     * // updating in the background for next time.\n     * const val = await c.fetch('key', { signal: AbortSignal.timeout(100) })\n     * ```\n     *\n     * **Note**: regardless of this setting, an `abort` event _is still\n     * emitted on the `AbortSignal` object_, so may result in invalid results\n     * when passed to other underlying APIs that use AbortSignals.\n     *\n     * This may be overridden in the {@link OptionsBase.fetchMethod} or the\n     * call to {@link LRUCache#fetch}.\n     */\n    ignoreFetchAbort?: boolean\n\n    /**\n     * In some cases, you may want to swap out the performance/Date object\n     * used for TTL tracking. This should almost certainly NOT be done in\n     * production environments!\n     *\n     * This value defaults to `global.performance` if it has a `now()` method,\n     * or the `global.Date` object otherwise.\n     */\n    perf?: Perf\n  }\n\n  export interface OptionsMaxLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    max: Count\n  }\n  export interface OptionsTTLLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    ttl: Milliseconds\n    ttlAutopurge: boolean\n  }\n  export interface OptionsSizeLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    maxSize: Size\n  }\n\n  /**\n   * The valid safe options for the {@link LRUCache} constructor\n   */\n  export type Options<K, V, FC> =\n    | OptionsMaxLimit<K, V, FC>\n    | OptionsSizeLimit<K, V, FC>\n    | OptionsTTLLimit<K, V, FC>\n\n  /**\n   * Entry objects used by {@link LRUCache#load} and {@link LRUCache#dump},\n   * and returned by {@link LRUCache#info}.\n   */\n  export interface Entry<V> {\n    value: V\n    ttl?: Milliseconds\n    size?: Size\n    start?: Milliseconds\n  }\n}\n\n/**\n * Default export, the thing you're using this module to get.\n *\n * The `K` and `V` types define the key and value types, respectively. The\n * optional `FC` type defines the type of the `context` object passed to\n * `cache.fetch()` and `cache.memo()`.\n *\n * Keys and values **must not** be `null` or `undefined`.\n *\n * All properties from the options object (with the exception of `max`,\n * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are\n * added as normal public members. (The listed options are read-only getters.)\n *\n * Changing any of these will alter the defaults for subsequent method calls.\n */\nexport class LRUCache<K extends {}, V extends {}, FC = unknown> {\n  // options that cannot be changed without disaster\n  readonly #max: LRUCache.Count\n  readonly #maxSize: LRUCache.Size\n  readonly #dispose?: LRUCache.Disposer<K, V>\n  readonly #onInsert?: LRUCache.Inserter<K, V>\n  readonly #disposeAfter?: LRUCache.Disposer<K, V>\n  readonly #fetchMethod?: LRUCache.Fetcher<K, V, FC>\n  readonly #memoMethod?: LRUCache.Memoizer<K, V, FC>\n  readonly #perf: Perf\n\n  /**\n   * {@link LRUCache.OptionsBase.perf}\n   */\n  get perf() {\n    return this.#perf\n  }\n\n  /**\n   * {@link LRUCache.OptionsBase.ttl}\n   */\n  ttl: LRUCache.Milliseconds\n\n  /**\n   * {@link LRUCache.OptionsBase.ttlResolution}\n   */\n  ttlResolution: LRUCache.Milliseconds\n  /**\n   * {@link LRUCache.OptionsBase.ttlAutopurge}\n   */\n  ttlAutopurge: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnGet}\n   */\n  updateAgeOnGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnHas}\n   */\n  updateAgeOnHas: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStale}\n   */\n  allowStale: boolean\n\n  /**\n   * {@link LRUCache.OptionsBase.noDisposeOnSet}\n   */\n  noDisposeOnSet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noUpdateTTL}\n   */\n  noUpdateTTL: boolean\n  /**\n   * {@link LRUCache.OptionsBase.maxEntrySize}\n   */\n  maxEntrySize: LRUCache.Size\n  /**\n   * {@link LRUCache.OptionsBase.sizeCalculation}\n   */\n  sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n   */\n  noDeleteOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n   */\n  noDeleteOnStaleGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n   */\n  allowStaleOnFetchAbort: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n   */\n  allowStaleOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n   */\n  ignoreFetchAbort: boolean\n\n  // computed properties\n  #size: LRUCache.Count\n  #calculatedSize: LRUCache.Size\n  #keyMap: Map<K, Index>\n  #keyList: (K | undefined)[]\n  #valList: (V | BackgroundFetch<V> | undefined)[]\n  #next: NumberArray\n  #prev: NumberArray\n  #head: Index\n  #tail: Index\n  #free: StackLike\n  #disposed?: DisposeTask<K, V>[]\n  #sizes?: ZeroArray\n  #starts?: ZeroArray\n  #ttls?: ZeroArray\n\n  #hasDispose: boolean\n  #hasFetchMethod: boolean\n  #hasDisposeAfter: boolean\n  #hasOnInsert: boolean\n\n  /**\n   * Do not call this method unless you need to inspect the\n   * inner workings of the cache.  If anything returned by this\n   * object is modified in any way, strange breakage may occur.\n   *\n   * These fields are private for a reason!\n   *\n   * @internal\n   */\n  static unsafeExposeInternals<\n    K extends {},\n    V extends {},\n    FC extends unknown = unknown,\n  >(c: LRUCache<K, V, FC>) {\n    return {\n      // properties\n      starts: c.#starts,\n      ttls: c.#ttls,\n      sizes: c.#sizes,\n      keyMap: c.#keyMap as Map<K, number>,\n      keyList: c.#keyList,\n      valList: c.#valList,\n      next: c.#next,\n      prev: c.#prev,\n      get head() {\n        return c.#head\n      },\n      get tail() {\n        return c.#tail\n      },\n      free: c.#free,\n      // methods\n      isBackgroundFetch: (p: any) => c.#isBackgroundFetch(p),\n      backgroundFetch: (\n        k: K,\n        index: number | undefined,\n        options: LRUCache.FetchOptions<K, V, FC>,\n        context: any,\n      ): BackgroundFetch<V> =>\n        c.#backgroundFetch(\n          k,\n          index as Index | undefined,\n          options,\n          context,\n        ),\n      moveToTail: (index: number): void =>\n        c.#moveToTail(index as Index),\n      indexes: (options?: { allowStale: boolean }) =>\n        c.#indexes(options),\n      rindexes: (options?: { allowStale: boolean }) =>\n        c.#rindexes(options),\n      isStale: (index: number | undefined) =>\n        c.#isStale(index as Index),\n    }\n  }\n\n  // Protected read-only members\n\n  /**\n   * {@link LRUCache.OptionsBase.max} (read-only)\n   */\n  get max(): LRUCache.Count {\n    return this.#max\n  }\n  /**\n   * {@link LRUCache.OptionsBase.maxSize} (read-only)\n   */\n  get maxSize(): LRUCache.Count {\n    return this.#maxSize\n  }\n  /**\n   * The total computed size of items in the cache (read-only)\n   */\n  get calculatedSize(): LRUCache.Size {\n    return this.#calculatedSize\n  }\n  /**\n   * The number of items stored in the cache (read-only)\n   */\n  get size(): LRUCache.Count {\n    return this.#size\n  }\n  /**\n   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n   */\n  get fetchMethod(): LRUCache.Fetcher<K, V, FC> | undefined {\n    return this.#fetchMethod\n  }\n  get memoMethod(): LRUCache.Memoizer<K, V, FC> | undefined {\n    return this.#memoMethod\n  }\n  /**\n   * {@link LRUCache.OptionsBase.dispose} (read-only)\n   */\n  get dispose() {\n    return this.#dispose\n  }\n  /**\n   * {@link LRUCache.OptionsBase.onInsert} (read-only)\n   */\n  get onInsert() {\n    return this.#onInsert\n  }\n  /**\n   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n   */\n  get disposeAfter() {\n    return this.#disposeAfter\n  }\n\n  constructor(\n    options: LRUCache.Options<K, V, FC> | LRUCache<K, V, FC>,\n  ) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      onInsert,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      memoMethod,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      perf,\n    } = options\n\n    if (perf !== undefined) {\n      if (typeof perf?.now !== 'function') {\n        throw new TypeError(\n          'perf option must have a now() method if specified',\n        )\n      }\n    }\n\n    this.#perf = perf ?? defaultPerf\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.#max = max\n    this.#maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.#maxSize\n    this.sizeCalculation = sizeCalculation\n    if (this.sizeCalculation) {\n      if (!this.#maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize',\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    if (\n      memoMethod !== undefined &&\n      typeof memoMethod !== 'function'\n    ) {\n      throw new TypeError('memoMethod must be a function if defined')\n    }\n    this.#memoMethod = memoMethod\n\n    if (\n      fetchMethod !== undefined &&\n      typeof fetchMethod !== 'function'\n    ) {\n      throw new TypeError(\n        'fetchMethod must be a function if specified',\n      )\n    }\n    this.#fetchMethod = fetchMethod\n    this.#hasFetchMethod = !!fetchMethod\n\n    this.#keyMap = new Map()\n    this.#keyList = new Array(max).fill(undefined)\n    this.#valList = new Array(max).fill(undefined)\n    this.#next = new UintArray(max)\n    this.#prev = new UintArray(max)\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free = Stack.create(max)\n    this.#size = 0\n    this.#calculatedSize = 0\n\n    if (typeof dispose === 'function') {\n      this.#dispose = dispose\n    }\n    if (typeof onInsert === 'function') {\n      this.#onInsert = onInsert\n    }\n    if (typeof disposeAfter === 'function') {\n      this.#disposeAfter = disposeAfter\n      this.#disposed = []\n    } else {\n      this.#disposeAfter = undefined\n      this.#disposed = undefined\n    }\n    this.#hasDispose = !!this.#dispose\n    this.#hasOnInsert = !!this.#onInsert\n    this.#hasDisposeAfter = !!this.#disposeAfter\n\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.#maxSize !== 0) {\n        if (!isPosInt(this.#maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified',\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified',\n        )\n      }\n      this.#initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0 ?\n        ttlResolution\n      : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified',\n        )\n      }\n      this.#initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required',\n      )\n    }\n    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n  }\n\n  /**\n   * Return the number of ms left in the item's TTL. If item is not in cache,\n   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.\n   */\n  getRemainingTTL(key: K) {\n    return this.#keyMap.has(key) ? Infinity : 0\n  }\n\n  #initializeTTLTracking() {\n    const ttls = new ZeroArray(this.#max)\n    const starts = new ZeroArray(this.#max)\n    this.#ttls = ttls\n    this.#starts = starts\n\n    this.#setItemTTL = (index, ttl, start = this.#perf.now()) => {\n      starts[index] = ttl !== 0 ? start : 0\n      ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.#isStale(index)) {\n            this.#delete(this.#keyList[index] as K, 'expire')\n          }\n        }, ttl + 1)\n        // unref() not supported on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n    }\n\n    this.#updateItemAge = index => {\n      starts[index] = ttls[index] !== 0 ? this.#perf.now() : 0\n    }\n\n    this.#statusTTL = (status, index) => {\n      if (ttls[index]) {\n        const ttl = ttls[index]\n        const start = starts[index]\n        /* c8 ignore next */\n        if (!ttl || !start) return\n        status.ttl = ttl\n        status.start = start\n        status.now = cachedNow || getNow()\n        const age = status.now - start\n        status.remainingTTL = ttl - age\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = this.#perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution,\n        )\n        // not available on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.#keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      const ttl = ttls[index]\n      const start = starts[index]\n      if (!ttl || !start) {\n        return Infinity\n      }\n      const age = (cachedNow || getNow()) - start\n      return ttl - age\n    }\n\n    this.#isStale = index => {\n      const s = starts[index]\n      const t = ttls[index]\n      return !!t && !!s && (cachedNow || getNow()) - s > t\n    }\n  }\n\n  // conditionally set private methods related to TTL\n  #updateItemAge: (index: Index) => void = () => {}\n  #statusTTL: (status: LRUCache.Status<V>, index: Index) => void =\n    () => {}\n  #setItemTTL: (\n    index: Index,\n    ttl: LRUCache.Milliseconds,\n    start?: LRUCache.Milliseconds,\n    // ignore because we never call this if we're not already in TTL mode\n    /* c8 ignore start */\n  ) => void = () => {}\n  /* c8 ignore stop */\n\n  #isStale: (index: Index) => boolean = () => false\n\n  #initializeSizeTracking() {\n    const sizes = new ZeroArray(this.#max)\n    this.#calculatedSize = 0\n    this.#sizes = sizes\n    this.#removeItemSize = index => {\n      this.#calculatedSize -= sizes[index] as number\n      sizes[index] = 0\n    }\n    this.#requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.#isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)',\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation ' +\n              'or size must be set.',\n          )\n        }\n      }\n      return size\n    }\n    this.#addItemSize = (\n      index: Index,\n      size: LRUCache.Size,\n      status?: LRUCache.Status<V>,\n    ) => {\n      sizes[index] = size\n      if (this.#maxSize) {\n        const maxSize = this.#maxSize - (sizes[index] as number)\n        while (this.#calculatedSize > maxSize) {\n          this.#evict(true)\n        }\n      }\n      this.#calculatedSize += sizes[index] as number\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.#calculatedSize\n      }\n    }\n  }\n\n  #removeItemSize: (index: Index) => void = _i => {}\n  #addItemSize: (\n    index: Index,\n    size: LRUCache.Size,\n    status?: LRUCache.Status<V>,\n  ) => void = (_i, _s, _st) => {}\n  #requireSize: (\n    k: K,\n    v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>,\n  ) => LRUCache.Size = (\n    _k: K,\n    _v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>,\n  ) => {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache',\n      )\n    }\n    return 0\n  };\n\n  *#indexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#tail; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#head) {\n          break\n        } else {\n          i = this.#prev[i] as Index\n        }\n      }\n    }\n  }\n\n  *#rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#head; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#tail) {\n          break\n        } else {\n          i = this.#next[i] as Index\n        }\n      }\n    }\n  }\n\n  #isValidIndex(index: Index) {\n    return (\n      index !== undefined &&\n      this.#keyMap.get(this.#keyList[index] as K) === index\n    )\n  }\n\n  /**\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from most recently used to least recently used.\n   */\n  *entries() {\n    for (const i of this.#indexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]] as [K, V]\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.entries}\n   *\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from least recently used to most recently used.\n   */\n  *rentries() {\n    for (const i of this.#rindexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]]\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the keys in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *keys() {\n    for (const i of this.#indexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.keys}\n   *\n   * Return a generator yielding the keys in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rkeys() {\n    for (const i of this.#rindexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the values in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *values() {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i] as V\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.values}\n   *\n   * Return a generator yielding the values in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rvalues() {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i]\n      }\n    }\n  }\n\n  /**\n   * Iterating over the cache itself yields the same results as\n   * {@link LRUCache.entries}\n   */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /**\n   * A String value that is used in the creation of the default string\n   * description of an object. Called by the built-in method\n   * `Object.prototype.toString`.\n   */\n  [Symbol.toStringTag] = 'LRUCache'\n\n  /**\n   * Find a value for which the supplied fn method returns a truthy value,\n   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.\n   */\n  find(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => boolean,\n    getOptions: LRUCache.GetOptions<K, V, FC> = {},\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value =\n        this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n      if (value === undefined) continue\n      if (fn(value, this.#keyList[i] as K, this)) {\n        return this.get(this.#keyList[i] as K, getOptions)\n      }\n    }\n  }\n\n  /**\n   * Call the supplied function on each item in the cache, in order from most\n   * recently used to least recently used.\n   *\n   * `fn` is called as `fn(value, key, cache)`.\n   *\n   * If `thisp` is provided, function will be called in the `this`-context of\n   * the provided object, or the cache if no `thisp` object is provided.\n   *\n   * Does not update age or recenty of use, or iterate over stale values.\n   */\n  forEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this,\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value =\n        this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * The same as {@link LRUCache.forEach} but items are iterated over in\n   * reverse order.  (ie, less recently used items are iterated over first.)\n   */\n  rforEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this,\n  ) {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      const value =\n        this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * Delete any stale entries. Returns true if anything was removed,\n   * false otherwise.\n   */\n  purgeStale() {\n    let deleted = false\n    for (const i of this.#rindexes({ allowStale: true })) {\n      if (this.#isStale(i)) {\n        this.#delete(this.#keyList[i] as K, 'expire')\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Get the extended info about a given entry, to get its value, size, and\n   * TTL info simultaneously. Returns `undefined` if the key is not present.\n   *\n   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive\n   * serialization, the `start` value is always the current timestamp, and the\n   * `ttl` is a calculated remaining time to live (negative if expired).\n   *\n   * Always returns stale values, if their info is found in the cache, so be\n   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})\n   * if relevant.\n   */\n  info(key: K): LRUCache.Entry<V> | undefined {\n    const i = this.#keyMap.get(key)\n    if (i === undefined) return undefined\n    const v = this.#valList[i]\n    /* c8 ignore start - this isn't tested for the info function,\n     * but it's the same logic as found in other places. */\n    const value: V | undefined =\n      this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n    if (value === undefined) return undefined\n    /* c8 ignore end */\n    const entry: LRUCache.Entry<V> = { value }\n    if (this.#ttls && this.#starts) {\n      const ttl = this.#ttls[i]\n      const start = this.#starts[i]\n      if (ttl && start) {\n        const remain = ttl - (this.#perf.now() - start)\n        entry.ttl = remain\n        entry.start = Date.now()\n      }\n    }\n    if (this.#sizes) {\n      entry.size = this.#sizes[i]\n    }\n    return entry\n  }\n\n  /**\n   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n   * passed to {@link LRUCache#load}.\n   *\n   * The `start` fields are calculated relative to a portable `Date.now()`\n   * timestamp, even if `performance.now()` is available.\n   *\n   * Stale entries are always included in the `dump`, even if\n   * {@link LRUCache.OptionsBase.allowStale} is false.\n   *\n   * Note: this returns an actual array, not a generator, so it can be more\n   * easily passed around.\n   */\n  dump() {\n    const arr: [K, LRUCache.Entry<V>][] = []\n    for (const i of this.#indexes({ allowStale: true })) {\n      const key = this.#keyList[i]\n      const v = this.#valList[i]\n      const value: V | undefined =\n        this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n      if (value === undefined || key === undefined) continue\n      const entry: LRUCache.Entry<V> = { value }\n      if (this.#ttls && this.#starts) {\n        entry.ttl = this.#ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = this.#perf.now() - (this.#starts[i] as number)\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.#sizes) {\n        entry.size = this.#sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  /**\n   * Reset the cache and load in the items in entries in the order listed.\n   *\n   * The shape of the resulting cache may be different if the same options are\n   * not used in both caches.\n   *\n   * The `start` fields are assumed to be calculated relative to a portable\n   * `Date.now()` timestamp, even if `performance.now()` is available.\n   */\n  load(arr: [K, LRUCache.Entry<V>][]) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset, so that\n        // we get the intended remaining TTL, no matter how long it's\n        // been on ice.\n        //\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = this.#perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  /**\n   * Add a value to the cache.\n   *\n   * Note: if `undefined` is specified as a value, this is an alias for\n   * {@link LRUCache#delete}\n   *\n   * Fields on the {@link LRUCache.SetOptions} options param will override\n   * their corresponding values in the constructor options for the scope\n   * of this single `set()` operation.\n   *\n   * If `start` is provided, then that will set the effective start\n   * time for the TTL calculation. Note that this must be a previous\n   * value of `performance.now()` if supported, or a previous value of\n   * `Date.now()` if not.\n   *\n   * Options object may also include `size`, which will prevent\n   * calling the `sizeCalculation` function and just use the specified\n   * number if it is a positive integer, and `noDisposeOnSet` which\n   * will prevent calling a `dispose` function in the case of\n   * overwrites.\n   *\n   * If the `size` (or return value of `sizeCalculation`) for a given\n   * entry is greater than `maxEntrySize`, then the item will not be\n   * added to the cache.\n   *\n   * Will update the recency of the entry.\n   *\n   * If the value is `undefined`, then this is an alias for\n   * `cache.delete(key)`. `undefined` is never stored in the cache.\n   */\n  set(\n    k: K,\n    v: V | BackgroundFetch<V> | undefined,\n    setOptions: LRUCache.SetOptions<K, V, FC> = {},\n  ) {\n    if (v === undefined) {\n      this.delete(k)\n      return this\n    }\n    const {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      sizeCalculation = this.sizeCalculation,\n      status,\n    } = setOptions\n    let { noUpdateTTL = this.noUpdateTTL } = setOptions\n\n    const size = this.#requireSize(\n      k,\n      v,\n      setOptions.size || 0,\n      sizeCalculation,\n    )\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case something is there already.\n      this.#delete(k, 'set')\n      return this\n    }\n    let index = this.#size === 0 ? undefined : this.#keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = (\n        this.#size === 0 ? this.#tail\n        : this.#free.length !== 0 ? this.#free.pop()\n        : this.#size === this.#max ? this.#evict(false)\n        : this.#size) as Index\n      this.#keyList[index] = k\n      this.#valList[index] = v\n      this.#keyMap.set(k, index)\n      this.#next[this.#tail] = index\n      this.#prev[index] = this.#tail\n      this.#tail = index\n      this.#size++\n      this.#addItemSize(index, size, status)\n      if (status) status.set = 'add'\n      noUpdateTTL = false\n      if (this.#hasOnInsert) {\n        this.#onInsert?.(v as V, k, 'add')\n      }\n    } else {\n      // update\n      this.#moveToTail(index)\n      const oldVal = this.#valList[index] as V | BackgroundFetch<V>\n      if (v !== oldVal) {\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n          const { __staleWhileFetching: s } = oldVal\n          if (s !== undefined && !noDisposeOnSet) {\n            if (this.#hasDispose) {\n              this.#dispose?.(s as V, k, 'set')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([s as V, k, 'set'])\n            }\n          }\n        } else if (!noDisposeOnSet) {\n          if (this.#hasDispose) {\n            this.#dispose?.(oldVal as V, k, 'set')\n          }\n          if (this.#hasDisposeAfter) {\n            this.#disposed?.push([oldVal as V, k, 'set'])\n          }\n        }\n        this.#removeItemSize(index)\n        this.#addItemSize(index, size, status)\n        this.#valList[index] = v\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.#isBackgroundFetch(oldVal) ?\n              oldVal.__staleWhileFetching\n            : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n\n      if (this.#hasOnInsert) {\n        this.onInsert?.(\n          v as V,\n          k,\n          v === oldVal ? 'update' : 'replace',\n        )\n      }\n    }\n    if (ttl !== 0 && !this.#ttls) {\n      this.#initializeTTLTracking()\n    }\n    if (this.#ttls) {\n      if (!noUpdateTTL) {\n        this.#setItemTTL(index, ttl, start)\n      }\n      if (status) this.#statusTTL(status, index)\n    }\n    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Evict the least recently used item, returning its value or\n   * `undefined` if cache is empty.\n   */\n  pop(): V | undefined {\n    try {\n      while (this.#size) {\n        const val = this.#valList[this.#head]\n        this.#evict(true)\n        if (this.#isBackgroundFetch(val)) {\n          if (val.__staleWhileFetching) {\n            return val.__staleWhileFetching\n          }\n        } else if (val !== undefined) {\n          return val\n        }\n      }\n    } finally {\n      if (this.#hasDisposeAfter && this.#disposed) {\n        const dt = this.#disposed\n        let task: DisposeTask<K, V> | undefined\n        while ((task = dt?.shift())) {\n          this.#disposeAfter?.(...task)\n        }\n      }\n    }\n  }\n\n  #evict(free: boolean) {\n    const head = this.#head\n    const k = this.#keyList[head] as K\n    const v = this.#valList[head] as V\n    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else if (this.#hasDispose || this.#hasDisposeAfter) {\n      if (this.#hasDispose) {\n        this.#dispose?.(v, k, 'evict')\n      }\n      if (this.#hasDisposeAfter) {\n        this.#disposed?.push([v, k, 'evict'])\n      }\n    }\n    this.#removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.#keyList[head] = undefined\n      this.#valList[head] = undefined\n      this.#free.push(head)\n    }\n    if (this.#size === 1) {\n      this.#head = this.#tail = 0 as Index\n      this.#free.length = 0\n    } else {\n      this.#head = this.#next[head] as Index\n    }\n    this.#keyMap.delete(k)\n    this.#size--\n    return head\n  }\n\n  /**\n   * Check if a key is in the cache, without updating the recency of use.\n   * Will return false if the item is stale, even though it is technically\n   * in the cache.\n   *\n   * Check if a key is in the cache, without updating the recency of\n   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set\n   * to `true` in either the options or the constructor.\n   *\n   * Will return `false` if the item is stale, even though it is technically in\n   * the cache. The difference can be determined (if it matters) by using a\n   * `status` argument, and inspecting the `has` field.\n   *\n   * Will not update item age unless\n   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n   */\n  has(k: K, hasOptions: LRUCache.HasOptions<K, V, FC> = {}) {\n    const { updateAgeOnHas = this.updateAgeOnHas, status } =\n      hasOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const v = this.#valList[index]\n      if (\n        this.#isBackgroundFetch(v) &&\n        v.__staleWhileFetching === undefined\n      ) {\n        return false\n      }\n      if (!this.#isStale(index)) {\n        if (updateAgeOnHas) {\n          this.#updateItemAge(index)\n        }\n        if (status) {\n          status.has = 'hit'\n          this.#statusTTL(status, index)\n        }\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.#statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  /**\n   * Like {@link LRUCache#get} but doesn't update recency or delete stale\n   * items.\n   *\n   * Returns `undefined` if the item is stale, unless\n   * {@link LRUCache.OptionsBase.allowStale} is set.\n   */\n  peek(k: K, peekOptions: LRUCache.PeekOptions<K, V, FC> = {}) {\n    const { allowStale = this.allowStale } = peekOptions\n    const index = this.#keyMap.get(k)\n    if (\n      index === undefined ||\n      (!allowStale && this.#isStale(index))\n    ) {\n      return\n    }\n    const v = this.#valList[index]\n    // either stale and allowed, or forcing a refresh of non-stale value\n    return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n  }\n\n  #backgroundFetch(\n    k: K,\n    index: Index | undefined,\n    options: LRUCache.FetchOptions<K, V, FC>,\n    context: any,\n  ): BackgroundFetch<V> {\n    const v = index === undefined ? undefined : this.#valList[index]\n    if (this.#isBackgroundFetch(v)) {\n      return v\n    }\n\n    const ac = new AC()\n    const { signal } = options\n    // when/if our AC signals, then stop listening to theirs.\n    signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n      signal: ac.signal,\n    })\n\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n\n    const cb = (\n      v: V | undefined,\n      updateCache = false,\n    ): V | undefined => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      const bf = p as BackgroundFetch<V>\n      // if nothing else has been written there but we're set to update the\n      // cache and ignore the abort, or if it's still pending on this specific\n      // background request, then write it to the cache.\n      const vl = this.#valList[index as Index]\n      if (vl === p || ignoreAbort && updateCache && vl === undefined) {\n        if (v === undefined) {\n          if (bf.__staleWhileFetching !== undefined) {\n            this.#valList[index as Index] = bf.__staleWhileFetching\n          } else {\n            this.#delete(k, 'fetch')\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n\n    const eb = (er: any) => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n\n    const fetchFail = (er: any): V | undefined => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || bf.__staleWhileFetching === undefined\n        if (del) {\n          this.#delete(k, 'fetch')\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.#valList[index as Index] = bf.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && bf.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return bf.__staleWhileFetching\n      } else if (bf.__returned === bf) {\n        throw er\n      }\n    }\n\n    const pcall = (\n      res: (v: V | undefined) => void,\n      rej: (e: any) => void,\n    ) => {\n      const fmp = this.#fetchMethod?.(k, v, fetchOpts)\n      if (fmp && fmp instanceof Promise) {\n        fmp.then(v => res(v === undefined ? undefined : v), rej)\n      }\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res(undefined)\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    const bf: BackgroundFetch<V> = Object.assign(p, {\n      __abortController: ac,\n      __staleWhileFetching: v,\n      __returned: undefined,\n    })\n\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, bf, { ...fetchOpts.options, status: undefined })\n      index = this.#keyMap.get(k)\n    } else {\n      this.#valList[index] = bf\n    }\n    return bf\n  }\n\n  #isBackgroundFetch(p: any): p is BackgroundFetch<V> {\n    if (!this.#hasFetchMethod) return false\n    const b = p as BackgroundFetch<V>\n    return (\n      !!b &&\n      b instanceof Promise &&\n      b.hasOwnProperty('__staleWhileFetching') &&\n      b.__abortController instanceof AC\n    )\n  }\n\n  /**\n   * Make an asynchronous cached fetch using the\n   * {@link LRUCache.OptionsBase.fetchMethod} function.\n   *\n   * If the value is in the cache and not stale, then the returned\n   * Promise resolves to the value.\n   *\n   * If not in the cache, or beyond its TTL staleness, then\n   * `fetchMethod(key, staleValue, { options, signal, context })` is\n   * called, and the value returned will be added to the cache once\n   * resolved.\n   *\n   * If called with `allowStale`, and an asynchronous fetch is\n   * currently in progress to reload a stale value, then the former\n   * stale value will be returned.\n   *\n   * If called with `forceRefresh`, then the cached item will be\n   * re-fetched, even if it is not stale. However, if `allowStale` is also\n   * set, then the old value will still be returned. This is useful\n   * in cases where you want to force a reload of a cached value. If\n   * a background fetch is already in progress, then `forceRefresh`\n   * has no effect.\n   *\n   * If multiple fetches for the same key are issued, then they will all be\n   * coalesced into a single call to fetchMethod.\n   *\n   * Note that this means that handling options such as\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort},\n   * {@link LRUCache.FetchOptions.signal},\n   * and {@link LRUCache.OptionsBase.allowStaleOnFetchRejection} will be\n   * determined by the FIRST fetch() call for a given key.\n   *\n   * This is a known (fixable) shortcoming which will be addresed on when\n   * someone complains about it, as the fix would involve added complexity and\n   * may not be worth the costs for this edge case.\n   *\n   * If {@link LRUCache.OptionsBase.fetchMethod} is not specified, then this is\n   * effectively an alias for `Promise.resolve(cache.get(key))`.\n   *\n   * When the fetch method resolves to a value, if the fetch has not\n   * been aborted due to deletion, eviction, or being overwritten,\n   * then it is added to the cache using the options provided.\n   *\n   * If the key is evicted or deleted before the `fetchMethod`\n   * resolves, then the AbortSignal passed to the `fetchMethod` will\n   * receive an `abort` event, and the promise returned by `fetch()`\n   * will reject with the reason for the abort.\n   *\n   * If a `signal` is passed to the `fetch()` call, then aborting the\n   * signal will abort the fetch and cause the `fetch()` promise to\n   * reject with the reason provided.\n   *\n   * **Setting `context`**\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the {@link LRUCache} constructor, then all\n   * calls to `cache.fetch()` _must_ provide a `context` option. If\n   * set to `undefined` or `void`, then calls to fetch _must not_\n   * provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that\n   * might be relevant in the course of fetching the data. It is only\n   * relevant for the course of a single `fetch()` operation, and\n   * discarded afterwards.\n   *\n   * **Note: `fetch()` calls are inflight-unique**\n   *\n   * If you call `fetch()` multiple times with the same key value,\n   * then every call after the first will resolve on the same\n   * promise<sup>1</sup>,\n   * _even if they have different settings that would otherwise change\n   * the behavior of the fetch_, such as `noDeleteOnFetchRejection`\n   * or `ignoreFetchAbort`.\n   *\n   * In most cases, this is not a problem (in fact, only fetching\n   * something once is what you probably want, if you're caching in\n   * the first place). If you are changing the fetch() options\n   * dramatically between runs, there's a good chance that you might\n   * be trying to fit divergent semantics into a single object, and\n   * would be better off with multiple cache instances.\n   *\n   * **1**: Ie, they're not the \"same Promise\", but they resolve at\n   * the same time, because they're both waiting on the same\n   * underlying fetchMethod response.\n   */\n\n  fetch(\n    k: K,\n    fetchOptions: unknown extends FC ? LRUCache.FetchOptions<K, V, FC>\n    : FC extends undefined | void ?\n      LRUCache.FetchOptionsNoContext<K, V>\n    : LRUCache.FetchOptionsWithContext<K, V, FC>,\n  ): Promise<undefined | V>\n\n  // this overload not allowed if context is required\n  fetch(\n    k: unknown extends FC ? K\n    : FC extends undefined | void ? K\n    : never,\n    fetchOptions?: unknown extends FC ?\n      LRUCache.FetchOptions<K, V, FC>\n    : FC extends undefined | void ?\n      LRUCache.FetchOptionsNoContext<K, V>\n    : never,\n  ): Promise<undefined | V>\n\n  async fetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {},\n  ): Promise<undefined | V> {\n    const {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      context,\n      forceRefresh = false,\n      status,\n      signal,\n    } = fetchOptions\n\n    if (!this.#hasFetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.#keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.#backgroundFetch(k, index, options, context)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.#isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        if (status) this.#statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.#backgroundFetch(k, index, options, context)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  /**\n   * In some cases, `cache.fetch()` may resolve to `undefined`, either because\n   * a {@link LRUCache.OptionsBase#fetchMethod} was not provided (turning\n   * `cache.fetch(k)` into just an async wrapper around `cache.get(k)`) or\n   * because `ignoreFetchAbort` was specified (either to the constructor or\n   * in the {@link LRUCache.FetchOptions}). Also, the\n   * {@link LRUCache.OptionsBase.fetchMethod} may return `undefined` or `void`, making\n   * the test even more complicated.\n   *\n   * Because inferring the cases where `undefined` might be returned are so\n   * cumbersome, but testing for `undefined` can also be annoying, this method\n   * can be used, which will reject if `this.fetch()` resolves to undefined.\n   */\n  forceFetch(\n    k: K,\n    fetchOptions: unknown extends FC ? LRUCache.FetchOptions<K, V, FC>\n    : FC extends undefined | void ?\n      LRUCache.FetchOptionsNoContext<K, V>\n    : LRUCache.FetchOptionsWithContext<K, V, FC>,\n  ): Promise<V>\n  // this overload not allowed if context is required\n  forceFetch(\n    k: unknown extends FC ? K\n    : FC extends undefined | void ? K\n    : never,\n    fetchOptions?: unknown extends FC ?\n      LRUCache.FetchOptions<K, V, FC>\n    : FC extends undefined | void ?\n      LRUCache.FetchOptionsNoContext<K, V>\n    : never,\n  ): Promise<V>\n  async forceFetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {},\n  ): Promise<V> {\n    const v = await this.fetch(\n      k,\n      fetchOptions as unknown extends FC ?\n        LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void ?\n        LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>,\n    )\n    if (v === undefined) throw new Error('fetch() returned undefined')\n    return v\n  }\n\n  /**\n   * If the key is found in the cache, then this is equivalent to\n   * {@link LRUCache#get}. If not, in the cache, then calculate the value using\n   * the {@link LRUCache.OptionsBase.memoMethod}, and add it to the cache.\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the LRUCache constructor, then all calls to `cache.memo()`\n   * _must_ provide a `context` option. If set to `undefined` or `void`, then\n   * calls to memo _must not_ provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that might be\n   * relevant in the course of fetching the data. It is only relevant for the\n   * course of a single `memo()` operation, and discarded afterwards.\n   */\n  memo(\n    k: K,\n    memoOptions: unknown extends FC ? LRUCache.MemoOptions<K, V, FC>\n    : FC extends undefined | void ?\n      LRUCache.MemoOptionsNoContext<K, V>\n    : LRUCache.MemoOptionsWithContext<K, V, FC>,\n  ): V\n  // this overload not allowed if context is required\n  memo(\n    k: unknown extends FC ? K\n    : FC extends undefined | void ? K\n    : never,\n    memoOptions?: unknown extends FC ? LRUCache.MemoOptions<K, V, FC>\n    : FC extends undefined | void ?\n      LRUCache.MemoOptionsNoContext<K, V>\n    : never,\n  ): V\n  memo(k: K, memoOptions: LRUCache.MemoOptions<K, V, FC> = {}) {\n    const memoMethod = this.#memoMethod\n    if (!memoMethod) {\n      throw new Error('no memoMethod provided to constructor')\n    }\n    const { context, forceRefresh, ...options } = memoOptions\n    const v = this.get(k, options)\n    if (!forceRefresh && v !== undefined) return v\n    const vv = memoMethod(k, v, {\n      options,\n      context,\n    } as LRUCache.MemoizerOptions<K, V, FC>)\n    this.set(k, vv, options)\n    return vv\n  }\n\n  /**\n   * Return a value from the cache. Will update the recency of the cache\n   * entry found.\n   *\n   * If the key is not found, get() will return `undefined`.\n   */\n  get(k: K, getOptions: LRUCache.GetOptions<K, V, FC> = {}) {\n    const {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = getOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.#valList[index]\n      const fetching = this.#isBackgroundFetch(value)\n      if (status) this.#statusTTL(status, index)\n      if (this.#isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.#delete(k, 'expire')\n          }\n          if (status && allowStale) status.returnedStale = true\n          return allowStale ? value : undefined\n        } else {\n          if (\n            status &&\n            allowStale &&\n            value.__staleWhileFetching !== undefined\n          ) {\n            status.returnedStale = true\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  #connect(p: Index, n: Index) {\n    this.#prev[n] = p\n    this.#next[p] = n\n  }\n\n  #moveToTail(index: Index): void {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.#tail) {\n      if (index === this.#head) {\n        this.#head = this.#next[index] as Index\n      } else {\n        this.#connect(\n          this.#prev[index] as Index,\n          this.#next[index] as Index,\n        )\n      }\n      this.#connect(this.#tail, index)\n      this.#tail = index\n    }\n  }\n\n  /**\n   * Deletes a key out of the cache.\n   *\n   * Returns true if the key was deleted, false otherwise.\n   */\n  delete(k: K) {\n    return this.#delete(k, 'delete')\n  }\n\n  #delete(k: K, reason: LRUCache.DisposeReason) {\n    let deleted = false\n    if (this.#size !== 0) {\n      const index = this.#keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.#size === 1) {\n          this.#clear(reason)\n        } else {\n          this.#removeItemSize(index)\n          const v = this.#valList[index]\n          if (this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n              this.#dispose?.(v as V, k, reason)\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([v as V, k, reason])\n            }\n          }\n          this.#keyMap.delete(k)\n          this.#keyList[index] = undefined\n          this.#valList[index] = undefined\n          if (index === this.#tail) {\n            this.#tail = this.#prev[index] as Index\n          } else if (index === this.#head) {\n            this.#head = this.#next[index] as Index\n          } else {\n            const pi = this.#prev[index] as number\n            this.#next[pi] = this.#next[index] as number\n            const ni = this.#next[index] as number\n            this.#prev[ni] = this.#prev[index] as number\n          }\n          this.#size--\n          this.#free.push(index)\n        }\n      }\n    }\n    if (this.#hasDisposeAfter && this.#disposed?.length) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Clear the cache entirely, throwing away all values.\n   */\n  clear() {\n    return this.#clear('delete')\n  }\n  #clear(reason: LRUCache.DisposeReason) {\n    for (const index of this.#rindexes({ allowStale: true })) {\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.#keyList[index]\n        if (this.#hasDispose) {\n          this.#dispose?.(v as V, k as K, reason)\n        }\n        if (this.#hasDisposeAfter) {\n          this.#disposed?.push([v as V, k as K, reason])\n        }\n      }\n    }\n\n    this.#keyMap.clear()\n    this.#valList.fill(undefined)\n    this.#keyList.fill(undefined)\n    if (this.#ttls && this.#starts) {\n      this.#ttls.fill(0)\n      this.#starts.fill(0)\n    }\n    if (this.#sizes) {\n      this.#sizes.fill(0)\n    }\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free.length = 0\n    this.#calculatedSize = 0\n    this.#size = 0\n    if (this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n  }\n}\n", "import { Position, Range, TextDocument, Uri } from \"vscode\";\r\n\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nimport { includeManager } from \"./data\";\r\nimport { IncludeData, IncludeResource } from \"./types/include\";\r\n\r\nexport const includeRegex = /^[ \\t]*(?:#?include +[\"'<])(.+)(?:[\"'>])/gm;\r\n\r\nexport function analyzeIncludesOfDocument(document: TextDocument): void {\r\n    const text = document.getText();\r\n\r\n    includeManager.setIncludeOfUri(document.uri, new IncludeResource({\r\n        uri: document.uri,\r\n        position: new Position(0, 0),\r\n        range: new Range(new Position(0, 0), new Position(0, 0)),\r\n        value: new IncludeData({\r\n            includes: new Set<string>([...text.matchAll(includeRegex)].map(m => {\r\n                const includeName = m[1];\r\n                const includeUri = Uri.joinPath(Uri.file(document.uri.fsPath).with({\r\n                    path: Uri.file(document.uri.fsPath).path.replace(/[^\\/\\\\]+$/, \"\")\r\n                }), includeName);\r\n\r\n                return getFileId(includeUri);\r\n            }))\r\n        })\r\n    }));\r\n}\r\n\r\nexport function analyzeIncludesOfWorkspace(documents: TextDocument[]): void {\r\n    includeManager.clear();\r\n    documents.forEach(doc => analyzeIncludesOfDocument(doc));\r\n\r\n    includeManager.updateReferences();\r\n}\r\n\r\nexport function removeIncludesOfDocument(uri: Uri): void {\r\n    includeManager.removeIncludeOfUri(uri);\r\n}\r\n", "import { ResourceData, ResourceDataType } from \"@/resource/types\";\r\n\r\nexport type IncludeDataType = {\r\n    includes: Set<string>;\r\n    referencedBy: Set<string>;\r\n};\r\nexport type IncludeResourceType = ResourceDataType<IncludeDataType>;\r\n\r\nexport class IncludeData implements IncludeDataType {\r\n    public includes: Set<string>;\r\n    public referencedBy: Set<string>;\r\n\r\n    constructor(props: Readonly<{\r\n        includes: Set<string>;\r\n        referencedBy?: Set<string>;\r\n    }>) {\r\n        const {\r\n            includes,\r\n            referencedBy\r\n        } = props;\r\n\r\n        this.includes = includes;\r\n        this.referencedBy = referencedBy ?? new Set<string>();\r\n    }\r\n}\r\n\r\nexport class IncludeResource extends ResourceData<IncludeDataType> { };\r\n", "import { Range, TextDocument, Uri } from \"vscode\";\r\n\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nimport { scheduleWork } from \"@/utils/scheduleWork\";\r\n\r\nimport { variableManager } from \"./data\";\r\nimport { updateVariableDiagnostics } from \"./diagnostic\";\r\nimport { refreshSemanticTokensFuncGenerator } from \"@/semantic/index\";\r\nimport { VariableDefineData, VariableDefineResource } from \"./types/variableDefine\";\r\nimport { usageVariableRegex } from \"./usageVariableRegex\";\r\nimport { VariableData, VariableResource } from \"./types/variable\";\r\nimport { includeManager } from \"../include/data\";\r\n\r\nexport const variableEquRegex = /^[ \\t]*([A-Za-z_\\?][\\dA-Za-z_\\?\\$]*)[ \\t]+EQU[ \\t]+(\\S+)(?:.*;[ \\t]*([^\\n]+))?/gmi;\r\nexport const variableDefineRegex = /^[ \\t]*#define[ \\t]+(\\S+)[ \\t]+([^\\n]*)$/gmi;\r\n\r\nexport let lastVariableAnalysisTimestamp: number = 0;\r\n\r\nfunction callbackAfterAnalysis(delay: number = 100): void {\r\n    lastVariableAnalysisTimestamp = Date.now();\r\n    scheduleWork(\r\n        \"diagnostics.updateVariables\",\r\n        () => updateVariableDiagnostics(),\r\n        delay\r\n    );\r\n    scheduleWork(\r\n        \"semantic.refreshVariables\",\r\n        refreshSemanticTokensFuncGenerator(\"variable\"),\r\n        delay + 10\r\n    );\r\n}\r\n\r\nexport function analyzeVariablesOfDocument(document: TextDocument): void {\r\n    const fileUri = getFileId(document.uri);\r\n    const text = document.getText();\r\n\r\n    variableManager.setDefineVariablesOfUri(document.uri, [\r\n        ...text.matchAll(variableEquRegex),\r\n        ...text.matchAll(variableDefineRegex)\r\n    ].map(m => {\r\n        const varName = m[1];\r\n        const varValue = m[2];\r\n        const varComment = m[3];\r\n        const varPosition = document.positionAt(m.index + m[0].indexOf(m[1]));\r\n\r\n        return new VariableDefineResource({\r\n            value: new VariableDefineData({\r\n                name: varName,\r\n                value: varValue,\r\n                comment: varComment\r\n            }),\r\n            uri: document.uri,\r\n            position: varPosition,\r\n            range: new Range(varPosition, varPosition.translate(0, varName.length))\r\n        });\r\n    }));\r\n\r\n    variableManager.setUsageVariablesOfUri(document.uri, [...text.matchAll(usageVariableRegex)].map(m => {\r\n        const varName = m[1];\r\n        const varPosition = document.positionAt(m.index + m[0].indexOf(m[1]));\r\n\r\n        return new VariableResource({\r\n            value: new VariableData({\r\n                name: varName\r\n            }),\r\n            uri: document.uri,\r\n            position: varPosition,\r\n            range: new Range(varPosition, varPosition.translate(0, varName.length))\r\n        })\r\n    }));\r\n\r\n    includeManager.fileMapData.get(fileUri)?.value.referencedBy.forEach(uri => {\r\n        const includeData = includeManager.fileMapData.get(uri);\r\n        if (!includeData) return;\r\n        variableManager.refreshUsageVariablesExistsOfUri(includeData.uri);\r\n    });\r\n\r\n    callbackAfterAnalysis();\r\n}\r\n\r\nexport function analyzeVariablesOfWorkspace(documents: TextDocument[]): void {\r\n    variableManager.clear();\r\n    documents.forEach(doc => analyzeVariablesOfDocument(doc));\r\n\r\n    variableManager.refreshAllUsageVariablesExists();\r\n\r\n    callbackAfterAnalysis();\r\n}\r\n\r\nexport function removeVariablesOfDocument(uri: Uri): void {\r\n    variableManager.removeDefineVariablesOfUri(uri);\r\n    variableManager.removeUsageVariablesOfUri(uri);\r\n\r\n    callbackAfterAnalysis();\r\n}\r\n", "import { getFileId } from \"@/utils/getFileId\";\r\nimport { Diagnostic, DiagnosticCollection, DiagnosticSeverity, languages, Uri } from \"vscode\";\r\nimport { variableManager } from \"./data\";\r\n\r\nconst variableCollections: DiagnosticCollection = languages.createDiagnosticCollection(\"pic18-asm-variables\");\r\n\r\nexport function updateVariableDiagnostics(): void {\r\n    variableCollections.clear();\r\n    const diagnosticsMap: Map<string, {\r\n        uri: Uri;\r\n        diagnostics: Diagnostic[]\r\n    }> = new Map();\r\n\r\n    const pushDiagnostic = (uri: Uri, diagnostic: Diagnostic) => {\r\n        const fileUri = getFileId(uri);\r\n        if (diagnosticsMap.has(fileUri)) diagnosticsMap.get(fileUri)!.diagnostics.push(diagnostic);\r\n        else diagnosticsMap.set(fileUri, {\r\n            uri: uri,\r\n            diagnostics: [diagnostic]\r\n        });\r\n    }\r\n\r\n    variableManager.fileMapUsageData.forEach(variables => variables.forEach(({ uri, range, value: { name, exists } }) => {\r\n        if (exists) return;\r\n\r\n        pushDiagnostic(uri, new Diagnostic(\r\n            range, `Undefined variable '${name}'`,\r\n            DiagnosticSeverity.Error\r\n        ));\r\n    }));\r\n\r\n    diagnosticsMap.forEach(({ uri, diagnostics }) => variableCollections.set(uri, diagnostics));\r\n}\r\n", "import { ResourceData, ResourceDataType } from \"@/resource/types\";\r\n\r\nexport type BaseVariableDataType = {\r\n    name: Readonly<string>;\r\n};\r\n\r\nexport type BaseVariableResourceType = ResourceDataType<BaseVariableDataType>;\r\n\r\nexport type BaseVariableDataProps = Readonly<BaseVariableDataType>;\r\nexport class BaseVariableData implements BaseVariableDataType {\r\n    public readonly name: Readonly<string>;\r\n\r\n    constructor(props: BaseVariableDataProps) {\r\n        const { name } = props;\r\n\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class BaseVariableResource extends ResourceData<BaseVariableDataType> { };\r\n", "import { ResourceData, ResourceDataType } from \"@/resource/types\";\r\n\r\nimport { BaseVariableData, BaseVariableDataProps, BaseVariableDataType } from \"./base\";\r\n\r\nexport type VariableDefineDataType = {\r\n    value: Readonly<string>;\r\n    comment?: Readonly<string>;\r\n} & BaseVariableDataType;\r\n\r\nexport type VariableDefineResourceType = ResourceDataType<VariableDefineDataType>;\r\n\r\nexport class VariableDefineData extends BaseVariableData implements VariableDefineDataType {\r\n    public readonly value: Readonly<string>;\r\n    public readonly comment?: Readonly<string>;\r\n\r\n    constructor(props: Readonly<{\r\n        value: string;\r\n        comment?: string;\r\n    }> & BaseVariableDataProps) {\r\n        super(props);\r\n        const { comment, value } = props;\r\n\r\n        this.value = value;\r\n        this.comment = comment;\r\n    }\r\n}\r\n\r\nexport class VariableDefineResource extends ResourceData<VariableDefineDataType> { };\r\n", "// Instructions:\r\n// ADDWF|ADDWFC|ANDWF|CLRF|COMF|CPFSEQ|CPFSGT|CPFSLT|DECF|DECFSZ|DCFSNZ|INCF|INCFSZ|INFSNZ|IORWF|MOVF|MOVFF|MOVWF|MULWF|NEGF|RLCF|RLNCF|RRCF|RRNCF|SETF|SUBFWB|SUBWF|SUBWFB|SWAPF|TSTFSZ|XORWF|BCF|BSF|BTFSC|BTFSS|BTG|BC|BN|BNC|BNN|BNOV|BNZ|BOV|BRA|BZ|CALL|GOTO|RCALL|RETFIE|RETLW|RETURN|ADDLW|ANDLW|IORLW|LFSR|MOVLB|MOVLW|MULLW|SUBLW|XORLW\r\nconst INSTRUCTIONS = \"ADDWF|ADDWFC|ANDWF|CLRF|COMF|CPFSEQ|CPFSGT|CPFSLT|DECF|DECFSZ|DCFSNZ|INCF|INCFSZ|INFSNZ|IORWF|MOVF|MOVFF|MOVWF|MULWF|NEGF|RLCF|RLNCF|RRCF|RRNCF|SETF|SUBFWB|SUBWF|SUBWFB|SWAPF|TSTFSZ|XORWF|BCF|BSF|BTFSC|BTFSS|BTG|RETFIE|RETLW|RETURN|ADDLW|ANDLW|IORLW|LFSR|MOVLB|MOVLW|MULLW|SUBLW|XORLW\"\r\n\r\n// Registers:\r\n// ABDEN|ABDOVF|ACKDT|ACKEN|ACKSTAT|ACQT0|ACQT1|ACQT2|ADCON0|ADCON1|ADCON2|ADCS0|ADCS1|ADCS2|ADDEN|ADEN|ADFM|ADIE|ADIF|ADIP|ADMSK1|ADMSK2|ADMSK3|ADMSK4|ADMSK5|ADON|ADRES|ADRESH|ADRESL|AN0|AN1|AN10|AN11|AN12|AN2|AN3|AN4|AN5|AN6|AN7|AN8|AN9|BANKMASK|BAUDCON|BAUDCTL|BCLIE|BCLIF|BCLIP|BF|BGST|BOR|BRG16|BRGH|BRGH1|BSR|C|C1INV|C1OUT|C1OUT_CMCON|C1OUT_PORTA|C2INV|C2OUT|C2OUT_CMCON|C2OUT_PORTA|CARRY|CCP1|CCP10|CCP1CON|CCP1IE|CCP1IF|CCP1IP|CCP1M0|CCP1M1|CCP1M2|CCP1M3|CCP1X|CCP1Y|CCP2CON|CCP2IE|CCP2IF|CCP2IP|CCP2M0|CCP2M1|CCP2M2|CCP2M3|CCP2X|CCP2Y|CCP2_PA2|CCP2_PORTB|CCP2_PORTC|CCP9E|CCPR1|CCPR1H|CCPR1L|CCPR2|CCPR2H|CCPR2L|CFGS|CHS0|CHS1|CHS2|CHS3|CHSN3|CIS|CK|CKE|CKP|CLKI|CLKO|CM0|CM1|CM2|CMCON|CMEN0|CMEN1|CMEN2|CMIE|CMIF|CMIP|CREN|CS|CSRC|CSRC1|CVR0|CVR1|CVR2|CVR3|CVRCON|CVREF|CVREN|CVROE|CVROEN|CVRR|CVRSS|D|DA|DC|DC1B0|DC1B1|DC2B0|DC2B1|DONE|DT|D_A|D_NOT_A|D_NA|EBDIS|ECCP1AS|ECCP1DEL|ECCPAS|ECCPAS0|ECCPAS1|ECCPAS2|ECCPASE|EEADR|EECON1|EECON2|EEDATA|EEFS|EEIE|EEIF|EEIP|EEPGD|FERR|FLT0|FLTS|FREE|FSR0|FSR0H|FSR0L|FSR1|FSR1H|FSR1L|FSR2|FSR2H|FSR2L|GCEN|GIE|GIEH|GIEL|GIE_GIEH|GO|GODONE|GO_DONE|GO_NOT_DONE|GO_NDONE|HLVDCON|HLVDEN|HLVDIE|HLVDIF|HLVDIN|HLVDIP|HLVDL0|HLVDL1|HLVDL2|HLVDL3|IBF|IBOV|IDLEN|INDF0|INDF1|INDF2|INT0|INT0E|INT0F|INT0IE|INT0IF|INT1|INT1E|INT1F|INT1IE|INT1IF|INT1IP|INT1P|INT2|INT2E|INT2F|INT2IE|INT2IF|INT2IP|INT2P|INTCON|INTCON2|INTCON3|INTEDG0|INTEDG1|INTEDG2|INTSRC|IOFS|IPEN|IPR1|IPR2|IRCF0|IRCF1|IRCF2|IRVST|IVRST|KBI0|KBI1|KBI2|KBI3|LA0|LA1|LA2|LA3|LA4|LA5|LA6|LA7|LATA|LATA0|LATA1|LATA2|LATA3|LATA4|LATA5|LATA6|LATA7|LATB|LATB0|LATB1|LATB2|LATB3|LATB4|LATB5|LATB6|LATB7|LATC|LATC0|LATC1|LATC2|LATC3|LATC4|LATC5|LATC6|LATC7|LATD|LATD0|LATD1|LATD2|LATD3|LATD4|LATD5|LATD6|LATD7|LATE|LATE0|LATE1|LATE2|LB0|LB1|LB2|LB3|LB4|LB5|LB6|LB7|LC0|LC1|LC2|LC3|LC4|LC5|LC6|LC7|LD0|LD1|LD2|LD3|LD4|LD5|LD6|LD7|LE0|LE1|LE2|LVDCON|LVDEN|LVDIE|LVDIF|LVDIN|LVDIP|LVDL0|LVDL1|LVDL2|LVDL3|LVV0|LVV1|LVV2|LVV3|MCLR|N|NEGATIVE|NOT_A|NOT_ADDRESS|NOT_BOR|NOT_CS|NOT_DONE|NOT_MCLR|NOT_PD|NOT_POR|NOT_RBPU|NOT_RD|NOT_RI|NOT_SS|NOT_T1SYNC|NOT_T3SYNC|NOT_TO|NOT_W|NOT_WR|NOT_WRITE|OBF|OERR|OSC1|OSC2|OSCCON|OSCFIE|OSCFIF|OSCFIP|OSCTUNE|OSTS|OV|OVERFLOW|P|P1A|P1B|P1C|P1D|P1M0|P1M1|PA1|PA2|PAGEMASK|PB2|PC|PC2|PC3E|PCFG0|PCFG1|PCFG2|PCFG3|PCL|PCLAT|PCLATH|PCLATU|PD|PD2|PDC0|PDC1|PDC2|PDC3|PDC4|PDC5|PDC6|PEIE|PEIE_GIEL|PEN|PGC|PGD|PGM|PIE1|PIE2|PIR1|PIR2|PLLEN|PLUSW0|PLUSW1|PLUSW2|POR|PORTA|PORTB|PORTC|PORTD|PORTE|POSTDEC0|POSTDEC1|POSTDEC2|POSTINC0|POSTINC1|POSTINC2|PR2|PREINC0|PREINC1|PREINC2|PROD|PRODH|PRODL|PRSEN|PSA|PSP0|PSP1|PSP2|PSP3|PSP4|PSP5|PSP6|PSP7|PSPIE|PSPIF|PSPIP|PSPMODE|PSSAC0|PSSAC1|PSSBD0|PSSBD1|PWM1CON|R|RA0|RA1|RA2|RA3|RA4|RA5|RA6|RA7|RB0|RB1|RB2|RB3|RB4|RB5|RB6|RB7|RBIE|RBIF|RBIP|RBPU|RC0|RC1|RC1IE|RC1IF|RC1IP|RC2|RC3|RC4|RC5|RC6|RC7|RC8_9|RC9|RCD8|RCEN|RCIDL|RCIE|RCIF|RCIP|RCMT|RCON|RCREG|RCSTA|RD|RD0|RD1|RD16|RD163|RD2|RD3|RD4|RD5|RD6|RD7|RDE|RE0|RE1|RE2|RE3|RI|RJPU|RSEN|RW|RX|RX9|RX9D|RXCKP|RXDTP|R_NOT_W|R_W|R_NW|S|SBOREN|SCK|SCKP|SCL|SCS0|SCS1|SDA|SDI|SDO|SEN|SENDB|SENDB1|SMP|SOSCEN|SOSCEN3|SP0|SP1|SP2|SP3|SP4|SPACE_CODE|SPACE_DATA|SPACE_EEPROM|SPBRG|SPBRGH|SPEN|SREN|SRENA|SS|SS2|SSPADD|SSPBUF|SSPCON1|SSPCON2|SSPEN|SSPIE|SSPIF|SSPIP|SSPM0|SSPM1|SSPM2|SSPM3|SSPOV|SSPSTAT|START|STATUS|STKFUL|STKOVF|STKPTR|STKUNF|STOP|SWDTE|SWDTEN|SYNC|SYNC1|T016BIT|T08BIT|T0CKI|T0CON|T0CS|T0IE|T0IF|T0PS0|T0PS1|T0PS2|T0PS3|T0SE|T13CKI|T1CKI|T1CKPS0|T1CKPS1|T1CON|T1OSCEN|T1OSI|T1OSO|T1RD16|T1RUN|T1SYNC|T2CKPS0|T2CKPS1|T2CON|T2OUTPS0|T2OUTPS1|T2OUTPS2|T2OUTPS3|T3CCP1|T3CCP2|T3CKPS0|T3CKPS1|T3CON|T3RD16|T3SYNC|TABLAT|TBLPTR|TBLPTRH|TBLPTRL|TBLPTRU|TMR0|TMR0H|TMR0IE|TMR0IF|TMR0IP|TMR0L|TMR0ON|TMR1|TMR1CS|TMR1H|TMR1IE|TMR1IF|TMR1IP|TMR1L|TMR1ON|TMR2|TMR2IE|TMR2IF|TMR2IP|TMR2ON|TMR3|TMR3CS|TMR3H|TMR3IE|TMR3IF|TMR3IP|TMR3L|TMR3ON|TO|TOS|TOSH|TOSL|TOSU|TOUTPS0|TOUTPS1|TOUTPS2|TOUTPS3|TRISA|TRISA0|TRISA1|TRISA2|TRISA3|TRISA4|TRISA5|TRISA6|TRISA7|TRISB|TRISB0|TRISB1|TRISB2|TRISB3|TRISB4|TRISB5|TRISB6|TRISB7|TRISC|TRISC0|TRISC1|TRISC2|TRISC3|TRISC4|TRISC5|TRISC6|TRISC7|TRISD|TRISD0|TRISD1|TRISD2|TRISD3|TRISD4|TRISD5|TRISD6|TRISD7|TRISE|TRISE0|TRISE1|TRISE2|TRMT|TRMT1|TUN0|TUN1|TUN2|TUN3|TUN4|TX|TX1IE|TX1IF|TX1IP|TX8_9|TX9|TX91|TX9D|TX9D1|TXCKP|TXD8|TXEN|TXEN1|TXIE|TXIF|TXIP|TXREG|TXSTA|UA|ULPWUIN|VCFG0|VCFG01|VCFG1|VCFG11|VDIRMAG|VPP|VREFN|VREFP|W4E|WAIT0|WAIT1|WCOL|WDTCON|WM0|WM1|WR|WRE|WREG|WREN|WRERR|WUE|Z|ZERO|_BOREN_NOSLP_2L|_BOREN_OFF_2L|_BOREN_ON_2L|_BOREN_SBORDIS_2L|_BORV_0_2L|_BORV_1_2L|_BORV_2_2L|_BORV_3_2L|_CCP2MX_PORTBE_3H|_CCP2MX_PORTC_3H|_CONFIG1H|_CONFIG2H|_CONFIG2L|_CONFIG3H|_CONFIG4L|_CONFIG5H|_CONFIG5L|_CONFIG6H|_CONFIG6L|_CONFIG7H|_CONFIG7L|_CP0_OFF_5L|_CP0_ON_5L|_CP1_OFF_5L|_CP1_ON_5L|_CP2_OFF_5L|_CP2_ON_5L|_CP3_OFF_5L|_CP3_ON_5L|_CPB_OFF_5H|_CPB_ON_5H|_CPD_OFF_5H|_CPD_ON_5H|_DEBUG_OFF_4L|_DEBUG_ON_4L|_DEVID1|_DEVID2|_EBTR0_OFF_7L|_EBTR0_ON_7L|_EBTR1_OFF_7L|_EBTR1_ON_7L|_EBTR2_OFF_7L|_EBTR2_ON_7L|_EBTR3_OFF_7L|_EBTR3_ON_7L|_EBTRB_OFF_7H|_EBTRB_ON_7H|_FCMEN_OFF_1H|_FCMEN_ON_1H|_IDLOC0|_IDLOC1|_IDLOC2|_IDLOC3|_IDLOC4|_IDLOC5|_IDLOC6|_IDLOC7|_IESO_OFF_1H|_IESO_ON_1H|_LPT1OSC_OFF_3H|_LPT1OSC_ON_3H|_LVP_OFF_4L|_LVP_ON_4L|_MCLRE_OFF_3H|_MCLRE_ON_3H|_OSC_ECIO6_1H|_OSC_EC_1H|_OSC_HSPLL_1H|_OSC_HS_1H|_OSC_INTIO67_1H|_OSC_INTIO7_1H|_OSC_LP_1H|_OSC_RCIO6_1H|_OSC_RC_1H|_OSC_XT_1H|_PBADEN_OFF_3H|_PBADEN_ON_3H|_PWRT_OFF_2L|_PWRT_ON_2L|_STVREN_OFF_4L|_STVREN_ON_4L|_WDTPS_1024_2H|_WDTPS_128_2H|_WDTPS_16384_2H|_WDTPS_16_2H|_WDTPS_1_2H|_WDTPS_2048_2H|_WDTPS_256_2H|_WDTPS_2_2H|_WDTPS_32768_2H|_WDTPS_32_2H|_WDTPS_4096_2H|_WDTPS_4_2H|_WDTPS_512_2H|_WDTPS_64_2H|_WDTPS_8192_2H|_WDTPS_8_2H|_WDT_OFF_2H|_WDT_ON_2H|_WRT0_OFF_6L|_WRT0_ON_6L|_WRT1_OFF_6L|_WRT1_ON_6L|_WRT2_OFF_6L|_WRT2_ON_6L|_WRT3_OFF_6L|_WRT3_ON_6L|_WRTB_OFF_6H|_WRTB_ON_6H|_WRTC_OFF_6H|_WRTC_ON_6H|_WRTD_OFF_6H|_WRTD_ON_6H|_XINST_OFF_4L|_XINST_ON_4L|NA|NADDRESS|NBOR|NCS|NDONE|NMCLR|NPD|NPOR|NRBPU|NRD|NRI|NSS|NT1SYNC|NT3SYNC|NTO|NW|NWR|NWRITE\r\nconst REGISTERS = \"ABDEN|ABDOVF|ACKDT|ACKEN|ACKSTAT|ACQT0|ACQT1|ACQT2|ADCON0|ADCON1|ADCON2|ADCS0|ADCS1|ADCS2|ADDEN|ADEN|ADFM|ADIE|ADIF|ADIP|ADMSK1|ADMSK2|ADMSK3|ADMSK4|ADMSK5|ADON|ADRES|ADRESH|ADRESL|AN0|AN1|AN10|AN11|AN12|AN2|AN3|AN4|AN5|AN6|AN7|AN8|AN9|BANKMASK|BAUDCON|BAUDCTL|BCLIE|BCLIF|BCLIP|BF|BGST|BOR|BRG16|BRGH|BRGH1|BSR|C|C1INV|C1OUT|C1OUT_CMCON|C1OUT_PORTA|C2INV|C2OUT|C2OUT_CMCON|C2OUT_PORTA|CARRY|CCP1|CCP10|CCP1CON|CCP1IE|CCP1IF|CCP1IP|CCP1M0|CCP1M1|CCP1M2|CCP1M3|CCP1X|CCP1Y|CCP2CON|CCP2IE|CCP2IF|CCP2IP|CCP2M0|CCP2M1|CCP2M2|CCP2M3|CCP2X|CCP2Y|CCP2_PA2|CCP2_PORTB|CCP2_PORTC|CCP9E|CCPR1|CCPR1H|CCPR1L|CCPR2|CCPR2H|CCPR2L|CFGS|CHS0|CHS1|CHS2|CHS3|CHSN3|CIS|CK|CKE|CKP|CLKI|CLKO|CM0|CM1|CM2|CMCON|CMEN0|CMEN1|CMEN2|CMIE|CMIF|CMIP|CREN|CS|CSRC|CSRC1|CVR0|CVR1|CVR2|CVR3|CVRCON|CVREF|CVREN|CVROE|CVROEN|CVRR|CVRSS|D|DA|DC|DC1B0|DC1B1|DC2B0|DC2B1|DONE|DT|D_A|D_NOT_A|D_NA|EBDIS|ECCP1AS|ECCP1DEL|ECCPAS|ECCPAS0|ECCPAS1|ECCPAS2|ECCPASE|EEADR|EECON1|EECON2|EEDATA|EEFS|EEIE|EEIF|EEIP|EEPGD|FERR|FLT0|FLTS|FREE|FSR0|FSR0H|FSR0L|FSR1|FSR1H|FSR1L|FSR2|FSR2H|FSR2L|GCEN|GIE|GIEH|GIEL|GIE_GIEH|GO|GODONE|GO_DONE|GO_NOT_DONE|GO_NDONE|HLVDCON|HLVDEN|HLVDIE|HLVDIF|HLVDIN|HLVDIP|HLVDL0|HLVDL1|HLVDL2|HLVDL3|IBF|IBOV|IDLEN|INDF0|INDF1|INDF2|INT0|INT0E|INT0F|INT0IE|INT0IF|INT1|INT1E|INT1F|INT1IE|INT1IF|INT1IP|INT1P|INT2|INT2E|INT2F|INT2IE|INT2IF|INT2IP|INT2P|INTCON|INTCON2|INTCON3|INTEDG0|INTEDG1|INTEDG2|INTSRC|IOFS|IPEN|IPR1|IPR2|IRCF0|IRCF1|IRCF2|IRVST|IVRST|KBI0|KBI1|KBI2|KBI3|LA0|LA1|LA2|LA3|LA4|LA5|LA6|LA7|LATA|LATA0|LATA1|LATA2|LATA3|LATA4|LATA5|LATA6|LATA7|LATB|LATB0|LATB1|LATB2|LATB3|LATB4|LATB5|LATB6|LATB7|LATC|LATC0|LATC1|LATC2|LATC3|LATC4|LATC5|LATC6|LATC7|LATD|LATD0|LATD1|LATD2|LATD3|LATD4|LATD5|LATD6|LATD7|LATE|LATE0|LATE1|LATE2|LB0|LB1|LB2|LB3|LB4|LB5|LB6|LB7|LC0|LC1|LC2|LC3|LC4|LC5|LC6|LC7|LD0|LD1|LD2|LD3|LD4|LD5|LD6|LD7|LE0|LE1|LE2|LVDCON|LVDEN|LVDIE|LVDIF|LVDIN|LVDIP|LVDL0|LVDL1|LVDL2|LVDL3|LVV0|LVV1|LVV2|LVV3|MCLR|N|NEGATIVE|NOT_A|NOT_ADDRESS|NOT_BOR|NOT_CS|NOT_DONE|NOT_MCLR|NOT_PD|NOT_POR|NOT_RBPU|NOT_RD|NOT_RI|NOT_SS|NOT_T1SYNC|NOT_T3SYNC|NOT_TO|NOT_W|NOT_WR|NOT_WRITE|OBF|OERR|OSC1|OSC2|OSCCON|OSCFIE|OSCFIF|OSCFIP|OSCTUNE|OSTS|OV|OVERFLOW|P|P1A|P1B|P1C|P1D|P1M0|P1M1|PA1|PA2|PAGEMASK|PB2|PC|PC2|PC3E|PCFG0|PCFG1|PCFG2|PCFG3|PCL|PCLAT|PCLATH|PCLATU|PD|PD2|PDC0|PDC1|PDC2|PDC3|PDC4|PDC5|PDC6|PEIE|PEIE_GIEL|PEN|PGC|PGD|PGM|PIE1|PIE2|PIR1|PIR2|PLLEN|PLUSW0|PLUSW1|PLUSW2|POR|PORTA|PORTB|PORTC|PORTD|PORTE|POSTDEC0|POSTDEC1|POSTDEC2|POSTINC0|POSTINC1|POSTINC2|PR2|PREINC0|PREINC1|PREINC2|PROD|PRODH|PRODL|PRSEN|PSA|PSP0|PSP1|PSP2|PSP3|PSP4|PSP5|PSP6|PSP7|PSPIE|PSPIF|PSPIP|PSPMODE|PSSAC0|PSSAC1|PSSBD0|PSSBD1|PWM1CON|R|RA0|RA1|RA2|RA3|RA4|RA5|RA6|RA7|RB0|RB1|RB2|RB3|RB4|RB5|RB6|RB7|RBIE|RBIF|RBIP|RBPU|RC0|RC1|RC1IE|RC1IF|RC1IP|RC2|RC3|RC4|RC5|RC6|RC7|RC8_9|RC9|RCD8|RCEN|RCIDL|RCIE|RCIF|RCIP|RCMT|RCON|RCREG|RCSTA|RD|RD0|RD1|RD16|RD163|RD2|RD3|RD4|RD5|RD6|RD7|RDE|RE0|RE1|RE2|RE3|RI|RJPU|RSEN|RW|RX|RX9|RX9D|RXCKP|RXDTP|R_NOT_W|R_W|R_NW|S|SBOREN|SCK|SCKP|SCL|SCS0|SCS1|SDA|SDI|SDO|SEN|SENDB|SENDB1|SMP|SOSCEN|SOSCEN3|SP0|SP1|SP2|SP3|SP4|SPACE_CODE|SPACE_DATA|SPACE_EEPROM|SPBRG|SPBRGH|SPEN|SREN|SRENA|SS|SS2|SSPADD|SSPBUF|SSPCON1|SSPCON2|SSPEN|SSPIE|SSPIF|SSPIP|SSPM0|SSPM1|SSPM2|SSPM3|SSPOV|SSPSTAT|START|STATUS|STKFUL|STKOVF|STKPTR|STKUNF|STOP|SWDTE|SWDTEN|SYNC|SYNC1|T016BIT|T08BIT|T0CKI|T0CON|T0CS|T0IE|T0IF|T0PS0|T0PS1|T0PS2|T0PS3|T0SE|T13CKI|T1CKI|T1CKPS0|T1CKPS1|T1CON|T1OSCEN|T1OSI|T1OSO|T1RD16|T1RUN|T1SYNC|T2CKPS0|T2CKPS1|T2CON|T2OUTPS0|T2OUTPS1|T2OUTPS2|T2OUTPS3|T3CCP1|T3CCP2|T3CKPS0|T3CKPS1|T3CON|T3RD16|T3SYNC|TABLAT|TBLPTR|TBLPTRH|TBLPTRL|TBLPTRU|TMR0|TMR0H|TMR0IE|TMR0IF|TMR0IP|TMR0L|TMR0ON|TMR1|TMR1CS|TMR1H|TMR1IE|TMR1IF|TMR1IP|TMR1L|TMR1ON|TMR2|TMR2IE|TMR2IF|TMR2IP|TMR2ON|TMR3|TMR3CS|TMR3H|TMR3IE|TMR3IF|TMR3IP|TMR3L|TMR3ON|TO|TOS|TOSH|TOSL|TOSU|TOUTPS0|TOUTPS1|TOUTPS2|TOUTPS3|TRISA|TRISA0|TRISA1|TRISA2|TRISA3|TRISA4|TRISA5|TRISA6|TRISA7|TRISB|TRISB0|TRISB1|TRISB2|TRISB3|TRISB4|TRISB5|TRISB6|TRISB7|TRISC|TRISC0|TRISC1|TRISC2|TRISC3|TRISC4|TRISC5|TRISC6|TRISC7|TRISD|TRISD0|TRISD1|TRISD2|TRISD3|TRISD4|TRISD5|TRISD6|TRISD7|TRISE|TRISE0|TRISE1|TRISE2|TRMT|TRMT1|TUN0|TUN1|TUN2|TUN3|TUN4|TX|TX1IE|TX1IF|TX1IP|TX8_9|TX9|TX91|TX9D|TX9D1|TXCKP|TXD8|TXEN|TXEN1|TXIE|TXIF|TXIP|TXREG|TXSTA|UA|ULPWUIN|VCFG0|VCFG01|VCFG1|VCFG11|VDIRMAG|VPP|VREFN|VREFP|W4E|WAIT0|WAIT1|WCOL|WDTCON|WM0|WM1|WR|WRE|WREG|WREN|WRERR|WUE|Z|ZERO|_BOREN_NOSLP_2L|_BOREN_OFF_2L|_BOREN_ON_2L|_BOREN_SBORDIS_2L|_BORV_0_2L|_BORV_1_2L|_BORV_2_2L|_BORV_3_2L|_CCP2MX_PORTBE_3H|_CCP2MX_PORTC_3H|_CONFIG1H|_CONFIG2H|_CONFIG2L|_CONFIG3H|_CONFIG4L|_CONFIG5H|_CONFIG5L|_CONFIG6H|_CONFIG6L|_CONFIG7H|_CONFIG7L|_CP0_OFF_5L|_CP0_ON_5L|_CP1_OFF_5L|_CP1_ON_5L|_CP2_OFF_5L|_CP2_ON_5L|_CP3_OFF_5L|_CP3_ON_5L|_CPB_OFF_5H|_CPB_ON_5H|_CPD_OFF_5H|_CPD_ON_5H|_DEBUG_OFF_4L|_DEBUG_ON_4L|_DEVID1|_DEVID2|_EBTR0_OFF_7L|_EBTR0_ON_7L|_EBTR1_OFF_7L|_EBTR1_ON_7L|_EBTR2_OFF_7L|_EBTR2_ON_7L|_EBTR3_OFF_7L|_EBTR3_ON_7L|_EBTRB_OFF_7H|_EBTRB_ON_7H|_FCMEN_OFF_1H|_FCMEN_ON_1H|_IDLOC0|_IDLOC1|_IDLOC2|_IDLOC3|_IDLOC4|_IDLOC5|_IDLOC6|_IDLOC7|_IESO_OFF_1H|_IESO_ON_1H|_LPT1OSC_OFF_3H|_LPT1OSC_ON_3H|_LVP_OFF_4L|_LVP_ON_4L|_MCLRE_OFF_3H|_MCLRE_ON_3H|_OSC_ECIO6_1H|_OSC_EC_1H|_OSC_HSPLL_1H|_OSC_HS_1H|_OSC_INTIO67_1H|_OSC_INTIO7_1H|_OSC_LP_1H|_OSC_RCIO6_1H|_OSC_RC_1H|_OSC_XT_1H|_PBADEN_OFF_3H|_PBADEN_ON_3H|_PWRT_OFF_2L|_PWRT_ON_2L|_STVREN_OFF_4L|_STVREN_ON_4L|_WDTPS_1024_2H|_WDTPS_128_2H|_WDTPS_16384_2H|_WDTPS_16_2H|_WDTPS_1_2H|_WDTPS_2048_2H|_WDTPS_256_2H|_WDTPS_2_2H|_WDTPS_32768_2H|_WDTPS_32_2H|_WDTPS_4096_2H|_WDTPS_4_2H|_WDTPS_512_2H|_WDTPS_64_2H|_WDTPS_8192_2H|_WDTPS_8_2H|_WDT_OFF_2H|_WDT_ON_2H|_WRT0_OFF_6L|_WRT0_ON_6L|_WRT1_OFF_6L|_WRT1_ON_6L|_WRT2_OFF_6L|_WRT2_ON_6L|_WRT3_OFF_6L|_WRT3_ON_6L|_WRTB_OFF_6H|_WRTB_ON_6H|_WRTC_OFF_6H|_WRTC_ON_6H|_WRTD_OFF_6H|_WRTD_ON_6H|_XINST_OFF_4L|_XINST_ON_4L|NA|NADDRESS|NBOR|NCS|NDONE|NMCLR|NPD|NPOR|NRBPU|NRD|NRI|NSS|NT1SYNC|NT3SYNC|NTO|NW|NWR|NWRITE\"\r\n\r\n// Base regex pattern:\r\n// (?<=(?:instructions)[ \\t](?:.*[ \\t,])?)(?:(?!\\d|(?:[abcfw])\\b)(?:([\\dA-Z_\\?\\$]+)\\b))(?=$|[, \\t])\r\n\r\n// export const usageVariableRegex = /(?<=(?:ADDWF|ADDWFC|ANDWF|CLRF|COMF|CPFSEQ|CPFSGT|CPFSLT|DECF|DECFSZ|DCFSNZ|INCF|INCFSZ|INFSNZ|IORWF|MOVF|MOVFF|MOVWF|MULWF|NEGF|RLCF|RLNCF|RRCF|RRNCF|SETF|SUBFWB|SUBWF|SUBWFB|SWAPF|TSTFSZ|XORWF|BCF|BSF|BTFSC|BTFSS|BTG|RETFIE|RETLW|RETURN|ADDLW|ANDLW|IORLW|LFSR|MOVLB|MOVLW|MULLW|SUBLW|XORLW)[ \\t](?:.*[ \\t,])?)(?:(?!\\d|(?:[abcfw]|ABDEN|ABDOVF|ACKDT|ACKEN|ACKSTAT|ACQT0|ACQT1|ACQT2|ADCON0|ADCON1|ADCON2|ADCS0|ADCS1|ADCS2|ADDEN|ADEN|ADFM|ADIE|ADIF|ADIP|ADMSK1|ADMSK2|ADMSK3|ADMSK4|ADMSK5|ADON|ADRES|ADRESH|ADRESL|AN0|AN1|AN10|AN11|AN12|AN2|AN3|AN4|AN5|AN6|AN7|AN8|AN9|BANKMASK|BAUDCON|BAUDCTL|BCLIE|BCLIF|BCLIP|BF|BGST|BOR|BRG16|BRGH|BRGH1|BSR|C|C1INV|C1OUT|C1OUT_CMCON|C1OUT_PORTA|C2INV|C2OUT|C2OUT_CMCON|C2OUT_PORTA|CARRY|CCP1|CCP10|CCP1CON|CCP1IE|CCP1IF|CCP1IP|CCP1M0|CCP1M1|CCP1M2|CCP1M3|CCP1X|CCP1Y|CCP2CON|CCP2IE|CCP2IF|CCP2IP|CCP2M0|CCP2M1|CCP2M2|CCP2M3|CCP2X|CCP2Y|CCP2_PA2|CCP2_PORTB|CCP2_PORTC|CCP9E|CCPR1|CCPR1H|CCPR1L|CCPR2|CCPR2H|CCPR2L|CFGS|CHS0|CHS1|CHS2|CHS3|CHSN3|CIS|CK|CKE|CKP|CLKI|CLKO|CM0|CM1|CM2|CMCON|CMEN0|CMEN1|CMEN2|CMIE|CMIF|CMIP|CREN|CS|CSRC|CSRC1|CVR0|CVR1|CVR2|CVR3|CVRCON|CVREF|CVREN|CVROE|CVROEN|CVRR|CVRSS|D|DA|DC|DC1B0|DC1B1|DC2B0|DC2B1|DONE|DT|D_A|D_NOT_A|D_NA|EBDIS|ECCP1AS|ECCP1DEL|ECCPAS|ECCPAS0|ECCPAS1|ECCPAS2|ECCPASE|EEADR|EECON1|EECON2|EEDATA|EEFS|EEIE|EEIF|EEIP|EEPGD|FERR|FLT0|FLTS|FREE|FSR0|FSR0H|FSR0L|FSR1|FSR1H|FSR1L|FSR2|FSR2H|FSR2L|GCEN|GIE|GIEH|GIEL|GIE_GIEH|GO|GODONE|GO_DONE|GO_NOT_DONE|GO_NDONE|HLVDCON|HLVDEN|HLVDIE|HLVDIF|HLVDIN|HLVDIP|HLVDL0|HLVDL1|HLVDL2|HLVDL3|IBF|IBOV|IDLEN|INDF0|INDF1|INDF2|INT0|INT0E|INT0F|INT0IE|INT0IF|INT1|INT1E|INT1F|INT1IE|INT1IF|INT1IP|INT1P|INT2|INT2E|INT2F|INT2IE|INT2IF|INT2IP|INT2P|INTCON|INTCON2|INTCON3|INTEDG0|INTEDG1|INTEDG2|INTSRC|IOFS|IPEN|IPR1|IPR2|IRCF0|IRCF1|IRCF2|IRVST|IVRST|KBI0|KBI1|KBI2|KBI3|LA0|LA1|LA2|LA3|LA4|LA5|LA6|LA7|LATA|LATA0|LATA1|LATA2|LATA3|LATA4|LATA5|LATA6|LATA7|LATB|LATB0|LATB1|LATB2|LATB3|LATB4|LATB5|LATB6|LATB7|LATC|LATC0|LATC1|LATC2|LATC3|LATC4|LATC5|LATC6|LATC7|LATD|LATD0|LATD1|LATD2|LATD3|LATD4|LATD5|LATD6|LATD7|LATE|LATE0|LATE1|LATE2|LB0|LB1|LB2|LB3|LB4|LB5|LB6|LB7|LC0|LC1|LC2|LC3|LC4|LC5|LC6|LC7|LD0|LD1|LD2|LD3|LD4|LD5|LD6|LD7|LE0|LE1|LE2|LVDCON|LVDEN|LVDIE|LVDIF|LVDIN|LVDIP|LVDL0|LVDL1|LVDL2|LVDL3|LVV0|LVV1|LVV2|LVV3|MCLR|N|NEGATIVE|NOT_A|NOT_ADDRESS|NOT_BOR|NOT_CS|NOT_DONE|NOT_MCLR|NOT_PD|NOT_POR|NOT_RBPU|NOT_RD|NOT_RI|NOT_SS|NOT_T1SYNC|NOT_T3SYNC|NOT_TO|NOT_W|NOT_WR|NOT_WRITE|OBF|OERR|OSC1|OSC2|OSCCON|OSCFIE|OSCFIF|OSCFIP|OSCTUNE|OSTS|OV|OVERFLOW|P|P1A|P1B|P1C|P1D|P1M0|P1M1|PA1|PA2|PAGEMASK|PB2|PC|PC2|PC3E|PCFG0|PCFG1|PCFG2|PCFG3|PCL|PCLAT|PCLATH|PCLATU|PD|PD2|PDC0|PDC1|PDC2|PDC3|PDC4|PDC5|PDC6|PEIE|PEIE_GIEL|PEN|PGC|PGD|PGM|PIE1|PIE2|PIR1|PIR2|PLLEN|PLUSW0|PLUSW1|PLUSW2|POR|PORTA|PORTB|PORTC|PORTD|PORTE|POSTDEC0|POSTDEC1|POSTDEC2|POSTINC0|POSTINC1|POSTINC2|PR2|PREINC0|PREINC1|PREINC2|PROD|PRODH|PRODL|PRSEN|PSA|PSP0|PSP1|PSP2|PSP3|PSP4|PSP5|PSP6|PSP7|PSPIE|PSPIF|PSPIP|PSPMODE|PSSAC0|PSSAC1|PSSBD0|PSSBD1|PWM1CON|R|RA0|RA1|RA2|RA3|RA4|RA5|RA6|RA7|RB0|RB1|RB2|RB3|RB4|RB5|RB6|RB7|RBIE|RBIF|RBIP|RBPU|RC0|RC1|RC1IE|RC1IF|RC1IP|RC2|RC3|RC4|RC5|RC6|RC7|RC8_9|RC9|RCD8|RCEN|RCIDL|RCIE|RCIF|RCIP|RCMT|RCON|RCREG|RCSTA|RD|RD0|RD1|RD16|RD163|RD2|RD3|RD4|RD5|RD6|RD7|RDE|RE0|RE1|RE2|RE3|RI|RJPU|RSEN|RW|RX|RX9|RX9D|RXCKP|RXDTP|R_NOT_W|R_W|R_NW|S|SBOREN|SCK|SCKP|SCL|SCS0|SCS1|SDA|SDI|SDO|SEN|SENDB|SENDB1|SMP|SOSCEN|SOSCEN3|SP0|SP1|SP2|SP3|SP4|SPACE_CODE|SPACE_DATA|SPACE_EEPROM|SPBRG|SPBRGH|SPEN|SREN|SRENA|SS|SS2|SSPADD|SSPBUF|SSPCON1|SSPCON2|SSPEN|SSPIE|SSPIF|SSPIP|SSPM0|SSPM1|SSPM2|SSPM3|SSPOV|SSPSTAT|START|STATUS|STKFUL|STKOVF|STKPTR|STKUNF|STOP|SWDTE|SWDTEN|SYNC|SYNC1|T016BIT|T08BIT|T0CKI|T0CON|T0CS|T0IE|T0IF|T0PS0|T0PS1|T0PS2|T0PS3|T0SE|T13CKI|T1CKI|T1CKPS0|T1CKPS1|T1CON|T1OSCEN|T1OSI|T1OSO|T1RD16|T1RUN|T1SYNC|T2CKPS0|T2CKPS1|T2CON|T2OUTPS0|T2OUTPS1|T2OUTPS2|T2OUTPS3|T3CCP1|T3CCP2|T3CKPS0|T3CKPS1|T3CON|T3RD16|T3SYNC|TABLAT|TBLPTR|TBLPTRH|TBLPTRL|TBLPTRU|TMR0|TMR0H|TMR0IE|TMR0IF|TMR0IP|TMR0L|TMR0ON|TMR1|TMR1CS|TMR1H|TMR1IE|TMR1IF|TMR1IP|TMR1L|TMR1ON|TMR2|TMR2IE|TMR2IF|TMR2IP|TMR2ON|TMR3|TMR3CS|TMR3H|TMR3IE|TMR3IF|TMR3IP|TMR3L|TMR3ON|TO|TOS|TOSH|TOSL|TOSU|TOUTPS0|TOUTPS1|TOUTPS2|TOUTPS3|TRISA|TRISA0|TRISA1|TRISA2|TRISA3|TRISA4|TRISA5|TRISA6|TRISA7|TRISB|TRISB0|TRISB1|TRISB2|TRISB3|TRISB4|TRISB5|TRISB6|TRISB7|TRISC|TRISC0|TRISC1|TRISC2|TRISC3|TRISC4|TRISC5|TRISC6|TRISC7|TRISD|TRISD0|TRISD1|TRISD2|TRISD3|TRISD4|TRISD5|TRISD6|TRISD7|TRISE|TRISE0|TRISE1|TRISE2|TRMT|TRMT1|TUN0|TUN1|TUN2|TUN3|TUN4|TX|TX1IE|TX1IF|TX1IP|TX8_9|TX9|TX91|TX9D|TX9D1|TXCKP|TXD8|TXEN|TXEN1|TXIE|TXIF|TXIP|TXREG|TXSTA|UA|ULPWUIN|VCFG0|VCFG01|VCFG1|VCFG11|VDIRMAG|VPP|VREFN|VREFP|W4E|WAIT0|WAIT1|WCOL|WDTCON|WM0|WM1|WR|WRE|WREG|WREN|WRERR|WUE|Z|ZERO|_BOREN_NOSLP_2L|_BOREN_OFF_2L|_BOREN_ON_2L|_BOREN_SBORDIS_2L|_BORV_0_2L|_BORV_1_2L|_BORV_2_2L|_BORV_3_2L|_CCP2MX_PORTBE_3H|_CCP2MX_PORTC_3H|_CONFIG1H|_CONFIG2H|_CONFIG2L|_CONFIG3H|_CONFIG4L|_CONFIG5H|_CONFIG5L|_CONFIG6H|_CONFIG6L|_CONFIG7H|_CONFIG7L|_CP0_OFF_5L|_CP0_ON_5L|_CP1_OFF_5L|_CP1_ON_5L|_CP2_OFF_5L|_CP2_ON_5L|_CP3_OFF_5L|_CP3_ON_5L|_CPB_OFF_5H|_CPB_ON_5H|_CPD_OFF_5H|_CPD_ON_5H|_DEBUG_OFF_4L|_DEBUG_ON_4L|_DEVID1|_DEVID2|_EBTR0_OFF_7L|_EBTR0_ON_7L|_EBTR1_OFF_7L|_EBTR1_ON_7L|_EBTR2_OFF_7L|_EBTR2_ON_7L|_EBTR3_OFF_7L|_EBTR3_ON_7L|_EBTRB_OFF_7H|_EBTRB_ON_7H|_FCMEN_OFF_1H|_FCMEN_ON_1H|_IDLOC0|_IDLOC1|_IDLOC2|_IDLOC3|_IDLOC4|_IDLOC5|_IDLOC6|_IDLOC7|_IESO_OFF_1H|_IESO_ON_1H|_LPT1OSC_OFF_3H|_LPT1OSC_ON_3H|_LVP_OFF_4L|_LVP_ON_4L|_MCLRE_OFF_3H|_MCLRE_ON_3H|_OSC_ECIO6_1H|_OSC_EC_1H|_OSC_HSPLL_1H|_OSC_HS_1H|_OSC_INTIO67_1H|_OSC_INTIO7_1H|_OSC_LP_1H|_OSC_RCIO6_1H|_OSC_RC_1H|_OSC_XT_1H|_PBADEN_OFF_3H|_PBADEN_ON_3H|_PWRT_OFF_2L|_PWRT_ON_2L|_STVREN_OFF_4L|_STVREN_ON_4L|_WDTPS_1024_2H|_WDTPS_128_2H|_WDTPS_16384_2H|_WDTPS_16_2H|_WDTPS_1_2H|_WDTPS_2048_2H|_WDTPS_256_2H|_WDTPS_2_2H|_WDTPS_32768_2H|_WDTPS_32_2H|_WDTPS_4096_2H|_WDTPS_4_2H|_WDTPS_512_2H|_WDTPS_64_2H|_WDTPS_8192_2H|_WDTPS_8_2H|_WDT_OFF_2H|_WDT_ON_2H|_WRT0_OFF_6L|_WRT0_ON_6L|_WRT1_OFF_6L|_WRT1_ON_6L|_WRT2_OFF_6L|_WRT2_ON_6L|_WRT3_OFF_6L|_WRT3_ON_6L|_WRTB_OFF_6H|_WRTB_ON_6H|_WRTC_OFF_6H|_WRTC_ON_6H|_WRTD_OFF_6H|_WRTD_ON_6H|_XINST_OFF_4L|_XINST_ON_4L|NA|NADDRESS|NBOR|NCS|NDONE|NMCLR|NPD|NPOR|NRBPU|NRD|NRI|NSS|NT1SYNC|NT3SYNC|NTO|NW|NWR|NWRITE)\\b)(?:([\\dA-Z_\\?\\$]+)\\b))(?=$|[, \\t])/gmi\r\nexport const usageVariableRegex = new RegExp(`(?<=^[ \\\\t]*(?:${INSTRUCTIONS})[ \\\\t](?:.*[ \\\\t,])?)(?<!(?:low|high|low highword)[ \\t]+)(?:(?!\\\\d|(?:[abcfw]|low|high|highword|${REGISTERS})\\\\b)(?:([\\\\dA-Z_\\\\?\\\\$]+)\\\\b))(?=$|[, \\\\t])`, \"gmi\");\r\n", "import { ResourceData, ResourceDataType } from \"@/resource/types\";\r\n\r\nimport { BaseVariableData, BaseVariableDataProps, BaseVariableDataType } from \"./base\";\r\n\r\nexport type VariableDataType = {\r\n    exists: boolean;\r\n} & BaseVariableDataType;\r\nexport type VariableResourceType = ResourceDataType<VariableDataType>;\r\n\r\nexport class VariableData extends BaseVariableData implements VariableDataType {\r\n    public exists: boolean;\r\n\r\n    constructor(props: Readonly<{\r\n        exists?: boolean;\r\n    }> & BaseVariableDataProps) {\r\n        super(props);\r\n        const { exists } = props;\r\n\r\n        this.exists = exists ?? false;\r\n    }\r\n}\r\n\r\nexport class VariableResource extends ResourceData<VariableDataType> { };\r\n", "import {\r\n    CancellationToken,\r\n    DefinitionProvider,\r\n    ExtensionContext,\r\n    languages,\r\n    Location,\r\n    Position,\r\n    ProviderResult,\r\n    TextDocument,\r\n} from \"vscode\";\r\nimport { checkLabelDefinition } from \"./label\";\r\nimport { checkVariableDefinition } from \"./variable\";\r\n\r\nconst lastSpaceRegex = /(^|\\s|,)[^\\s,]*$/\r\nconst nextSpaceRegex = /^([^\\s,]+)(?:$|\\s|,)/\r\n\r\nexport class CustomDefinitionProvider implements DefinitionProvider {\r\n    public provideDefinition(\r\n        document: TextDocument,\r\n        position: Position,\r\n        token: CancellationToken\r\n    ): ProviderResult<Location[]> {\r\n        const lineText = document.lineAt(position).text;\r\n        const spaceMatch = lineText.slice(0, position.character + 1).match(lastSpaceRegex);\r\n        if (!spaceMatch || !spaceMatch.index) {\r\n            return null;\r\n        }\r\n\r\n        const startIndex = spaceMatch.index + spaceMatch[1].length;\r\n        const endMatch = lineText.slice(startIndex).match(nextSpaceRegex);\r\n        if (!endMatch) {\r\n            return null;\r\n        }\r\n\r\n        const word = endMatch[1];\r\n        const locations: Location[] = [];\r\n\r\n        checkLabelDefinition(word, lineText, startIndex, locations);\r\n        if (locations.length > 0) {\r\n            return locations;\r\n        }\r\n\r\n        checkVariableDefinition(word, lineText, startIndex, document, locations);\r\n\r\n        return locations.length ? locations : null;\r\n    }\r\n}\r\n\r\nexport function initDefinitionProvider(context: ExtensionContext) {\r\n    const {\r\n        subscriptions\r\n    } = context;\r\n\r\n    const provider = new CustomDefinitionProvider();\r\n    subscriptions.push(languages.registerDefinitionProvider(\r\n        { language: \"asm\" },\r\n        provider,\r\n    ));\r\n}\r\n", "import { Location } from \"vscode\";\r\n\r\nimport { externalLabelRegex, labelBehindBranchRegex } from \"@/resource/label/analyze\";\r\nimport { labelManager } from \"@/resource/label/data\";\r\n\r\nconst branchRegex = new RegExp(labelBehindBranchRegex.source, \"i\");\r\nconst externalRegex = new RegExp(externalLabelRegex.source, \"i\");\r\n\r\nexport function checkLabelDefinition(\r\n    word: string,\r\n    lineText: string,\r\n    startIndex: number,\r\n    locations: Location[]\r\n): void {\r\n    const match = lineText.match(branchRegex) || lineText.match(externalRegex);\r\n    if (!match || match.index === undefined || startIndex !== match.index + match[0].indexOf(match[1])) return;\r\n\r\n    locations.push(...labelManager.labelNameMapData.get(word)?.filter(\r\n        ({ value: { isExternal } }) => !isExternal\r\n    ).map(({ uri, position }) => new Location(\r\n        uri, position\r\n    )) ?? []);\r\n}\r\n", "import { Location, TextDocument } from \"vscode\";\r\n\r\nimport { includeManager } from \"@/resource/include/data\";\r\nimport { variableManager } from \"@/resource/variable/data\";\r\nimport { usageVariableRegex } from \"@/resource/variable/usageVariableRegex\";\r\nimport { getFileId } from \"@/utils/getFileId\";\r\n\r\nconst variableRegex = new RegExp(usageVariableRegex.source, \"i\");\r\n\r\nexport function checkVariableDefinition(\r\n    word: string,\r\n    lineText: string,\r\n    startIndex: number,\r\n    document: TextDocument,\r\n    locations: Location[]\r\n): void {\r\n    const match = lineText.match(variableRegex);\r\n    if (!match || match.index === undefined || startIndex !== match.index + match[0].indexOf(match[1])) return;\r\n    const fileUri = getFileId(document.uri);\r\n\r\n    const includeData = includeManager.recursiveIncludeMapData.get(fileUri);\r\n    if (!includeData) return;\r\n\r\n    includeData.forEach(uri => {\r\n        const variableDefineMap = variableManager.fileMapDefineData.get(uri);\r\n        if (!variableDefineMap) return;\r\n\r\n        const variableData = variableDefineMap.get(word);\r\n        if (!variableData) return;\r\n\r\n        locations.push(new Location(\r\n            variableData.uri,\r\n            variableData.position\r\n        ));\r\n    });\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,iBASO;;;ACTP,oBAAmE;;;ACG5D,IAAM,sBAAwE;AAAA,EACjF;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+Bb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmCb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+Bb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwCb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+Bb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwCb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwCb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwCb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;A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CI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqEb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+Db;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqEb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,MAAQ;AAAA,IACN,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,MAAQ;AAAA,IACN,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,MAAQ;AAAA,IACN,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,MAAQ;AAAA,IACN,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,MAAQ;AAAA,IACN,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,MAAQ;AAAA,IACN,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA,EACA,OAAS;AAAA,IACP,KAAO;AAAA,IACP,OAAS;AAAA,EACX;AAAA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",
  "names": ["import_vscode", "import_vscode", "import_vscode", "import_vscode", "resource", "import_vscode", "DataManager", "fileUri", "includeData", "DataManager", "variables", "provider", "import_vscode", "import_vscode", "import_vscode", "import_vscode", "import_vscode", "import_vscode", "v", "bf", "import_vscode", "import_vscode", "import_vscode", "callbackAfterAnalysis", "import_vscode", "import_vscode", "import_vscode", "provider"]
}
